{"Root" : {
  "icon" : "8",
  "Part1" : {
    "id" : "settings",
    "icon" : "e"
  },
  "Part2" : {
    "id" : "groups",
    "icon" : "|"
  },
  "Part3" : {
    "id" : "dashboard",
    "icon" : "|"
  },
  "Part4" : {
    "id" : "formalisation",
    "icon" : "Ʃ",
    "Chapter1" : {
      "id" : "formalisation_logic",
      "icon" : "à",
      "Exercises" : {
        "Section1" : {
          "id" : "reading",
          "Exercise1" : {
            "id" : "reading_01",
            "assignment" : "hasRead Anais LesMiserables",
            "type" : "formalisation",
            "variables" : "reading",
            "comment" : "Anaïs a lu Les Misérables."
          },
          "Exercise2" : {
            "id" : "reading_02",
            "assignment" : "exists x, (and (isHuman x) (hasRead x LesMiserables))",
            "type" : "formalisation",
            "variables" : "reading",
            "comment" : "Quelqu’un a lu Les Misérables."
          },
          "Exercise3" : {
            "id" : "reading_03",
            "assignment" : "forall x, (isHuman x) -> (hasRead x LesMiserables)",
            "type" : "formalisation",
            "variables" : "reading",
            "comment" : "Tout le monde a lu Les Misérables."
          },
          "Exercise4" : {
            "id" : "reading_04",
            "assignment" : "exists x, (and (isHuman x) (~(hasRead x LesMiserables)))",
            "type" : "formalisation",
            "variables" : "reading",
            "comment" : "Tout le monde n’a pas lu Les Misérables."
          },
          "Exercise5" : {
            "id" : "reading_05",
            "assignment" : "exists x, (and (isHuman x) (~(hasRead x LesMiserables)))",
            "type" : "formalisation",
            "variables" : "reading",
            "comment" : "Quelqu’un n’a pas lu Les Misérables."
          },
          "Exercise6" : {
            "id" : "reading_06",
            "assignment" : "exists x, (and (isNovel x) (hasRead Anais x))",
            "type" : "formalisation",
            "variables" : "reading",
            "comment" : "Anaïs a lu un roman."
          },
          "Exercise7" : {
            "id" : "reading_08",
            "assignment" : "hasWritten VictorHugo LesMiserables",
            "type" : "formalisation",
            "variables" : "reading",
            "comment" : "Les Misérables a été écrit par Victor Hugo."
          },
          "Exercise8" : {
            "id" : "reading_09",
            "assignment" : "forall x, ((and (isNovel x) (hasWritten VictorHugo x)) ->  (hasRead Anais x))",
            "type" : "formalisation",
            "variables" : "reading",
            "comment" : "Anaïs a lu tous les romans de Victor Hugo."
          },
          "Exercise9" : {
            "id" : "reading_10",
            "assignment" : "exists x, (and (isNovel x) (~(hasRead Anais x)))",
            "type" : "formalisation",
            "variables" : "reading",
            "comment" : "Anaïs n’a pas lu tous les romans."
          },
          "Exercise10" : {
            "id" : "reading_11",
            "assignment" : "forall x, (isHuman x) -> (exists y, (and (isNovel y) (and (hasWritten VictorHugo y) (hasRead x y))))",
            "type" : "formalisation",
            "variables" : "reading",
            "comment" : "Tout le monde a lu un roman de Victor Hugo."
          },
          "Exercise11" : {
            "id" : "reading_12",
            "assignment" : "exists x, and (isHuman x) (forall y, (and (isNovel y) (hasWritten VictorHugo y)) -> (hasRead x y))",
            "type" : "formalisation",
            "variables" : "reading",
            "comment" : "Quelqu’un a lu tous les romans de Victor Hugo."
          },
          "Exercise12" : {
            "id" : "reading_13",
            "assignment" : "forall x, and (isHuman x) (exists y, (and (isNovel y) (hasWritten x y))) -> (hasRead x LesMiserables)",
            "type" : "formalisation",
            "variables" : "reading",
            "comment" : "Tous ceux qui ont écrit un roman ont lu Les Misérables."
          },
          "Exercise13" : {
            "id" : "reading_14",
            "assignment" : "~(exists x, (and (isHuman x) (forall y, (isNovel y) -> (hasWritten x y))))",
            "type" : "formalisation",
            "variables" : "reading",
            "comment" : "Tous les romans n’ont pas été écrits par une même personne."
          },
          "Exercise14" : {
            "id" : "reading_15",
            "assignment" : "forall y, (and (isNovel y) (and (hasWritten VictorHugo y) (hasRead Anais y))) -> (eq y LesMiserables)",
            "type" : "formalisation",
            "variables" : "reading",
            "comment" : "Parmi les romans de Victor Hugo, Anaïs n’a lu que Les Misérables."
          },
          "Exercise15" : {
            "id" : "reading_07",
            "assignment" : "exists x y, (and (isNovel x) (and (isNovel y) (and (hasRead Anais x) (and (hasRead Anais y) (and (~(eq x y)) (forall z, (and (isNovel z) (hasRead Anais z)) -> (or (eq z x) (eq z y))))))))",
            "type" : "formalisation",
            "variables" : "reading",
            "comment" : "Anaïs a lu exactement deux romans."
          }
        },
        "Section2" : {
          "id" : "lumberjack",
          "Exercise1" : {
            "id" : "lumberjack_01",
            "assignment" : "forall x, (isLumberjack x) -> (isMan x)",
            "type" : "formalisation",
            "variables" : "lumberjack",
            "comment" : "Tous les bûcherons sont des hommes."
          },
          "Exercise2" : {
            "id" : "lumberjack_02",
            "assignment" : "isRich Paul",
            "type" : "formalisation",
            "variables" : "lumberjack",
            "comment" : "Paul est riche."
          },
          "Exercise3" : {
            "id" : "lumberjack_03",
            "assignment" : "(isLumberjack Paul) -> (isRich Paul)",
            "type" : "formalisation",
            "variables" : "lumberjack",
            "comment" : "Si Paul est un bûcheron, Paul est riche."
          },
          "Exercise4" : {
            "id" : "lumberjack_04",
            "assignment" : "forall x, (isMan x) -> (or (isLumberjack x) (isRich x))",
            "type" : "formalisation",
            "variables" : "lumberjack",
            "comment" : "Tous les hommes sont bûcherons ou riches."
          },
          "Exercise5" : {
            "id" : "lumberjack_05",
            "assignment" : "exists x, and (isLumberjack x) (isRich x)",
            "type" : "formalisation",
            "variables" : "lumberjack",
            "comment" : "Quelques bûcherons sont riches."
          },
          "Exercise6" : {
            "id" : "lumberjack_06",
            "assignment" : "exists x, and (isLumberjack x) (~(isRich x))",
            "type" : "formalisation",
            "variables" : "lumberjack",
            "comment" : "Quelques bûcherons ne sont pas riches."
          },
          "Exercise7" : {
            "id" : "lumberjack_07",
            "assignment" : "forall x, (isLumberjack x) -> (~(isRich x))",
            "type" : "formalisation",
            "variables" : "lumberjack",
            "comment" : "Aucun bûcheron n’est riche."
          },
          "Exercise8" : {
            "id" : "lumberjack_08",
            "assignment" : "forall x, (isMan x) -> (isLumberjack x)",
            "type" : "formalisation",
            "variables" : "lumberjack",
            "comment" : "Tous les hommes sont bûcherons."
          },
          "Exercise9" : {
            "id" : "lumberjack_09",
            "assignment" : "forall x, (isMan x) -> ~(isLumberjack x)",
            "type" : "formalisation",
            "variables" : "lumberjack",
            "comment" : "Aucun homme n’est bûcheron."
          },
          "Exercise10" : {
            "id" : "lumberjack_10",
            "assignment" : "~(forall x, (isMan x) -> (isLumberjack x))",
            "type" : "formalisation",
            "variables" : "lumberjack",
            "comment" : "Tous les hommes ne sont pas bûcherons."
          }
        },
        "Section3" : {
          "id" : "illness",
          "Exercise1" : {
            "id" : "illness_01",
            "assignment" : "forall x, (flu x) -> (~(work x))",
            "type" : "formalisation",
            "variables" : "illness",
            "comment" : "Les personnes qui ont la grippe ne doivent pas aller au travail."
          },
          "Exercise2" : {
            "id" : "illness_02",
            "assignment" : "forall x, (and (fever x) (cough x)) -> (flu x)",
            "type" : "formalisation",
            "variables" : "illness",
            "comment" : "Les personnes qui ont de la fièvre et qui toussent ont la grippe."
          },
          "Exercise3" : {
            "id" : "illness_03",
            "assignment" : "forall x, forall t, (and (temp x t) (sup t tempcst)) -> (fever x)",
            "type" : "formalisation",
            "variables" : "illness",
            "comment" : "Ceux qui ont une température supérieure à 38‎°C ont de la fièvre."
          },
          "Exercise4" : {
            "id" : "illness_04",
            "assignment" : "and (cough Peter) (exists t, (and (temp Peter t) (sup t tempcst)))",
            "type" : "formalisation",
            "variables" : "illness",
            "comment" : "Pierre tousse et a une température supérieure à 38‎°C."
          }
        },
        "Section4" : {
          "id" : "happiness",
          "Exercise1" : {
            "id" : "happiness_04",
            "assignment" : "happy Raphael",
            "type" : "formalisation",
            "variables" : "happiness",
            "comment" : "Raphaël est heureux."
          },
          "Exercise2" : {
            "id" : "happiness_01",
            "assignment" : "forall x, (is_aperitif x) -> (like Raphael x)",
            "type" : "formalisation",
            "variables" : "happiness",
            "comment" : "Raphaël aime les apéritifs."
          },
          "Exercise3": {
            "id" : "happiness_05",
            "assignment" : "exists x, (forall y, (like x y) -> (is_aperitif y))",
            "type" : "formalisation",
            "variables" : "happiness",
            "comment" : "Quelqu’un n’aime que les apéritifs."
          },
          "Exercise4": {
            "id" : "happiness_02",
            "assignment" : "forall x, ((exists y, like y x) -> (happy x))",
            "type" : "formalisation",
            "variables" : "happiness",
            "comment" : "Tous ceux qui sont aimés sont heureux."
          },
          "Exercise5" : {
            "id" : "happiness_03",
            "assignment" : "forall x y, (and (like x y) (~(like y x))) -> (~(happy x))",
            "type" : "formalisation",
            "variables" : "happiness",
            "comment" : "Ceux qui aiment sans être aimés en retour sont malheureux."
          }
        },
        "Section5" : {
          "id" : "tournament",
          "Exercise1" : {
            "id" : "tournament_00",
            "assignment" : "play Alain Bernard",
            "type" : "formalisation",
            "variables" : "tournament",
            "comment" : "Alain et Bernard ont joué ensemble."
          },
          "Exercise2" : {
            "id" : "tournament_01",
            "assignment" : "and (enroll Alain) (enroll Bernard)",
            "type" : "formalisation",
            "variables" : "tournament",
            "comment" : "Alain et Bernard sont inscrits au tournoi."
          },
          "Exercise3" : {
            "id" : "tournament_02",
            "assignment" : "and (forall x, (exists y, (play x y)) -> (enroll x)) (forall y, (exists x, (defeat x y)) -> (eliminate y))",
            "type" : "formalisation",
            "variables" : "tournament",
            "comment" : "Un joueur doit être inscrit pour pouvoir jouer et tout joueur battu est éliminé."
          },
          "Exercise4" : {
            "id" : "tournament_03",
            "assignment" : "forall x, (and (enroll x) (play x Alain)) -> (defeat Bernard x)",
            "type" : "formalisation",
            "variables" : "tournament",
            "comment" : "Bernard a battu tous les joueurs inscrits qui ont joué contre Alain."
          },
          "Exercise5" : {
            "id" : "tournament_04",
            "assignment" : "(~(exists x, (and (enroll x) (and (defeat x Bernard) (exists y, (and (play x y) (and (enroll y) (defeat Alain y))))))))",
            "type" : "formalisation",
            "variables" : "tournament",
            "comment" : "Aucun joueur inscrit ayant battu Bernard n’a joué contre un joueur inscrit battu par Alain."
          }
        },
        "Section6" : {
          "id" : "acquaintance",
          "Exercise1" : {
            "id" : "acquaintance_01",
            "assignment" : "exists x, knowAcquaintance x Jeanne",
            "type" : "formalisation",
            "variables" : "acquaintance",
            "comment" : "Quelqu'un connaı̂t Jeanne."
          },
          "Exercise2" : {
            "id" : "acquaintance_02",
            "assignment" : "forall x, exists y, (~(knowAcquaintance x y))",
            "type" : "formalisation",
            "variables" : "acquaintance",
            "comment" : "Personne ne connaı̂t tout le monde."
          },
          "Exercise3" : {
            "id" : "acquaintance_03",
            "assignment" : "forall x, (knowAcquaintance x Jeanne) -> (knowAcquaintance Thomas x)",
            "type" : "formalisation",
            "variables" : "acquaintance",
            "comment" : "Thomas connaı̂t tous ceux qui connaissent Jeanne."
          },
          "Exercise4" : {
            "id" : "acquaintance_04",
            "assignment" : "exists x, and (knowAcquaintance Jeanne x) (forall y, knowAcquaintance x y)",
            "type" : "formalisation",
            "variables" : "acquaintance",
            "comment" : "Jeanne connaı̂t quelqu'un qui connaı̂t tout le monde."
          }
        },
        "Section7" : {
          "id" : "nature",
          "Exercise1" : {
            "id" : "nature_01",
            "assignment" : "forall x, isHerbivore x -> (exists y, and (isVegetable y) (eat x y))",
            "type" : "formalisation",
            "variables" : "nature",
            "comment" : "Les herbivores mangent des végétaux."
          },
          "Exercise2" : {
            "id" : "nature_02",
            "assignment" : "forall x y, (and (isHerbivore x) (eat x y)) -> (isVegetable y)",
            "type" : "formalisation",
            "variables" : "nature",
            "comment" : "Les herbivores ne mangent que des végétaux."
          },
          "Exercise3" : {
            "id" : "nature_03",
            "assignment" : "~(exists x, and (isHerbivore x) (forall y, (isVegetable y) -> (eat x y)))",
            "type" : "formalisation",
            "variables" : "nature",
            "comment" : "Aucun herbivore ne mange tout type de végétal."
          },
          "Exercise4" : {
            "id" : "nature_04",
            "assignment" : "exists x, and (isVegetable x) (forall y, (isHerbivore y) -> (~(eat y x)))",
            "type" : "formalisation",
            "variables" : "nature",
            "comment" : "Il y a des végétaux que ne mange aucun herbivore."
          },
          "Exercise5" : {
            "id" : "nature_05",
            "assignment" : "exists x, and (isHerbivore x) (forall y, (isBamboo y) -> (~(eat x y)))",
            "type" : "formalisation",
            "variables" : "nature",
            "comment" : "Certains herbivores ne mangent pas de bambou."
          },
          "Exercise6" : {
            "id" : "nature_06",
            "assignment" : "forall x, (isPanda x) -> (and (isHerbivore x) (forall y, (eat x y) -> (isBamboo y)))",
            "type" : "formalisation",
            "variables" : "nature",
            "comment" : "Les pandas sont des herbivores qui ne consomment que des bambous."
          }
        },
        "Section8" : {
          "id" : "solar_system",
          "Exercise1" : {
            "id" : "solar_system_01",
            "assignment" : "isPlanet Venus",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Vénus est une planète"
          },
          "Exercise2" : {
            "id" : "solar_system_02",
            "assignment" : "~(isPlanet Sun)",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Le Soleil n’est pas une planète."
          },
          "Exercise3" : {
            "id" : "solar_system_03",
            "assignment" : "isEarthRotating Sun",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Le Soleil tourne autour de la Terre."
          },
          "Exercise4" : {
            "id" : "solar_system_04",
            "assignment" : "exists x, and (isPlanet x) (isSmallerThan x Earth)",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Certaines planètes sont plus petites que la Terre."
          },
          "Exercise5" : {
            "id" : "solar_system_05",
            "assignment" : "forall x, (isPlanet x) -> (isSmallerThan x Saturn)",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Toutes les planètes sont plus petites que Saturne."
          },
          "Exercise6" : {
            "id" : "solar_system_06",
            "assignment" : "forall x, (~(isSmallerThan x Moon))",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Rien n’est plus petit que la Lune."
          },
          "Exercise7" : {
            "id" : "solar_system_07",
            "assignment" : "forall x, (and (isPlanet x) (isCloserSunThan x Mercury)) -> (eq x Mercury)",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Mercure est la planète la plus proche du Soleil."
          },
          "Exercise8" : {
            "id" : "solar_system_08",
            "assignment" : "isCloserSunThan Neptune Mars",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Mars est plus loin du Soleil que Neptune."
          },
          "Exercise9" : {
            "id" : "solar_system_09",
            "assignment" : "forall x, (isCloserSunThan Neptune x) -> (~(isPlanet x))",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Si quelque chose est plus éloigné du Soleil que Neptune, alors ce n’est pas une planète."
          },
          "Exercise10" : {
            "id" : "solar_system_10",
            "assignment" : "(isEarthRotating Sun) -> (isSmallerThan Sun Earth)",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Si le Soleil tourne autours de la Terre, alors il est plus petit que celle-ci."
          },
          "Exercise11" : {
            "id" : "solar_system_11",
            "assignment" : "(forall x, (isPlanet x) -> (isSmallerThan x Earth)) -> (isSmallerThan Jupiter Earth)",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "S’il n’y a pas de planète plus grande que la Terre, alors la Terre est plus grande que Jupiter."
          },
          "Exercise12" : {
            "id" : "solar_system_12",
            "assignment" : "and (isPlanet Moon) (exists x, (~(isPlanet x)))",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "La Lune est une planète mais certaines choses ne sont pas des planètes."
          },
          "Exercise13" : {
            "id" : "solar_system_13",
            "assignment" : "~(forall x, (isPlanet x) -> (isEarthRotating x))",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Toutes les planètes ne tournent pas autour de la Terre."
          },
          "Exercise14" : {
            "id" : "solar_system_14",
            "assignment" : "forall x, (isPlanet x) -> (~(isSmallerThan x Mercury))",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Aucune planète n’est plus petite que Mercure."
          },
          "Exercise15" : {
            "id" : "solar_system_15",
            "assignment" : "forall x, (isPlanet x) -> (or (~(isSmallerThan Earth x)) (~(isCloserSunThan x Earth)))",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Il n’y a pas de planète qui soit plus grande que la Terre tout en étant plus proche du Soleil qu’elle."
          },
          "Exercise16" : {
            "id" : "solar_system_16",
            "assignment" : "exists x, and (isPlanet x) (forall y, (isCloserSunThan y x) -> (isSmallerThan y x))",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Il existe une planète telle que tout objet plus proche du Soleil qu’elle, est plus petit qu’elle."
          },
          "Exercise17" : {
            "id" : "solar_system_17",
            "assignment" : "forall x, (isPlanet x) -> (or (isSmallerThan Uranus x) (isCloserSunThan x Uranus))",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Aucune planète n’est à la fois plus petite qu’Uranus et plus éloignée du Soleil qu’elle."
          },
          "Exercise18" : {
            "id" : "solar_system_18",
            "assignment" : "(forall x, (isPlanet x) -> (isEarthRotating x)) -> (isEarthRotating Neptune)",
            "type" : "formalisation",
            "variables" : "solar_system",
            "comment" : "Si toutes les planètes tournent autour de la Terre, alors Neptune aussi."
          }
        }
      }
    },
    "Chapter2" : {
      "id" : "formalisation_math",
      "icon" : "Ĝ",
      "Exercises" : {
        "Section1" : {
          "id" : "arithmetic",
          "Exercise1" : {
            "id" : "arithmetic_01",
            "assignment" : "exists x, forall y, lteqA x y",
            "type" : "formalisation",
            "variables" : "arithmetic",
            "comment" : "Il existe un entier plus petit ou égal à tous les autres."
          },
          "Exercise2" : {
            "id" : "arithmetic_02",
            "assignment" : "and (~(exists x, forall y, lteqA y x)) (forall x, exists y, and (lteqA x y) (~(x = y)));, and (~(exists m, forall n, lteqA n m)) (forall n, exists m, lteqA (plusA n oneA) m)",
            "type" : "formalisation",
            "variables" : "arithmetic",
            "comment" : "Il n'existe pas d’entier plus grand ou égal à tous les autres, mais pour tout entier il en existe un qui est strictement plus grand."
          },
          "Exercise3" : {
            "id" : "arithmetic_03",
            "assignment" : "forall x, pairA x -> (exists y z, and (premA y) (and (premA z) ((x) = (plusA y z))))",
            "type" : "formalisation",
            "variables" : "arithmetic",
            "comment" : "Tout nombre entier pair est égal à la somme de deux nombres entiers premiers."
          },
          "Exercise4" : {
            "id" : "arithmetic_04",
            "assignment" : "forall x, exists y, and (premA y) (and (lteqA x y) (~(eq x y)))",
            "type" : "formalisation",
            "variables" : "arithmetic",
            "comment" : "L’ensemble des entiers premiers est non borné."
          }
        },
        "Section2" : {
          "id" : "function",
          "Exercise1" : {
            "id" : "function_01",
            "assignment" : "forall x y, sis_elementA x I -> sis_elementA y I -> lteqA x y -> lteqA (app_funA f x) (app_funA f y)",
            "type" : "formalisation",
            "variables" : "maths",
            "comment" : "La fonction f est croissante sur l’intervalle I."
          },
          "Exercise2" : {
            "id" : "function_02",
            "assignment" : "(~(forall x y, sis_elementA x I -> sis_elementA y I -> lteqA x y -> lteqA (app_funA f x) (app_funA f y)))",
            "type" : "formalisation",
            "variables" : "maths",
            "notNegRoot" : "true",
            "comment" : "La fonction f n’est pas croissante sur l’intervalle I."
          },
          "Exercise3" : {
            "id" : "function_03",
            "assignment" : "forall x y, sis_elementA x I -> sis_elementA y I -> lteqA x y -> (~(eq x y)) -> (~(lteqA (app_funA f x) (app_funA f y))); forall x y, sis_elementA x I -> sis_elementA y I -> (~(lteqA x y)) -> (~(lteqA (app_funA f y) (app_funA f x)))",
            "type" : "formalisation",
            "variables" : "maths",
            "comment" : "La fonction f est strictement décroissante sur l’intervalle I."
          },
          "Exercise4" : {
            "id" : "function_04",
            "assignment" : "exists m, forall x, sis_elementA x I -> lteqA (app_funA f x) m ",
            "type" : "formalisation",
            "variables" : "maths",
            "comment" : "La fonction f est majorée sur l’intervalle I."
          },
          "Exercise5" : {
            "id" : "function_05",
            "assignment" : "exists bmin bmax, forall x, sis_elementA x I -> and (lteqA bmin (app_funA f x)) (lteqA (app_funA f x) bmax)",
            "type" : "formalisation",
            "variables" : "maths",
            "comment" : "La fonction f est bornée sur l’intervalle I."
          }
        },
        "Section3" : {
          "id" : "series",
          "Exercise1" : {
            "id" : "function_10",
            "assignment" : "forall f, (~(is_bound f)) -> (~(is_convergent f))",
            "type" : "formalisation",
            "variables" : "series2",
            "comment" : "La contraposée de : si la fonction f converge alors f est bornée."
          },
          "Exercise2" : {
            "id" : "function_11",
            "assignment" : "forall f, (is_bound f) -> (is_convergent f)",
            "type" : "formalisation",
            "variables" : "series2",
            "comment" : "La réciproque de : si la fonction f converge alors f est bornée."
          },
          "Exercise3" : {
            "id" : "function_07",
            "assignment" : "exists n, (~(app_funA s n = zeroA))",
            "type" : "formalisation",
            "variables" : "seriesWithZero",
            "notNegRoot" : "true",
            "comment" : "La suite s n’est pas la suite nulle."
          },
          "Exercise4" : {
            "id" : "function_09",
            "assignment" : "(~(exists A, (forall n, lteqA (app_funA s n) A)))",
            "type" : "formalisation",
            "variables" : "series",
            "notNegRoot" : "true",
            "comment" : "La suite s n’est pas majorée."
          },
          "Exercise5" : {
            "id" : "function_08",
            "assignment" : "(~(forall x y, lteqA x y -> lteqA (app_funA s x) (app_funA s y)))",
            "type" : "formalisation",
            "variables" : "series",
            "notNegRoot" : "true",
            "comment" : "La suite s n’est pas décroissante."
          },
          "Exercise6" : {
            "id" : "function_06",
            "assignment" : "exists L, forall e, lteqA zeroA e -> exists r, forall n, (lteqA r n) -> lteqA (absA (minusA (app_funA s n) L)) e",
            "type" : "formalisation",
            "variables" : "seriesWithZero",
            "comment" : "La suite s est convergente."
          }
        },
        "Section4" : {
          "id" : "geometry",
          "Exercise1" : {
            "id" : "geometry_01",
            "assignment" : "(or (~(intersect a b)) (a = b) -> (are_parallel a b))",
            "type" : "formalisation",
            "variables" : "geometry",
            "disclaimer" : "true",
            "comment" : "Les droites a et b sont parallèles si elles n’ont aucun point en commun ou si elles sont confondues"
          },
          "Exercise2" : {
            "id" : "geometry_02",
            "assignment" : "and (~(are_parallel a b)) (~(a = b))",
            "type" : "formalisation",
            "variables" : "geometry",
            "comment" : "Les droites a et b ne sont ni parallèles ni confondues."
          },
          "Exercise3" : {
            "id" : "geometry_03",
            "assignment" : "(~(intersect a b)) -> (are_parallel a b)",
            "type" : "formalisation",
            "variables" : "geometry",
            "disclaimer" : "true",
            "comment" : "Si les droites a et b n’ont aucun point commun, elles sont parallèles."
          },
          "Exercise4" : {
            "id" : "geometry_04",
            "assignment" : "(are_parallel a b) -> (~(intersect a b))",
            "type" : "formalisation",
            "variables" : "geometry",
            "disclaimer" : "true",
            "comment" : "Pour que les droites a et b soient parallèles, il faut qu'elles n'aient aucun point commun."
          },
          "Exercise5" : {
            "id" : "geometry_05",
            "assignment" : "(intersect a b) -> (~(a = b)) -> (~(are_parallel a b))",
            "type" : "formalisation",
            "variables" : "geometry",
            "disclaimer" : "true",
            "comment" : "Si les droites a et b ont un point commun, elles ne sont pas parallèles, sauf si elles sont confondues."
          },
          "Exercise6" : {
            "id" : "geometry_06",
            "assignment" : "or (~(intersect a b)) (a = b)",
            "type" : "formalisation",
            "variables" : "geometry",
            "disclaimer" : "true",
            "comment" : "Soit les droites a et b n’ont aucun point en commun soit elles sont confondues."
          },
          "Exercise7" : {
            "id" : "geometry_07",
            "assignment" : "(~(a = b)) -> (~(intersect a b)) -> (are_parallel a b)",
            "type" : "formalisation",
            "variables" : "geometry",
            "disclaimer" : "true",
            "comment" : "Si les droites a et b ne sont pas confondues, pour qu’elles soient parallèles, il suffit qu’elles n’aient aucun point commun."
          }
        }
      }
    },
    "Chapter3" : {
      "id" : "formalisation_chess",
      "icon" : "ƪ",
      "Exercises" : {
        "Section1" : {
          "id" : "chess_with_var_01",
          "Exercise1" : {
            "id" : "chess_with_var_01_01",
            "assignment" : "bigger L1 L2",
            "type" : "chess"
          },
          "Exercise2" : {
            "id" : "chess_with_var_01_02",
            "assignment" : "between L3 L4 L2",
            "type" : "chess"
          },
          "Exercise3" : {
            "id" : "chess_with_var_01_03",
            "assignment" : "east_of L3 L2",
            "type" : "chess"
          },
          "Exercise4" : {
            "id" : "chess_with_var_01_04",
            "assignment" : "south_of L2 L1",
            "type" : "chess"
          },
          "Exercise5" : {
            "id" : "chess_with_var_01_05",
            "assignment" : "north_of L4 L2",
            "type" : "chess"
          },
          "Exercise6" : {
            "id" : "chess_with_var_01_06",
            "assignment" : "west_of L1 L2",
            "type" : "chess"
          },
          "Exercise7" : {
            "id" : "chess_with_var_01_model",
            "assignment" : "formula:chess_with_var_01_01;formula:chess_with_var_01_02;formula:chess_with_var_01_03;formula:chess_with_var_01_04;formula:chess_with_var_01_05;formula:chess_with_var_01_06;",
            "type" : "chess"
          }
        },
        "Section2" : {
          "id" : "chess_with_var_02",
          "Exercise1" : {
            "id" : "chess_with_var_02_01",
            "assignment" : "(~(or (is_king L1) (is_queen L1)))",
            "type" : "chess"
          },
          "Exercise2" : {
            "id" : "chess_with_var_02_02",
            "assignment" : "and (~(is_king L1)) (~(is_queen L1))",
            "type" : "chess"
          },
          "Exercise3" : {
            "id" : "chess_with_var_02_03",
            "assignment" : "(~(and (is_small L2) (is_pawn L2)))",
            "type" : "chess"
          },
          "Exercise4" : {
            "id" : "chess_with_var_02_04",
            "assignment" : "or (~(is_small L2)) (~(is_pawn L2))",
            "type" : "chess"
          },
          "Exercise5" : {
            "id" : "chess_with_var_02_05",
            "assignment" : "and (~(south_of L3 L2)) (~(north_of L3 L2))",
            "type" : "chess"
          },
          "Exercise6" : {
            "id" : "chess_with_var_02_06",
            "assignment" : "(~(or (south_of L3 L2) (north_of L3 L2)))",
            "type" : "chess"
          },
          "Exercise7" : {
            "id" : "chess_with_var_02_07",
            "assignment" : "or (~(west_of L2 L3)) (~(west_of L3 L1))",
            "type" : "chess"
          },
          "Exercise8" : {
            "id" : "chess_with_var_02_08",
            "assignment" : "(~(and (west_of L2 L3) (west_of L3 L1)))",
            "type" : "chess"
          },
          "Exercise9" : {
            "id" : "chess_with_var_02_model",
            "assignment" : "formula:chess_with_var_02_01;formula:chess_with_var_02_02;formula:chess_with_var_02_03;formula:chess_with_var_02_04;formula:chess_with_var_02_05;formula:chess_with_var_02_06;formula:chess_with_var_02_07;formula:chess_with_var_02_08;",
            "type" : "chess"
          }
        },
        "Section3" : {
          "id" : "chess_with_var_03",
          "Exercise1" : {
            "id" : "chess_with_var_03_01",
            "assignment" : "or (is_small L1) (and (is_large L3) (is_large L4))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "A est petit ou C et D sont grands."
          },
          "Exercise2" : {
            "id" : "chess_with_var_03_02",
            "assignment" : "and (north_of L4 L2) (north_of L5 L2)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "D et E sont en haut de B."
          },
          "Exercise3" : {
            "id" : "chess_with_var_03_03",
            "assignment" : "and (and (north_of L4 L2) (north_of L5 L2)) (and (bigger L4 L2) (bigger L5 L2))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "D et E sont en haut de B et sont tous deux plus grands que B."
          },
          "Exercise4" : {
            "id" : "chess_with_var_03_04",
            "assignment" : "and (and (is_pawn L3) (is_pawn L4)) (and (~(is_small L3)) (~(is_small L4)))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "C et D sont tous deux des pions et de plus, aucun d’eux n’est petit."
          },
          "Exercise5" : {
            "id" : "chess_with_var_03_05",
            "assignment" : "and (and ((~east_of L5 L3)) (~(east_of L1 L3))) (and (~(west_of L5 L2)) (~(west_of L1 L2)))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Ni E ni A n’est à droite de C et à gauche de B."
          },
          "Exercise6" : {
            "id" : "chess_with_var_03_06",
            "assignment" : "or (~(is_large L5)) (north_of L5 L1)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Soit E n’est pas grand, soit E est en haut de A."
          },
          "Exercise7" : {
            "id" : "chess_with_var_03_07",
            "assignment" : "and (~(between L3 L1 L2)) (and (~(south_of L3 L1)) (~(south_of L3 L2)))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "C n’est ni entre A et B, ni en bas de A, ni en bas de B."
          },
          "Exercise8" : {
            "id" : "chess_with_var_03_08",
            "assignment" : "or (and (is_queen L1) (is_queen L5)) (and (is_queen L1) (is_queen L6))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Soit A et E sont de reines, soit A et F sont des reines."
          },
          "Exercise9" : {
            "id" : "chess_with_var_03_09",
            "assignment" : "and (and (~(south_of L3 L3)) (~(south_of L3 L2))) (and (~(south_of L4 L3)) (~(south_of L4 L2)))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "C et D ne sont ni en bas de C, ni en bas de B."
          },
          "Exercise10" : {
            "id" : "chess_with_var_03_10",
            "assignment" : "or (between L3 L4 L6) (and (smaller L3 L4) (smaller L3 L6))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "C est entre D et F ou plus petit que D et plus petit que F."
          },
          "Exercise11" : {
            "id" : "chess_with_var_03_model",
            "assignment" : "exercise:chess_with_var_03_01;exercise:chess_with_var_03_02;exercise:chess_with_var_03_03;exercise:chess_with_var_03_04;exercise:chess_with_var_03_05;exercise:chess_with_var_03_06;exercise:chess_with_var_03_07;exercise:chess_with_var_03_08;exercise:chess_with_var_03_09;exercise:chess_with_var_03_10;",
            "type" : "chess"
          }
        },
        "Section4" : {
          "id" : "chess_with_var_04",
          "Exercise1" : {
            "id" : "chess_with_var_04_01",
            "assignment" : "exists x : (Anonymous), and (is_queen x) (is_large x)",
            "type" : "chess"
          },
          "Exercise2" : {
            "id" : "chess_with_var_04_02",
            "assignment" : "exists x : (Anonymous), and (is_queen x) (is_medium x)",
            "type" : "chess"
          },
          "Exercise3" : {
            "id" : "chess_with_var_04_03",
            "assignment" : "exists x : (Anonymous), and (is_pawn x) (~(is_small x))",
            "type" : "chess"
          },
          "Exercise4" : {
            "id" : "chess_with_var_04_04",
            "assignment" : "exists x : (Anonymous), and (is_king x) (~(is_large x))",
            "type" : "chess"
          },
          "Exercise5" : {
            "id" : "chess_with_var_04_05",
            "assignment" : "forall x : (Anonymous), (is_pawn x) -> (is_medium x)",
            "type" : "chess"
          },
          "Exercise6" : {
            "id" : "chess_with_var_04_06",
            "assignment" : "forall x : (Anonymous), (is_king x) -> (is_small x)",
            "type" : "chess"
          },
          "Exercise7" : {
            "id" : "chess_with_var_04_07",
            "assignment" : "forall x : (Anonymous), (is_queen x) -> (~(is_small x))",
            "type" : "chess"
          },
          "Exercise8" : {
            "id" : "chess_with_var_04_08",
            "assignment" : "forall x : (Anonymous), (is_pawn x) -> (~(is_queen x))",
            "type" : "chess"
          },
          "Exercise9" : {
            "id" : "chess_with_var_04_model",
            "assignment" : "formula:chess_with_var_04_01;formula:chess_with_var_04_02;formula:chess_with_var_04_03;formula:chess_with_var_04_04;formula:chess_with_var_04_05;formula:chess_with_var_04_06;formula:chess_with_var_04_07;formula:chess_with_var_04_08;",
            "type" : "chess"
          },
          "Exercise10" : {
            "id" : "chess_with_var_04_09",
            "assignment" : "forall x : (Anonymous), (is_large x) -> (is_queen x)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Toute grande pièce est une reine."
          },
          "Exercise11" : {
            "id" : "chess_with_var_04_model_2",
            "assignment" : "formula:chess_with_var_04_01;formula:chess_with_var_04_02;formula:chess_with_var_04_03;formula:chess_with_var_04_04;formula:chess_with_var_04_05;formula:chess_with_var_04_06;formula:chess_with_var_04_07;formula:chess_with_var_04_08;exercise:chess_with_var_04_09;",
            "type" : "chess"
          }
        },
        "Section5" : {
          "id" : "chess_with_var_05",
          "Exercise1" : {
            "id" : "chess_with_var_05_01",
            "assignment" : "forall x : (Anonymous), exists y : (Anonymous), and (~(south_of x y)) (~(south_of y x));(~(exists x : (Anonymous), forall y : (Anonymous), and (~(south_of x y)) (~(south_of y x))));",
            "type" : "chess"
          },
          "Exercise2" : {
            "id" : "chess_with_var_05_02",
            "assignment" : "exists x : (Anonymous), forall y : (Anonymous), and (~(south_of x y)) (~(south_of y x))",
            "type" : "chess"
          }
        },
        "Section6" : {
          "id" : "chess_with_var_06",
          "Exercise1" : {
            "id" : "chess_with_var_06_00",
            "assignment" : "exists x : (Anonymous), exists y : (Anonymous), and (is_king x) (is_pawn y)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Un pion et un roi sont présents sur l'échiquier."
          },
          "Exercise2" : {
            "id" : "chess_with_var_06_01",
            "assignment" : "forall x : (Anonymous), (is_pawn x) -> (is_small x)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Tous les pions sont petits."
          },
          "Exercise3" : {
            "id" : "chess_with_var_06_02",
            "assignment" : "forall x : (Anonymous), (and (is_pawn x) (is_small x)) -> (east_of x L1)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Chaque petit pion est à droite de A."
          },
          "Exercise4" : {
            "id" : "chess_with_var_06_03",
            "assignment" : "forall x : (Anonymous), (is_king x) -> (is_large x)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Tous les rois sont grands."
          },
          "Exercise5" : {
            "id" : "chess_with_var_06_04",
            "assignment" : "forall x : (Anonymous), (is_king x) -> (west_of L1 x)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "A est à gauche de tout roi."
          },
          "Exercise6" : {
            "id" : "chess_with_var_06_05",
            "assignment" : "forall x : (Anonymous), (and (is_queen x) (is_medium x)) -> (south_of x L2)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Toute reine de taille moyenne est en bas de B."
          },
          "Exercise7" : {
            "id" : "chess_with_var_06_06",
            "assignment" : "forall x : (Anonymous), (is_pawn x) -> (or (south_of x L2) (north_of x L1))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Chaque pion est en bas de B ou en haut de A."
          },
          "Exercise8" : {
            "id" : "chess_with_var_06_07",
            "assignment" : "forall x : (Anonymous), (is_pawn x) -> (and (west_of x L2) (east_of x L1))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Tout pion est à gauche de B et à droite de A."
          },
          "Exercise9" : {
            "id" : "chess_with_var_06_08",
            "assignment" : "forall x : (Anonymous), (between x L1 L2) -> (is_pawn x); forall x : (Anonymous), (between x L2 L1) -> (is_pawn x)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Tout ce qui se trouve entre B et A est un pion."
          },
          "Exercise10" : {
            "id" : "chess_with_var_06_09",
            "assignment" : "forall x : (Anonymous), (smaller x L1) -> (is_pawn x)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Tout ce qui est plus petit que A est un pion."
          },
          "Exercise11" : {
            "id" : "chess_with_var_06_10",
            "assignment" : "(~(exists x : (Anonymous), and (is_king x) (is_small x)))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Aucun roi n’est petit."
          },
          "Exercise12" : {
            "id" : "chess_with_var_06_11",
            "assignment" : "(~(forall x : (Anonymous), east_of L1 x))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "A n’est pas à droite de tout."
          },
          "Exercise13" : {
            "id" : "chess_with_var_06_12",
            "assignment" : "forall x : (Anonymous), (~(east_of L1 x))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "A n’est à droite d’aucune pièce."
          },
          "Exercise14" : {
            "id" : "chess_with_var_06_13",
            "assignment" : "forall x : (Anonymous), (is_pawn x) -> (~(east_of L1 x))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "A n’est pas à droite d’un pion."
          },
          "Exercise15" : {
            "id" : "chess_with_var_06_14",
            "assignment" : "forall x : (Anonymous), (is_pawn x) -> (and (west_of x L2) (east_of x L1))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Si une pièce est un pion, alors cette pièce est à gauche de B et à droite de A."
          },
          "Exercise16" : {
            "id" : "chess_with_var_06_15",
            "assignment" : "forall x : (Anonymous), equiv (is_pawn x) (and (west_of x L2) (east_of x L1))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Une pièce est un pion, si et seulement si cette pièce est à gauche de B et à droite de A."
          },
          "Exercise17" : {
            "id" : "chess_with_var_06_model",
            "assignment" : "exercise:chess_with_var_06_00;exercise:chess_with_var_06_01;exercise:chess_with_var_06_02;exercise:chess_with_var_06_03;exercise:chess_with_var_06_04;exercise:chess_with_var_06_05;exercise:chess_with_var_06_06;exercise:chess_with_var_06_07;exercise:chess_with_var_06_08;exercise:chess_with_var_06_09;exercise:chess_with_var_06_10;exercise:chess_with_var_06_11;exercise:chess_with_var_06_12;exercise:chess_with_var_06_13;exercise:chess_with_var_06_14;exercise:chess_with_var_06_15;",
            "type" : "chess"
          }
        },
        "Section7" : {
          "id" : "chess_with_var_07",
          "Exercise1" : {
            "id" : "chess_with_var_07_00",
            "assignment" : "exists x : (Anonymous), (is_pawn x)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Il y a un pion sur le plateau."
          },
          "Exercise2" : {
            "id" : "chess_with_var_07_01",
            "assignment" : "and (is_queen L2) (smaller L2 L5)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "B est une reine plus petite que E."
          },
          "Exercise3" : {
            "id" : "chess_with_var_07_02",
            "assignment" : "forall x : (Anonymous), (is_pawn x) -> (~(is_medium x))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Il n’y a pas de pion moyen."
          },
          "Exercise4" : {
            "id" : "chess_with_var_07_03",
            "assignment" : "(~(exists x : (Anonymous), south_of x L2))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Rien n’est en bas de B."
          },
          "Exercise5" : {
            "id" : "chess_with_var_07_04",
            "assignment" : "forall x : (Anonymous), (is_pawn x) -> (or (north_of x L5) (south_of x L5))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Tout pion est soit en bas ou en haut de E."
          },
          "Exercise6" : {
            "id" : "chess_with_var_07_05",
            "assignment" : "forall x : (Anonymous),  forall y : (Anonymous),  forall z : (Anonymous), (is_pawn x) -> (~(between x y z));forall x : (Anonymous),  forall y : (Anonymous),  forall z : (Anonymous), (is_pawn x) -> (~(between x z y))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Aucun pion n’est entre deux pièces."
          },
          "Exercise7" : {
            "id" : "chess_with_var_07_model",
            "assignment" : "exercise:chess_with_var_07_00;exercise:chess_with_var_07_01;exercise:chess_with_var_07_02;exercise:chess_with_var_07_03;exercise:chess_with_var_07_04;exercise:chess_with_var_07_05;",
            "type" : "chess"
          }
        },
        "Section8" : {
          "id" : "chess_with_var_08",
          "Exercise1" : {
            "id" : "chess_with_var_08_00",
            "assignment" : "exists x : (Anonymous), exists y : (Anonymous), exists z : (Anonymous), and (and (is_pawn x) (is_queen y)) (is_king z)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Un roi, une reine et un pion sont sur le plateau."
          },
          "Exercise2" : {
            "id" : "chess_with_var_08_01",
            "assignment" : "forall x : (Anonymous), forall y : (Anonymous), (is_queen x) -> (is_king y) -> (south_of x y)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Toute reine est en bas de tout roi."
          },
          "Exercise3" : {
            "id" : "chess_with_var_08_02",
            "assignment" : "(~(exists x : (Anonymous), and (is_king x) (exists y : (Anonymous), north_of y x)))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Aucun roi n’a quelque chose en haut de lui."
          },
          "Exercise4" : {
            "id" : "chess_with_var_08_03",
            "assignment" : "forall x : (Anonymous), forall y : (Anonymous), (is_queen x) -> (is_pawn y) -> (~(same_size x y))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Aucune reine n’a la même taille qu’un pion."
          },
          "Exercise5" : {
            "id" : "chess_with_var_08_04",
            "assignment" : "forall x : (Anonymous), (is_king x) -> (exists y : (Anonymous), and (is_pawn y) (same_size x y))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Tout roi a la même taille qu’un pion."
          },
          "Exercise6" : {
            "id" : "chess_with_var_08_05",
            "assignment" : "forall x : (Anonymous), forall y : (Anonymous), forall z : (Anonymous), (is_queen y) -> (is_queen z) -> (between x y z) -> (and (is_pawn x) (is_small x))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Toute pièce entre deux reines est un petit pion."
          },
          "Exercise7" : {
            "id" : "chess_with_var_08_06",
            "assignment" : "forall x : (Anonymous), exists y : (Anonymous), exists z : (Anonymous), (is_pawn x) -> (between x y z)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Tout pion est entre deux pièces."
          },
          "Exercise8" : {
            "id" : "chess_with_var_08_07",
            "assignment" : "forall x : (Anonymous), forall y : (Anonymous), (is_pawn x) -> (north_of y x) -> (is_small x)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Tout pion qui a quelque chose en haut de lui est petit."
          },
          "Exercise9" : {
            "id" : "chess_with_var_08_08",
            "assignment" : "forall x : (Anonymous), (is_king x) -> (forall y : (Anonymous), (~(east_of y x))) -> (is_small x)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Tout roi qui n’a rien à droite est petit."
          },
          "Exercise10" : {
            "id" : "chess_with_var_08_09",
            "assignment" : "forall x : (Anonymous), (is_king x) -> (forall y : (Anonymous), (~(east_of y x))) -> (exists y : (Anonymous), (west_of y x))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Tout roi qui n’a rien à droite a quelque chose à gauche."
          },
          "Exercise11" : {
            "id" : "chess_with_var_08_10",
            "assignment" : "forall x : (Anonymous), (is_king x) -> (exists y : (Anonymous), and (is_pawn y) (west_of x y)) -> (is_large x)",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Tout roi à gauche d’un pion est grand."
          },
          "Exercise12" : {
            "id" : "chess_with_var_08_model",
            "assignment" : "exercise:chess_with_var_08_00;exercise:chess_with_var_08_01;exercise:chess_with_var_08_02;exercise:chess_with_var_08_03;exercise:chess_with_var_08_04;exercise:chess_with_var_08_05;exercise:chess_with_var_08_06;exercise:chess_with_var_08_07;exercise:chess_with_var_08_08;exercise:chess_with_var_08_09;exercise:chess_with_var_08_10;",
            "type" : "chess"
          }
        },
        "Section9" : {
          "id" : "chess_with_var_09",
          "Exercise1" : {
            "id" : "chess_with_var_09_02",
            "assignment" : "exists x : (Anonymous), and (is_pawn x) (forall y : (Anonymous), (is_pawn y) -> (same x y))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Il y a exactement un pion."
          },
          "Exercise2" : {
            "id" : "chess_with_var_09_03",
            "assignment" : "exists x : (Anonymous), exists y : (Anonymous), and (is_pawn x) (and (is_pawn y) (~(same x y)))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Il y a au moins deux pions."
          },
          "Exercise3" : {
            "id" : "chess_with_var_09_01",
            "assignment" : "or (forall x : (Anonymous), (~(is_pawn x))) (exists x : (Anonymous), and (is_pawn x) (forall y : (Anonymous), (~(same x y)) -> (~(is_pawn y)) ))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Il y a au plus un pion."
          }
        },
        "Section10" : {
          "id" : "chess_with_var_10",
          "Exercise1" : {
            "id" : "chess_with_var_10_01",
            "assignment" : "exists x : (Anonymous), and (is_pawn x) (forall y : (Anonymous), (is_pawn y) -> (same x y))",
            "type" : "chess"
          },
          "Exercise2" : {
            "id" : "chess_with_var_10_02",
            "assignment" : "exists x : (Anonymous), and (and (is_pawn x) (is_small x)) (forall y : (Anonymous), (is_pawn y) -> (same x y))",
            "type" : "chess"
          },
          "Exercise3" : {
            "id" : "chess_with_var_10_03",
            "assignment" : "exists x : (Anonymous), and (and (is_queen x) (is_large x)) (forall y : (Anonymous), (is_queen y) -> (same x y))",
            "type" : "chess"
          },
          "Exercise4" : {
            "id" : "chess_with_var_10_04",
            "assignment" : "exists x : (Anonymous), and (and (is_queen x) (same x L1)) (forall y : (Anonymous), (is_queen y) -> (same x y))",
            "type" : "chess"
          },
          "Exercise5" : {
            "id" : "chess_with_var_10_05",
            "assignment" : "exists x : (Anonymous), and (and (and (is_king x) (is_small x)) (north_of x L1)) (forall y : (Anonymous), (and (is_king y) (is_small y)) -> (same x y))",
            "type" : "chess"
          },
          "Exercise6" : {
            "id" : "chess_with_var_10_06",
            "assignment" : "exists x : (Anonymous), and (and (and (is_king x) (is_medium x)) (south_of x L1)) (forall y : (Anonymous), (and (is_king y) (is_medium y)) -> (same x y))",
            "type" : "chess"
          },
          "Exercise7" : {
            "id" : "chess_with_var_10_model",
            "assignment" : "formula:chess_with_var_10_01;formula:chess_with_var_10_02;formula:chess_with_var_10_03;formula:chess_with_var_10_04;formula:chess_with_var_10_05;formula:chess_with_var_10_06;",
            "type" : "chess"
          }
        },
        "Section11" : {
          "id" : "chess_with_var_11",
          "Exercise1" : {
            "id" : "chess_with_var_11_01",
            "assignment" : "exists x : (Anonymous), exists y : (Anonymous), and (is_king x) (and (is_king y) (~(same x y)))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Il y a au moins deux rois."
          },
          "Exercise2" : {
            "id" : "chess_with_var_11_03",
            "assignment" : "exists x : (Anonymous), exists y : (Anonymous), (and (is_pawn x) (and (is_pawn y) (and (~(same x y)) (forall z : (Anonymous), (is_pawn z) -> (or (same z x) (same z y))))))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Il y a exactement deux pions."
          },
          "Exercise3" : {
            "id" : "chess_with_var_11_04",
            "assignment" : "exists x : (Anonymous), exists y : (Anonymous), exists z : (Anonymous), and (and (~(same x y)) (and (~(same x z)) (and (~(same y z)) (and (~(is_small x)) (and (~(is_small y)) (~(is_small z))))))) (forall t : (Anonymous), (~(is_small t)) -> (or (same t x) (or (same t y) (same t z))))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Il y a seulement trois pièces qui ne sont pas petites."
          },
          "Exercise4" : {
            "id" : "chess_with_var_11_05",
            "assignment" : "exists x : (Anonymous), and (is_small x) (and (is_queen x) (and (forall y : (Anonymous), (is_queen y) -> (is_small y) -> (same x y)) (forall z : (Anonymous), (~(south_of z x)))))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "La petite reine n’a rien en bas d’elle."
          },
          "Exercise5" : {
            "id" : "chess_with_var_11_06",
            "assignment" : "exists x : (Anonymous), and (and (is_queen x) (exists y : (Anonymous), (south_of y x))) (and (is_large x) (forall t : (Anonymous), (is_queen t) -> (exists y : (Anonymous), (south_of y t)) -> (same x t)))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "La reine qui a quelque chose en bas d’elle est grande."
          },
          "Exercise6" : {
            "id" : "chess_with_var_11_07",
            "assignment" : "exists x : (Anonymous), and (is_large x) (and (is_pawn x) (and (forall y : (Anonymous), (and (is_large y) (is_pawn y)) -> (same x y)) (forall z : (Anonymous), (is_king z) -> (~(north_of z x)))))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Aucun roi n’est en haut du grand pion."
          },
          "Exercise7" : {
            "id" : "chess_with_var_11_10",
            "assignment" : "exists x : (Anonymous), and (and (is_pawn x) (is_medium x)) (forall y : (Anonymous), is_pawn y -> (or (same_size x y) (bigger y x)));exists x : (Anonymous), and (and (is_pawn x) (is_medium x)) (forall y : (Anonymous), is_pawn y -> (or (is_medium y)   (bigger y x)));exists x : (Anonymous), and (and (is_pawn x) (is_medium x)) (forall y : (Anonymous), is_pawn y -> (or (same_size x y) (smaller x y)));exists x : (Anonymous), and (and (is_pawn x) (is_medium x)) (forall y : (Anonymous), is_pawn y -> (or (is_medium y)   (smaller x y)));and (exists x : (Anonymous), and (is_pawn x) (is_medium x)) (forall y : (Anonymous), is_pawn y -> (or (is_medium y)   (is_large y)))",
            "type" : "chess_formalisation",
            "variables" : "chess",
            "comment" : "Le plus petit pion est moyen."
          },
          "Exercise8" : {
            "id" : "chess_with_var_11_model",
            "assignment" : "exercise:chess_with_var_11_01;exercise:chess_with_var_11_03;exercise:chess_with_var_11_04;exercise:chess_with_var_11_05;exercise:chess_with_var_11_06;exercise:chess_with_var_11_07;exercise:chess_with_var_11_10;",
            "type" : "chess"
          }
        },
        "Section12" : {
          "id" : "chess_with_var_12",
          "Exercise1" : {
            "id" : "chess_with_var_12_01",
            "assignment" : "forall x : (Anonymous), or (or (is_pawn x) (is_queen x)) (is_king x)",
            "type" : "chess"
          },
          "Exercise2" : {
            "id" : "chess_with_var_12_02",
            "assignment" : "forall x : (Anonymous), or (or (is_small x) (is_medium x)) (is_large x)",
            "type" : "chess"
          },
          "Exercise3" : {
            "id" : "chess_with_var_12_03",
            "assignment" : "forall x : (Anonymous), forall y : (Anonymous), (bigger x y) -> (is_large x)",
            "type" : "chess"
          },
          "Exercise4" : {
            "id" : "chess_with_var_12_04",
            "assignment" : "forall x : (Anonymous), forall y : (Anonymous), (bigger x y) -> (or (is_large x) (is_small y))",
            "type" : "chess"
          },
          "Exercise5" : {
            "id" : "chess_with_var_12_05",
            "assignment" : "(~(exists x : (Anonymous), exists y : (Anonymous), and (and (bigger x y) (is_small x)) (is_small y)))",
            "type" : "chess"
          },
          "Exercise6" : {
            "id" : "chess_with_var_12_06",
            "assignment" : "forall x : (Anonymous), forall y : (Anonymous), forall z : (Anonymous), (and (north_of x z) (between y x z)) -> (north_of x y)",
            "type" : "chess"
          },
          "Exercise7" : {
            "id" : "chess_with_var_12_model",
            "assignment" : "formula:chess_with_var_12_01;formula:chess_with_var_12_02;formula:chess_with_var_12_03;formula:chess_with_var_12_04;formula:chess_with_var_12_05;formula:chess_with_var_12_06;",
            "type" : "chess"
          }
        },
        "Section13" : {
          "id" : "chess_section_sandbox",
          "Exercise1" : {
            "id" : "chess_predicates",
            "assignment" : "is_pawn L1;is_knight L1;is_bishop L1;is_rook L1;is_queen L1;is_king L1;is_white L1;is_black L1;is_blue L1;is_small L1;is_medium L1;is_large L1;east_of L1 L2;west_of L1 L2;south_of L1 L2;north_of L1 L2;bigger L1 L2;smaller L1 L2;same L1 L2;between L1 L2 L3;",
            "type" : "chess"
          },
          "Exercise2" : {
            "id" : "chess_sandbox",
            "assignment" : "",
            "type" : "chess_formalisation",
            "comment" : ""
          }
        }
      }
    },
    "Chapter" : {
      "id" : "formalisation_programming",
      "icon" : "á",
      "Exercises" : {
        "Section" : {
          "id" : "programming",
          "Exercise" : {
            "id" : "programming_01",
            "type" : "programming"
          }
        }
      }
    }
  },
  "Part5" : {
    "id" : "logic",
    "icon" : "à",
    "Chapter1" : {
      "id" : "logic_connector",
      "icon" : "İ",
      "Tutorial" : {
        "Section1" : {
          "id" : "implication",
          "Exercise1" : {
            "id" : "logic_connector_tuto_imply_01",
            "assignment" : "forall (A B:Prop), no_intro (A -> (B -> A))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "intro_impl_nd",
            "openContext" : "true",
            "nbEnjoyHintKeys" : "20"
          },
          "Exercise2" : {
            "id" : "logic_connector_tuto_imply_02",
            "assignment" : "forall (A B:Prop), no_intro (A -> (A -> B) -> B)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "modus_ponens",
            "openContext" : "true",
            "nbEnjoyHintKeys" : "18"
          },
          "Exercise3" : {
            "id" : "logic_connector_syllogism",
            "assignment" : "forall A B C : Prop, no_intro ((B -> C) -> (A -> B) -> (A -> C))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "withDesc" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          }
        },
        "Section2" : {
          "id" : "conjunction",
          "Exercise1" : {
            "id" : "logic_connector_tuto_conj_01",
            "assignment" : "forall A B:Prop, no_intro (A -> B -> and A B)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "conj",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_connector_tuto_conj_02",
            "assignment" : "forall A B C:Prop, no_intro (A -> B -> C -> and A (and B C)) ",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise3" : {
            "id" : "logic_connector_tuto_conj_03",
            "assignment" : "forall A B C:Prop, no_intro ((and A B) -> C -> A) ",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "elim_conj_left",
            "openContext" : "true"
          },
          "Exercise4" : {
            "id" : "logic_connector_tuto_conj_04",
            "assignment" : "forall A B C:Prop, no_intro ((and A B) -> C -> B) ",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "elim_conj_right",
            "openContext" : "true"
          },
          "Exercise5" : {
            "id" : "logic_connector_tuto_conj_05",
            "assignment" : "forall A B:Prop, no_intro ((and A B) -> (and B A))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          }
        },
        "Section3" : {
          "id" : "disjunction",
          "Exercise1" : {
            "id" : "logic_connector_tuto_disjunction_01",
            "assignment" : "forall A B:Prop, no_intro (A -> (or A B))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "intro_or_left",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_connector_tuto_disjunction_02",
            "assignment" : "forall A B:Prop, no_intro (B -> (or A B))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "intro_or_right",
            "openContext" : "true"
          },
          "Exercise3" : {
            "id" : "logic_connector_tuto_disjunction_03",
            "assignment" : "forall A B C:Prop, no_intro (B -> (or A (or B C)))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise4" : {
            "id" : "logic_connector_tuto_disjunction_04",
            "assignment" : "forall A B:Prop, no_intro ((or A B) -> (A -> B) -> B)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "case_base_nd",
            "openContext" : "true"
          },
          "Exercise5" : {
            "id" : "logic_connector_tuto_disjunction_05",
            "assignment" : "forall A B:Prop, no_intro ((or A B) -> (or B A))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          }
        },
        "Section4" : {
          "id" : "negation",
          "Exercise1" : {
            "id" : "logic_connector_tuto_negation_01",
            "assignment" : "forall (A:Prop), no_intro (False -> ~A)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "elim_negation_nd",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_connector_tuto_negation_02",
            "assignment" : "forall (A:Prop), no_intro (~A -> A -> False)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "intro_false_nd",
            "openContext" : "true"
          },
          "Exercise3" : {
            "id" : "logic_connector_tuto_negation_03",
            "assignment" : "forall (A B:Prop), no_intro (A -> ~(~A))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise4" : {
            "id" : "logic_connector_tuto_negation_04",
            "assignment" : "forall (A:Prop), no_intro (False -> A)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "elim_false_nd",
            "openContext" : "true"
          },
          "Exercise5" : {
            "id" : "logic_connector_tuto_negation_05",
            "assignment" : "forall (A B:Prop), no_intro (~A -> A -> B)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          }
        },
        "Section5" : {
          "id" : "negation_nofalse",
          "Exercise1" : {
            "id" : "logic_connector_tuto_negation_01_nofalse",
            "assignment" : "forall (A B:Prop), no_intro (B -> (A -> (~B)) -> ~A)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "connector_nofalse",
            "axiomMode" : "intro_neg_nofalse",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_connector_tuto_negation_02_nofalse",
            "assignment" : "forall (A B:Prop), no_intro (B -> ((~A)-> (~B))-> A)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "connector_nofalse",
            "axiomMode" : "elim_neg_nofalse",
            "openContext" : "true"
          }
        },
        "Section6" : {
          "id" : "equivalence",
          "Exercise1" : {
            "id" : "logic_connector_tuto_equivalence_01",
            "assignment" : "forall (A B:Prop), no_intro ((and (A -> B) (B -> A)) -> (equiv A B))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "back_elim_equiv_nd",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_connector_tuto_equivalence_02",
            "assignment" : "forall (A B:Prop), no_intro (A -> (equiv A B) -> B)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "elim_left_equiv",
            "openContext" : "true"
          },
          "Exercise3" : {
            "id" : "logic_connector_tuto_equivalence_03",
            "assignment" : "forall (A B:Prop), no_intro (equiv A B -> equiv B A)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "elim_right_equiv",
            "openContext" : "true"
          }
        },
        "Section7" : {
          "id" : "classical",
          "Exercise1" : {
            "id" : "logic_connector_tuto_classical_01",
            "assignment" : "forall (A:Prop), (or A (~A))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "case_base_binary_nd",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_connector_tuto_classical_02",
            "assignment" : "forall (A B:Prop), no_intro ((~A -> B) -> or A B)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise3" : {
            "id" : "logic_connector_tuto_classical_03",
            "assignment" : "forall (A B:Prop), no_intro ((~(~A)) -> A)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "axiomMode" : "adabsurdum_nd",
            "openContext" : "true"
          },
          "Exercise4" : {
            "id" : "logic_connector_tuto_classical_04",
            "assignment" : "forall (A B:Prop), no_intro ((~A -> B) -> ~B -> A)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withSlide" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          }
        }
      },
      "Exercises" : {
        "Section1" : {
          "id" : "logic_connector_training",
          "Exercise1" : {
            "id" : "logic_connector_training_01",
            "assignment" : "forall (A B C:Prop), no_intro ((and A B) -> C -> A)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "express" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_connector_training_02",
            "assignment" : "forall (P Q R:Prop), no_intro ((and P Q) -> R -> (and Q R))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "express" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          }
        },
        "Section2" : {
          "id" : "logic_connector_constructivism",
          "Exercise1" : {
            "id" : "logic_connector_constructivism_01",
            "assignment" : "forall (A B:Prop), no_intro (A -> and A (or A B))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "express" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_connector_constructivism_02",
            "assignment" : "forall (P Q R:Prop), no_intro ((or P (and Q R)) -> (or P Q))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "express" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise3" : {
            "id" : "logic_connector_constructivism_03",
            "assignment" : "forall (A B:Prop), no_intro ((or A B) -> (A->B) -> B)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "express" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise4" : {
            "id" : "logic_connector_constructivism_04",
            "assignment" : "forall (A B C:Prop), no_intro ((A -> B -> C) -> (A -> B) -> A -> C)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "express" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise5" : {
            "id" : "logic_connector_constructivism_05",
            "assignment" : "forall (P Q R:Prop), no_intro ((P -> Q -> R) -> ((and P Q) -> R))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "express" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise6" : {
            "id" : "logic_connector_constructivism_06",
            "assignment" : "forall (A B C:Prop), no_intro ((A->B) -> (A->C) -> (A -> (and B C)))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "express" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise7" : {
            "id" : "logic_connector_constructivism_07",
            "assignment" : "forall (A B C:Prop), no_intro ((A->B) -> (or A C) -> (or B C))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "express" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise8" : {
            "id" : "logic_connector_constructivism_08",
            "assignment" : "forall (A B:Prop), no_intro ((or (and A B) (or A B)) -> (or A B))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "express" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise9" : {
            "id" : "logic_connector_constructivism_09",
            "assignment" : "forall (A B C:Prop), no_intro ((and (A->C) (B->C)) -> (or A B) -> C)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "sci" : "true",
            "express" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise10" : {
            "id" : "logic_connector_constructivism_10",
            "assignment" : "forall (A B:Prop), no_intro ((or (~A) B) -> (A->B))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "sci" : "true",
            "express" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise11" : {
            "id" : "logic_connector_constructivism_11",
            "assignment" : "forall (A B C:Prop), no_intro ((A -> B -> C) -> (and A B) -> (C))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "express" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise12" : {
            "id" : "logic_connector_constructivism_12",
            "assignment" : "forall (P Q R:Prop), P -> (P -> Q) -> ((P -> Q) -> (Q -> R)) -> R",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise13" : {
            "id" : "logic_connector_constructivism_13",
            "assignment" : "forall (A B C : Prop), equiv ((and A B) -> C) (A -> B -> C)",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise14" : {
            "id" : "logic_connector_constructivism_14",
            "assignment" : "forall (A B C:Prop), equiv ((or A B) -> C) (and (A -> C) (B -> C))",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          }
        },
        "Section3" : {
          "id" : "logic_connector_associativity",
          "Exercise1" : {
            "id" : "logic_connector_associativity_conjunction",
            "assignment" : "forall (A B C:Prop), equiv (and A (and B C)) (and (and A B) C)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "withDesc" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_connector_associativity_disjunction",
            "assignment" : "forall (A B C:Prop), equiv (or A (or B C)) (or (or A B) C)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "sci" : "true",
            "withDesc" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          }
        },
        "Section4" : {
          "id" : "logic_connector_reasoning",
          "Exercise1" : {
            "id" : "logic_connector_contraposition_1_2",
            "assignment" : "forall (A B:Prop), no_intro ((~B -> ~A) -> (A -> B))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "withDesc" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "logic_connector_contraposition_2_2",
            "assignment" : "forall (A B:Prop), no_intro ((A -> B) -> (~B -> ~A))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "withDesc" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true",
            "toolboxLemma" : "true"
          }
        },
        "Section5" : {
          "id" : "logic_connector_negation",
          "Exercise1" : {
            "id" : "logic_connector_negation_000",
            "assignment" : "forall (P Q R:Prop), no_intro (P -> (R -> (~Q)) -> (P -> Q) -> (~R))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_connector_negation_00",
            "assignment" : "forall P Q:Prop, no_intro ((and (P -> Q) (P -> (~Q))) -> (~P))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise3" : {
            "id" : "logic_connector_negation_01",
            "assignment" : "forall P Q:Prop, no_intro ((~(~P)) -> (~(and P Q)) -> (and P (~Q)))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise4" : {
            "id" : "logic_connector_negation_02",
            "assignment" : "forall (A B:Prop), no_intro (and (or A (~ B)) B -> A)",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise5" : {
            "id" : "logic_connector_negation_03",
            "assignment" : "forall (A B:Prop), (equiv A (or (and A (~ B)) (and A B)))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise6" : {
            "id" : "logic_connector_negation_04",
            "assignment" : "forall (A B:Prop), equiv (and A B) (~(or (~A) (~B)))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise7" : {
            "id" : "logic_connector_negation_05",
            "assignment" : "forall (A B:Prop), equiv (and A B) (~(A -> (~B)))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise8" : {
            "id" : "logic_connector_negation_06",
            "assignment" : "forall (A B:Prop), equiv (or A B) (~(and (~A) (~B)))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise9" : {
            "id" : "logic_connector_negation_07",
            "assignment" : "forall (A B:Prop), equiv (or A B) ((~A) -> B)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercis10" : {
            "id" : "logic_connector_negation_08",
            "assignment" : "forall (P Q:Prop), no_intro ((or (~P) Q) -> (no_intro (P -> Q)))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          }
        },
        "Section6" : {
          "id" : "logic_connector_classical",
          "Exercise1" : {
            "id" : "logic_connector_classical_000",
            "assignment" : "forall (A:Prop), equiv A (~(~A))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "elim_double_neg"
          },
          "Exercise2" : {
            "id" : "logic_connector_classical_00",
            "assignment" : "forall (P Q:Prop),  no_intro ((P -> Q) -> (or (~P) Q))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise3" : {
            "id" : "logic_connector_classical_01",
            "assignment" : "forall (A B:Prop), equiv (~A) (~B) -> equiv A B",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "elim_intro_neg_equiv"
          },
          "Exercise4" : {
            "id" : "logic_connector_classical_02",
            "assignment" : "forall (A B:Prop), no_intro ((and (A->B) ((~A)->B)) -> B)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise5" : {
            "id" : "logic_connector_classical_03",
            "assignment" : "forall (P Q:Prop), no_intro ((Q -> (~P)) -> ((~Q) -> P) -> (P->(and P Q)) -> ((~P) -> (~(and P Q))) -> and (~P) Q)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise6" : {
            "id" : "logic_connector_classical_04",
            "assignment" : "forall (P Q:Prop), ((~P) -> Q) -> (P -> (~Q)) -> ((~Q) -> (Q->P)) -> (Q -> (~(Q->P))) -> no_intro (or (and P (~Q)) (and (~P) Q))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise7" : {
            "id" : "logic_connector_classical_05",
            "assignment" : "forall A B : Prop, equiv (A -> B) (or (~A) B)",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise8" : {
            "id" : "logic_connector_classical_06",
            "assignment" : "forall (A B C:Prop), ((A -> B -> C) -> C) -> ((((A -> C) -> C) -> (((B -> C) -> C) -> C)) -> C)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise9" : {
            "id" : "logic_connector_classical_07",
            "assignment" : "forall (A B:Prop), equiv (or A B) ((A -> B) -> B)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "comment" : "src: Intro Logique 1.7.12",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise10" : {
            "id" : "logic_connector_classical_08",
            "assignment" : "forall (A B:Prop), or (A -> B) (B -> A)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "src: Intro Logique 1.7.11",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise11" : {
            "id" : "logic_connector_classical_09",
            "assignment" : "forall (A B:Prop), equiv (equiv A B) ((or A B) -> (and A B))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "src: Intro Logique 1.7.14",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise12" : {
            "id" : "logic_connector_classical_10",
            "assignment" : "forall (P Q R:Prop), no_intro ((or P (or Q R)) -> ((~P) -> (~Q)) -> (P -> R) -> R)",
            "extraHdb" : "connectbck connectfor",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise13" : {
            "id" : "logic_connector_classical_11",
            "assignment" : "forall (P Q R S:Prop), P -> (P -> R) -> (equiv Q S) -> (equiv R Q) -> S",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          }
        },
        "Section7" : {
          "id" : "logic_connector_distributivity",
          "Exercise1" : {
            "id" : "logic_connector_distributivity_and_imply_left_0",
            "assignment" : "forall (P Q R:Prop), no_intro ((and P (Q->R)) -> ((and P Q) -> (and P R)))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "withDesc" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_connector_distributivity_and_or_left",
            "assignment" : "forall (P Q R:Prop), equiv (and P (or Q R)) (or (and P Q) (and P R))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "sci" : "true",
            "withDesc" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise3" : {
            "id" : "logic_connector_distributivity_or_and_left",
            "assignment" : "forall (P Q R:Prop), equiv (or P (and Q R)) (and (or P Q) (or P R))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "sci" : "true",
            "withDesc" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise4" : {
            "id" : "logic_connector_distributivity_or_imply_left",
            "assignment" : "forall (P Q R:Prop), (equiv (or P (Q->R)) ((or P Q) -> (or P R)))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "sci" : "true",
            "withDesc" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise5" : {
            "id" : "logic_connector_distributivity_imply_and_left",
            "assignment" : "forall (A B C:Prop), equiv (A -> (and B C)) (and (A -> B) (A -> C))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "comment" : "src: Intro Logique 1.7.05",
            "sci" : "true",
            "withDesc" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise6" : {
            "id" : "logic_connector_distributivity_imply_or_left",
            "assignment" : "forall (A B C:Prop), equiv (A -> (or B C)) (or (A -> B) (A -> C))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "comment" : "src: Intro Logique 1.7.07",
            "sci" : "true",
            "withDesc" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise7" : {
            "id" : "logic_connector_distributivity_imply_imply_left",
            "assignment" : "forall (A B C:Prop), equiv (A -> (B -> C)) ((A -> B) -> (A -> C))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "withDesc" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          }
        },
        "Section8" : {
          "id" : "logic_connector_relation",
          "Exercise1" : {
            "id" : "logic_connector_relation_imply_or_right_and_imply",
            "assignment" : "forall (A B C:Prop), equiv ((or A B) -> C) (and (A -> C) (B -> C))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "comment" : "src: Intro Logique 1.7.06",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_connector_relation_imply_and_right_or_imply",
            "assignment" : "forall (A B C:Prop), equiv ((and A B) -> C) (or (A -> C) (B -> C))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "comment" : "src: Intro Logique 1.7.08",
            "sci" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true"
          }
        },
        "Section9" : {
          "id" : "logic_connector_deMorgan_laws",
          "Exercise1" : {
            "id" : "logic_connector_deMorgan_not_or_equiv_and_not",
            "assignment" : "forall (A B:Prop), equiv (~ (or A B)) (and (~ A) (~ B))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "sci" : "true",
            "withDesc" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "logic_connector_deMorgan_or_not_imply_not_and",
            "assignment" : "forall (A B:Prop), no_intro ((or (~A) (~B)) -> (~ (and A B)))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "sci" : "true",
            "withDesc" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "logic_connector_deMorgan_not_and_imply_or_not",
            "assignment" : "forall (A B:Prop), no_intro ((~ (and A B)) -> (or (~A) (~B)))",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "sci" : "true",
            "withDesc" : "true",
            "toolboxChapter" : "connector",
            "openContext" : "true",
            "toolboxLemma" : "true"
          }
        },
        "Section10" : {
          "id" : "abs_cb_peirce",
          "Exercise1" : {
            "id" : "logic_connector_acp_abs_by_cb",
            "assignment" : "forall A:Prop, no_intro ((~A -> False) -> A)",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "withDesc" : "true",
            "lockAxioms" : "adabsurdum_nd",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_connector_acp_cb_by_abs",
            "assignment" : "forall A:Prop, or A (~A)",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "sci" : "true",
            "withDesc" : "true",
            "lockAxioms" : "case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise3" : {
            "id" : "logic_connector_acp_peirce_by_cb",
            "assignment" : "forall (A B :Prop), no_intro (((A -> B) -> A) -> A)",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "sci" : "true",
            "withDesc" : "true",
            "lockAxioms" : "adabsurdum_nd",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "logic_connector_acp_cb_by_peirce",
            "assignment" : "forall A:Prop, or A (~A)",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "sci" : "true",
            "withDesc" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true",
            "nbEnjoyHintKeys" : "10"
          },
          "Exercise5" : {
            "id" : "logic_connector_acp_abs_by_peirce",
            "assignment" : "forall (A :Prop), no_intro ((~A -> False) -> A)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "sci" : "true",
            "withDesc" : "true",
            "lockAxioms" : "adabsurdum_nd; case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          },
          "Exercise6" : {
            "id" : "logic_connector_acp_peirce_by_abs",
            "assignment" : "forall (A B:Prop), no_intro (((A -> B) -> A) -> A)",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "sci" : "true",
            "withDesc" : "true",
            "lockAxioms" : "case_base_binary_nd; direct_case_base_binary",
            "toolboxChapter" : "connector",
            "noLemma" : "true",
            "openContext" : "true"
          }
        }
      }
    },
    "Chapter2" : {
      "id" : "logic_quantifier",
      "icon" : "ĝ",
      "Tutorial" : {
        "Section1" : {
          "id" : "universal",
          "Exercise1" : {
            "id" : "logic_quantifier_tuto_01",
            "assignment" : "forall (A B:O1SetProp), no_intro (forall (x:O1U), app_prop A x -> (or (app_prop A x) (app_prop B x)))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "quantifier",
            "axiomMode" : "intro_forall",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_tuto_03",
            "assignment" : "forall (A B:O1SetProp), and (forall (x:O1U), app_prop A x) (forall (x:O1U), app_prop B x) -> no_intro (forall (x:O1U), and (app_prop A x) (app_prop B x))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "quantifier",
            "axiomMode" : "apply_forall",
            "openContext" : "true",
            "nbEnjoyHintKeys" : "21"
          },
          "Exercise3" : {
            "id" : "logic_quantifier_tuto_04",
            "assignment" : "forall (P : O1SetProp), forall (a : O1Cst), no_intro ((forall (x : O1U), app_prop P x) -> (app_prop P a))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          },
          "Exercise4" : {
            "id" : "logic_quantifier_tuto_05",
            "assignment" : "forall (P Q: O1SetProp), no_intro ((forall (x : O1U), (and (app_prop P x) (app_prop Q x))) -> (forall (y : O1U), (and (app_prop Q y) (app_prop P y))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          }
        },
        "Section2" : {
          "id" : "existential",
          "Exercise1" : {
            "id" : "logic_quantifier_tuto_00",
            "assignment" : "forall (A B:O1SetProp) (y:O1U) , app_prop A y -> (exists (x:O1U), (or (app_prop A x) (app_prop B x)))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "quantifier",
            "axiomMode" : "ex_intro",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_tuto_02",
            "assignment" : "forall (A B:O1SetProp), (exists (x:O1U), or (app_prop A x) (app_prop B x)) -> or (exists (y:O1U), app_prop A y)  (exists (z:O1U), app_prop B z)",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "quantifier",
            "axiomMode" : "ex_elim",
            "openContext" : "true"
          },
          "Exercise3" : {
            "id" : "logic_quantifier_tuto_06",
            "assignment" : "forall (P : O1SetProp), forall (a : O1Cst), no_intro ((app_prop P a) -> (exists (x : O1U), app_prop P x))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          },
          "Exercise4" : {
            "id" : "logic_quantifier_tuto_08",
            "assignment" : "forall (P Q: O1SetProp), no_intro ((exists (x : O1U), (and (app_prop P x) (app_prop Q x))) -> (exists (y : O1U), (app_prop P y)))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          }
        }
      },
      "Exercises" : {
        "Section1" : {
          "id" : "existence",
          "Exercise1" : {
            "id" : "logic_quantifier_existence_01",
            "assignment" : "forall (F1 F2:O1SetProp), (forall (x:O1U),(app_prop F1 x) -> (app_prop F2 x)) -> (exists (x:O1U), (app_prop F1 x)) -> (exists (x:O1U),(app_prop F2 x))",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "express" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true",
            "nbEnjoyHintKeys" : "17"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_existence_02",
            "assignment" : "forall (P:O1SetProp), (forall (x:O1U), app_prop P x) -> (exists y:O1U, app_prop P y)",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "withDesc" : "true",
            "express" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          },
          "Exercise3" : {
            "id" : "logic_quantifier_existence_03",
            "assignment" : "forall (P Q: O1SetProp), no_intro ((exists (x : O1U), (and (app_prop P x) (app_prop Q x))) -> (exists (y : O1U), (and (app_prop Q y) (app_prop P y))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          }
        },
        "Section2" : {
          "id" : "syllogism",
          "Exercise1" : {
            "id" : "logic_quantifier_syllogism_00",
            "assignment" : "forall (a : O1Cst) (P Q : O1SetProp), no_intro ((forall (x : O1U), (app_prop P x) -> (app_prop Q x)) -> (app_prop P a) -> (app_prop Q a))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "express" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_syllogism_01",
            "assignment" : "forall (P Q R:O1SetProp), (forall (x:O1U), app_prop P x  -> app_prop Q x ) -> (forall (x:O1U), app_prop Q x -> app_prop R x) -> no_intro (forall (x:O1U), app_prop P x -> app_prop R x)",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "express" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          },
          "Exercise3" : {
            "id" : "logic_quantifier_syllogism_02",
            "assignment" : "forall (P Q R:O1SetProp), (exists (x:O1U), app_prop P x -> app_prop Q x) -> (forall (x:O1U), app_prop Q x -> app_prop R x) -> no_intro (exists (x:O1U), app_prop P x -> app_prop R x)",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "express" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          },
          "Exercise4" : {
            "id" : "logic_quantifier_syllogism_03",
            "assignment" : "forall (P Q R:O1SetProp), (forall (x:O1U), app_prop P x -> app_prop Q x) -> (exists (x:O1U), app_prop Q x -> app_prop R x) -> no_intro (exists (x:O1U), app_prop P x -> app_prop R x)",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          }
        },
        "Section3" : {
          "id" : "equivalence",
          "Exercise1" : {
            "id" : "quantifier_equivalence_forall_and",
            "assignment" : "(forall (F G : O1SetProp), (forall (a : O1Cst), no_intro ((equiv ((and ((forall (x : O1U), (app_prop ((F)) ((x))))) ((app_prop ((G)) ((a)))))) ((forall (x : O1U), (and ((app_prop ((F)) ((x)))) ((app_prop ((G)) ((a)))))))))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "quantifier"
          },
          "Exercise2" : {
            "id" : "quantifier_equivalence_forall_or",
            "assignment" : "(forall (F G : O1SetProp), (forall (a : O1Cst), no_intro ((equiv ((or ((forall (x : O1U), (app_prop ((F)) ((x))))) ((app_prop ((G)) ((a)))))) ((forall (x : O1U), (or ((app_prop ((F)) ((x)))) ((app_prop ((G)) ((a)))))))))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "quantifier"
          },
          "Exercise3" : {
            "id" : "quantifier_equivalence_exists_and",
            "assignment" : "(forall (F G : O1SetProp), (forall (a : O1Cst), no_intro ((equiv ((and ((exists (x : O1U), (app_prop ((F)) ((x))))) ((app_prop ((G)) ((a)))))) ((exists (x : O1U), (and ((app_prop ((F)) ((x)))) ((app_prop ((G)) ((a)))))))))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "quantifier"
          },
          "Exercise4" : {
            "id" : "quantifier_equivalence_exists_or",
            "assignment" : "(forall (F G : O1SetProp), (forall (a : O1Cst), no_intro ((equiv ((or ((exists (x : O1U), (app_prop ((F)) ((x))))) ((app_prop ((G)) ((a)))))) ((exists (x : O1U), (or ((app_prop ((F)) ((x)))) ((app_prop ((G)) ((a)))))))))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "quantifier"
          },
          "Exercise5" : {
            "id" : "quantifier_equivalence_forall_exists_imply",
            "assignment" : "(forall (F G : O1SetProp), (forall (a : O1Cst), no_intro ((equiv ((((forall (x : O1U), (app_prop ((F)) ((x))))) -> ((app_prop ((G)) ((a)))))) ((exists (x : O1U), (((app_prop ((F)) ((x)))) -> ((app_prop ((G)) ((a)))))))))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "quantifier"
          },
          "Exercise6" : {
            "id" : "quantifier_equivalence_exists_forall_imply",
            "assignment" : "(forall (F G : O1SetProp), (forall (a : O1Cst), no_intro ((equiv ((((exists (x : O1U), (app_prop ((F)) ((x))))) -> ((app_prop ((G)) ((a)))))) ((forall (x : O1U), (((app_prop ((F)) ((x)))) -> ((app_prop ((G)) ((a)))))))))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "quantifier"
          },
          "Exercise7" : {
            "id" : "quantifier_equivalence_forall_forall_imply",
            "assignment" : "(forall (F G : O1SetProp), (forall (a : O1Cst), no_intro ((equiv ((((app_prop ((G)) ((a)))) -> ((forall (x : O1U), (app_prop ((F)) ((x))))))) ((forall (x : O1U), (((app_prop ((G)) ((a)))) -> ((app_prop ((F)) ((x)))))))))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "quantifier"
          },
          "Exercise8" : {
            "id" : "quantifier_equivalence_exists_exists_imply",
            "assignment" : "(forall (F G : O1SetProp), (forall (a : O1Cst), no_intro ((equiv ((((app_prop ((G)) ((a)))) -> ((exists (x : O1U), (app_prop ((F)) ((x))))))) ((exists (x : O1U), (((app_prop ((G)) ((a)))) -> ((app_prop ((F)) ((x)))))))))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "quantifier"
          }
        },
        "Section4" : {
          "id" : "expansion",
          "Exercise1" : {
            "id" : "logic_quantifier_expansion_01",
            "assignment" : "forall (A B:O1SetProp), (forall (x:O1U), and (app_prop A x) (app_prop B x)) -> (and (forall (x:O1U), app_prop A x) (forall (x:O1U), app_prop B x))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "sci" : "true",
            "withDesc" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_expansion_02",
            "assignment" : "forall (A B:O1SetProp), (or (exists (y:O1U), app_prop A y)  (exists (z:O1U), app_prop B z)) -> no_intro (exists (x:O1U), or (app_prop A x) (app_prop B x))",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "withDesc" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          },
          "Exercise3" : {
            "id" : "logic_quantifier_expansion_03",
            "assignment" : "forall (F1 F2:O1SetProp), (exists (x:O1U), and (app_prop F1 x) (app_prop F2 x)) -> no_intro (and (exists (x:O1U), app_prop F1 x) (exists (x:O1U),app_prop F2 x))",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          },
          "Exercise4" : {
            "id" : "logic_quantifier_expansion_04",
            "assignment" : "forall (F1 F2:O1SetProp), (or (forall (x:O1U), (app_prop F1 x)) (forall (x:O1U), (app_prop F2 x))) -> no_intro (forall (x:O1U), or (app_prop F1 x) (app_prop F2 x))",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          }
        },
        "Section5" : {
          "id" : "commutativity",
          "Exercise1" : {
            "id" : "logic_quantifier_commutativity_00",
            "assignment" : "forall (P : O1SetProp2), no_intro ((forall (x y : O1U), (app_prop2 P x y)) -> (forall (x y : O1U), (app_prop2 P y x)))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_commutativity_01",
            "assignment" : "forall (P:O1SetProp2), (exists (x:O1U), (exists (y:O1U), app_prop2 P x y)) -> no_intro (exists (y:O1U), (exists (x:O1U), app_prop2 P x y))",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          },
          "Exercise3" : {
            "id" : "logic_quantifier_commutativity_02",
            "assignment" : "forall (P:O1SetProp2), (exists (x:O1U), (forall (y:O1U), app_prop2 P x y)) -> no_intro (forall (y:O1U), (exists (x:O1U), app_prop2 P x y))",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          }
        },
        "Section6" : {
          "id" : "demorgan",
          "Exercise1" : {
            "id" : "logic_quantifier_demorgan_01",
            "assignment" : "forall (F:O1SetProp), equiv (~ (exists (x:O1U), app_prop F x)) (forall (x:O1U), ~ (app_prop F x))",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "withDesc" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_demorgan_02",
            "assignment" : "forall (F:O1SetProp), no_intro (equiv (exists (x:O1U), ~ (app_prop F x)) (~ (forall (x:O1U), app_prop F x)))",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "withDesc" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "logic_quantifier_demorgan_03",
            "assignment" : "forall (F:O1SetProp), equiv (forall (x:O1U), app_prop F x)  (~(exists (x:O1U),(~(app_prop F x))))",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "withDesc" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "logic_quantifier_demorgan_04",
            "assignment" : "forall (F:O1SetProp), no_intro (equiv (exists (x:O1U), app_prop F x) (~(forall (x:O1U),(~(app_prop F x)))))",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "withDesc" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true",
            "toolboxLemma" : "true"
          },
          "Exercise" : {
            "id" : "logic_quantifier_demorgan_05",
            "assignment" : "forall (P : O1SetProp), no_intro (equiv (~(exists (x:O1U), (~(app_prop P x)))) (forall (x:O1U), (app_prop P x)))",
            "idMapping" : "true",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "sci" : "true",
            "toolboxChapter" : "quantifier",
            "openContext" : "true",
            "toolboxLemma" : "true"
          }
        },
        "Section7" : {
          "id" : "misc",
          "Exercise1" : {
            "id" : "quantifier_018",
            "assignment" : "forall (P Q : O1SetProp), no_intro ((forall (x : O1U), (and (app_prop P x) (app_prop Q x))) -> (forall (x : O1U), (app_prop P x)))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise2" : {
            "id" : "quantifier_020",
            "assignment" : "forall (P : Prop) (Q : O1SetProp), no_intro (equiv (forall (x : O1U), (or P (app_prop Q x))) (or P (forall (x : O1U), (app_prop Q x))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise3" : {
            "id" : "quantifier_019",
            "assignment" : "forall (P Q : O1SetProp), no_intro ((exists (x : O1U), and (app_prop P x) (app_prop Q x)) -> (exists (x : O1U), app_prop P x))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise4" : {
            "id" : "quantifier_001",
            "assignment" : "forall (F : O1SetProp), no_intro (((and (exists (y : O1U), forall (x : O1U), (equiv ((app_prop ((F)) ((x)))) ((app_prop ((F)) ((y)))))) (exists (x : O1U), (app_prop ((F)) ((x))))) -> forall (x : O1U), (app_prop ((F)) ((x)))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise5" : {
            "id" : "quantifier_002",
            "assignment" : "(forall (F G : O1SetProp), no_intro (((forall (x : O1U), (and ((app_prop ((F)) ((x)))) ((or ((~((exists (y : O1U), (app_prop ((F)) ((y))))))) ((forall (y : O1U), (app_prop ((G)) ((y))))))))) -> (forall (x : O1U), (or ((app_prop ((F)) ((x)))) ((app_prop ((G)) ((x)))))))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise6" : {
            "id" : "quantifier_003",
            "assignment" : "forall (F : O1SetProp), no_intro (forall (x : O1U), ((forall (y : O1U), ((app_prop ((F)) ((y)))) -> (app_prop ((F)) ((x)))) -> ((exists (y : O1U), (app_prop ((F)) ((y)))) -> (app_prop ((F)) ((x))))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise7" : {
            "id" : "quantifier_004",
            "assignment" : "forall (F G : O1SetProp), no_intro ((forall (y : O1U), (((and ((app_prop ((F)) ((y)))) ((forall (z : O1U), (app_prop ((G)) ((z))))))) -> (exists (x : O1U), (and ((app_prop ((F)) ((x)))) ((app_prop ((G)) ((x)))))))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise8" : {
            "id" : "quantifier_005",
            "assignment" : "(forall (P : Prop), (forall (F G : O1SetProp), no_intro ((forall (x : O1U), (forall (y : O1U), ((and (((app_prop F x) -> (P))) ((and (forall (z : O1U), (app_prop ((F)) ((z)))) ((app_prop ((G)) ((x))))))) -> (P)))))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise9" : {
            "id" : "quantifier_006",
            "assignment" : "(forall (R : O1SetProp2), (forall (a : O1Cst), no_intro (((forall (x : O1U), (equiv ((app_prop2 ((R)) ((x)) ((a)))) ((exists (y : O1U), (app_prop2 ((R)) ((y)) ((x))))))) -> (exists (x : O1U), (equiv ((app_prop2 ((R)) ((x)) ((x)))) ((exists (y : O1U), (app_prop2 ((R)) ((y)) ((x)))))))))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise10" : {
            "id" : "quantifier_009",
            "assignment" : "(forall (R : O1SetProp2), no_intro (((forall (z : O1U), (exists (y : O1U), (forall (x : O1U), (and ((equiv ((app_prop2 ((R)) ((x)) ((y)))) ((app_prop2 ((R)) ((x)) ((z)))))) ((~((app_prop2 ((R)) ((x)) ((x)))))))))) -> (~((exists (z : O1U), (forall (x : O1U), (app_prop2 ((R)) ((x)) ((z))))))))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise11" : {
            "id" : "quantifier_010",
            "assignment" : "(forall (R : O1SetProp2), no_intro ((~((exists (y : O1U), (forall (x : O1U), (equiv ((app_prop2 ((R)) ((x)) ((y)))) ((~((app_prop2 ((R)) ((x)) ((x)))))))))))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise12" : {
            "id" : "quantifier_013",
            "assignment" : "forall (a : O1Cst), forall (P Q : O1SetProp), app_prop P a -> app_prop Q a -> no_intro (exists (x : O1U), and (app_prop P x) (app_prop Q x))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise13" : {
            "id" : "quantifier_014",
            "assignment" : "forall (b : O1Cst), forall (P Q : O1SetProp), app_prop P b -> no_intro (exists (x : O1U), or (app_prop P x) (app_prop Q x))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise14" : {
            "id" : "quantifier_015",
            "assignment" : "forall (P : O1SetProp), no_intro (~(exists (x : O1U), and (app_prop P x) (~(app_prop P x))))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise15" : {
            "id" : "quantifier_016",
            "assignment" : "forall (a : O1Cst), forall (R Q : O1SetProp), (~(exists (x : O1U), and (app_prop R x) (~(app_prop Q x)))) -> no_intro ((app_prop R a) -> (app_prop Q a))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          },
          "Exercise16" : {
            "id" : "quantifier_017",
            "assignment" : "forall (a : O1Cst), forall (P Q : O1SetProp), ((exists (x : O1U), or (app_prop P x) ((app_prop Q x)))) -> no_intro ((forall (x : O1U), (~(app_prop Q x))) -> (exists (x : O1U), app_prop P x))",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "quantifier"
          }
        },
        "Section8" : {
          "id" : "good_bad",
          "Exercise1" : {
            "id" : "good_bad_01",
            "assignment" : "forall a, or (is_good a) (is_bad a)",
            "type" : "formalisation",
            "variables" : "truthlie",
            "comment" : "Les habitants sont soit des purs, soit des pires.",
            "withDesc" : "true",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "good_bad_02",
            "assignment" : "forall P a, (is_good a) -> (say a P) -> P",
            "type" : "formalisation",
            "variables" : "truthlie",
            "comment" : "Les purs disent toujours la vérité.",
            "withDesc" : "true",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "good_bad_03",
            "assignment" : "forall P a, (is_bad a) -> (say a P) -> (~ P)",
            "type" : "formalisation",
            "variables" : "truthlie",
            "comment" : "Les pires mentent toujours.",
            "withDesc" : "true",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "logic_good_bad_01",
            "assignment" : "forall a b:gbmember, say a (is_bad b) -> or (is_bad a) (is_bad b)",
            "extraHdb" : "gbdiag gbfordiag",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "withDesc" : "true",
            "openContext" : "true",
            "nbEnjoyHintKeys" : "10"
          },
          "Exercise5" : {
            "id" : "logic_good_bad_02",
            "assignment" : "forall a b:gbmember, say a (and (is_bad a) (is_bad b)) -> is_bad a",
            "extraHdb" : "gbdiag gbfordiag",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "withDesc" : "true",
            "openContext" : "true"
          },
          "Exercise6" : {
            "id" : "logic_good_bad_03",
            "assignment" : "forall a:gbmember, say a False -> is_bad a",
            "extraHdb" : "gbdiag gbfordiag",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "withDesc" : "true",
            "openContext" : "true"
          },
          "Exercise7" : {
            "id" : "logic_good_bad_04",
            "assignment" : "forall a:gbmember, say a (is_bad a) -> False",
            "extraHdb" : "gbdiag gbfordiag",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "withDesc" : "true",
            "toolboxChapter" : "quantifier_truthlie",
            "openContext" : "true"
          }
        },
        "Section9" : {
          "id" : "enigma",
          "Exercise1" : {
            "id" : "logic_enigma_scottish",
            "assignment" : "ScottishUtterance",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "Scottish club",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          },
          "Exercise2" : {
            "id" : "logic_enigma_rich",
            "extraHdb" : "connectbck connectfor",
            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "logicMode" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "quantifier",
            "openContext" : "true"
          }
        }
      }
    }
  },
  "Part6" : {
    "id" : "settheory",
    "icon" : "ĥ",
    "Chapter1" : {
      "id" : "set_tuto",
      "icon" : "á",
      "Tutorial" : {
        "Section1" : {
          "id" : "sinter",
          "Exercise1" : {
            "id" : "setops_tuto_02",
            "assignment" : "forall (A B C:O1ExSet) (x:O1U), (sis_element x A) -> (sis_element x B) -> (sis_element x C)-> (sis_element x (sinter A (sinter B C)))",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "lockAxioms" : "menu_axioms",
            "axiomMode" : "elim_sinter",
            "nbEnjoyHintKeys" : "21"
          },
          "Exercise2" : {
            "id" : "logic_settheory_tuto_01",
            "assignment" : "forall (A B:O1ExSet) (x:O1U), (sis_element x (sinter A B)) -> (sis_element x (sinter B A))",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "withDesc" : "true",
            "lockAxioms" : "menu_axioms;setcommutative",
            "toolboxChapter" : "set_operation",
            "nbEnjoyHintKeys" : "14"
          }
        },
        "Section2" : {
          "id" : "sinclusion",
          "Exercise1" : {
            "id" : "logic_settheory_tuto_05",
            "assignment" : "forall (A B:O1ExSet), set_lteq (sdiff A B) A",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "inclusion",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "axiomMode" : "elim_set_lteq",
            "nbEnjoyHintKeys" : "16"
          },
          "Exercise2" : {
            "id" : "setops_tuto_18",
            "assignment" : "forall (A B:O1ExSet), (set_lteq A B) -> (set_lteq A (sinter A B))",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "inclusion",
            "withDesc" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "nbEnjoyHintKeys" : "21"
          }
        },
        "Section3" : {
          "id" : "set_connectquants",
          "Exercise1" : {
            "id" : "setlogic_tuto_1",
            "assignment" : "forall (A B:O1ExSet), no_intro (forall (x:O1U), (or (sis_element x A) (sis_element x B)) -> ((sis_element x A)->(sis_element x B)) -> (sis_element x B))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "withDesc" : "true",
            "toolboxChapter" : "connector_order2",
            "nbEnjoyHintKeys" : "21"
          },
          "Exercise2" : {
            "id" : "set_tuto_move",
            "withDemonstrate" : "true",
            "withDesc" : "true",
            "nbEnjoyHintKeys" : "22"
          }
        },
        "Section4" : {
          "id" : "reasonings",
          "Exercise1" : {
            "id" : "setlogic_tuto_12",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "axiomMode" : "demorgan",
            "nbEnjoyHintKeys" : "20"
          },
          "Exercise2" : {
            "id" : "setlogic_tuto_5",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "connector_order2",
            "axiomMode" : "intro_false",
            "nbEnjoyHintKeys" : "16"
          }
        },
        "Section5" : {
          "id" : "advanced",
          "Exercise1" : {
            "id" : "set_rewops_tuto_01",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite",
            "axiomMode" : "setcommutative",
            "nbEnjoyHintKeys" : "12"
          },
          "Exercise2" : {
            "id" : "tuto_rew2_3",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2",
            "axiomMode" : "rewriting",
            "nbEnjoyHintKeys" : "7"
          }
        },
        "Section6" : {
          "id" : "set_lemmas",
          "Exercise1" : {
            "id" : "setops_tuto_21",
            "assignment" : "forall (A B:O1ExSet), (set_lteq B A) -> (B <> (svoid O1U)) -> (A <> (svoid O1U))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "void",
            "withDesc" : "true",
            "lockAxioms" : "menu_axioms;elim_eqset",
            "toolboxChapter" : "set_operation",
            "nbEnjoyHintKeys" : "16"
          },
          "Exercise2" : {
            "id" : "set_rewops_tuto_02",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "withDesc" : "true",
            "toolboxChapter" : "set_operation_rewrite",
            "nbEnjoyHintKeys" : "8"
          }
        },
        "Section7" : {
          "id" : "eqrel",
          "Exercise1" : {
            "id" : "tuto_rew2_1",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2",
            "axiomMode" : "eq_symmetry",
            "nbEnjoyHintKeys" : "5"
          },
          "Exercise2" : {
            "id" : "tuto_rew2_2",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2",
            "axiomMode" : "eq_trans",
            "nbEnjoyHintKeys" : "9"
          }
        },
        "Section8" : {
          "id" : "rew_localdef",
          "Exercise1" : {
            "id" : "tuto_rew_6",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2",
            "axiomMode" : "app_def_rewrite",
            "nbEnjoyHintKeys" : "6"
          },
          "Exercise2" : {
            "id" : "tuto_rew_8",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "difficulty" : "0",
            "lockAxioms" : "app_def_rewrite",
            "toolboxChapter" : "rewrite_order2",
            "axiomMode" : "app_def",
            "nbEnjoyHintKeys" : "6"
          }
        },
        "Section9" : {
          "id" : "rew_chaining",
          "Exercise1" : {
            "id" : "tuto_rew_10",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2",
            "axiomMode" : "left_chain",
            "nbEnjoyHintKeys" : "5"
          }
        }
      }
    },
    "Chapter2" : {
      "id" : "set_properties",
      "icon" : "à",
      "Exercises" : {
        "Section1" : {
          "id" : "set_reflexivity",
          "Exercise1" : {
            "id" : "set_ex_reflexivity",
            "assignment" : "forall (A : O1ExSet), (set_lteq A A)",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "any_lteq_any"
          },
          "Exercise2" : {
            "id" : "set_ex_reflexivity2",
            "assignment" : "forall (A:O1ExSet), sis_element A (ssubset A)",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "elim_elem_ssubset"
          }
        },
        "Section2" : {
          "id" : "set_idempotence",
          "Exercise1" : {
            "id" : "set_ex_idempotence_1",
            "assignment" : "forall (A : O1ExSet), ((sunion A A) = A)",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise2" : {
            "id" : "set_ex_idempotence_2",
            "assignment" : "forall (A : O1ExSet), ((sinter A A) = A)",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          }
        },
        "Section3" : {
          "id" : "set_neutral",
          "Exercise1" : {
            "id" : "set_ex_neutral_1",
            "assignment" : "forall (A : O1ExSet), ((sunion A (svoid O1U)) = A)",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise2" : {
            "id" : "set_ex_neutral_2",
            "assignment" : "forall (A : O1ExSet), ((sinter A (sall O1U)) = A)",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          }
        },
        "Section4" : {
          "id" : "set_emptyset",
          "Exercise1" : {
            "id" : "set_ex_emptyset_1",
            "assignment" : "forall (A : O1ExSet), (sdiff A A) = (svoid O1U)",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise2" : {
            "id" : "logic_settheory_tuto_07",
            "assignment" : "forall (A:O1ExSet), (set_lteq (svoid O1U) A)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "void",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "axiomMode" : "elim_false_exset",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "setops_tuto_33",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "setops_tuto_48",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "toolboxLemma" : "true"
          },
          "Exercise5" : {
            "id" : "setops_tuto_31",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "toolboxLemma" : "true"
          }
        },
        "Section5" : {
          "id" : "set_difference",
          "Exercise1" : {
            "id" : "set_ex_defdiff",
            "assignment" : "forall (A B: O1ExSet), (sdiff A B) = (sinter A (scomp (sall O1U) B))",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          }
        },
        "Section6" : {
          "id" : "set_absorption",
          "Exercise1" : {
            "id" : "set_ex_absorption_1",
            "assignment" : "forall (A B: O1ExSet), (sinter A (sunion A B)) = A",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise2" : {
            "id" : "set_ex_absorption_2",
            "assignment" : "forall (A B: O1ExSet), (sunion A (sinter A B)) = A",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise3" : {
            "id" : "set_ex_absorption_3",
            "assignment" : "forall (A : O1ExSet), (sinter (svoid O1U) A) = (svoid O1U)",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise4" : {
            "id" : "set_ex_absorption_4",
            "assignment" : "forall (A : O1ExSet), (sunion (sall O1U) A) = (sall O1U)",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise5" : {
            "id" : "set_ex_absorption_5",
            "assignment" : "forall (A : O1ExSet), (sdiff (svoid O1U) A) = (svoid O1U)",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise6" : {
            "id" : "set_ex_absorption_6",
            "assignment" : "forall (A : O1ExSet), (sdiff A (svoid O1U)) = A",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          }
        },
        "Section7" : {
          "id" : "set_inclusion",
          "Exercise1" : {
            "id" : "set_ex_inclusion_1",
            "assignment" : "forall (A B : O1ExSet), set_lteq A (sunion A B)",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise2" : {
            "id" : "set_ex_inclusion_2",
            "assignment" : "forall (A B : O1ExSet), set_lteq (sinter A B) A",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          }
        },
        "Section8" : {
          "id" : "set_simplification",
          "Exercise3" : {
            "id" : "set_ex_simplification_1",
            "assignment" : "forall (A B : O1ExSet), (set_lteq A B) -> (sinter A B) = A",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise4" : {
            "id" : "set_ex_simplification_2",
            "assignment" : "forall (A B : O1ExSet), (set_lteq B A) -> (sinter A B) = B",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise5" : {
            "id" : "set_ex_simplification_3",
            "assignment" : "forall (A B : O1ExSet), (set_lteq A B) -> (sunion A B) = B",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise6" : {
            "id" : "set_ex_simplification_4",
            "assignment" : "forall (A B : O1ExSet), (set_lteq B A) -> (sunion A B) = A",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          }
        },
        "Section9" : {
          "id" : "set_excluded_middle",
          "Exercise1" : {
            "id" : "set_ex_set_excluded_middle_1",
            "assignment" : "forall (A:O1ExSet), (sunion A (scomp (sall O1U) A)) = (sall O1U)",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise2" : {
            "id" : "set_ex_set_excluded_middle_2",
            "assignment" : "forall (A:O1ExSet), (sinter A (scomp (sall O1U) A)) = (svoid O1U)",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          }
        },
        "Section10" : {
          "id" : "set_deMorgan",
          "Exercise1" : {
            "id" : "logic_quantifier_ex_03",
            "assignment" : "forall (A B:O1ExSet), scomp (sall O1U) (sunion A B) = sinter (scomp (sall O1U) A) (scomp (sall O1U) B)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "withDesc" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_ex_04",
            "assignment" : "forall (A B:O1ExSet), scomp (sall O1U) (sinter A B) = sunion (scomp (sall O1U) A) (scomp (sall O1U) B)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "withDesc" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          }
        },
        "Section11" : {
          "id" : "set_absurd",
          "Exercise1" : {
            "id" : "set_ex_absurd",
            "assignment" : "forall (A : O1ExSet), (scomp (sall O1U) (scomp (sall O1U) A)) = A",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          }
        },
        "Section12" : {
          "id" : "set_distributivity",
          "Exercise1" : {
            "id" : "logic_quantifier_ex_01",
            "assignment" : "forall (A B C:O1ExSet), sunion A (sinter B C) = sinter (sunion A B) (sunion A C)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "withDesc" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_ex_02",
            "assignment" : "forall (A B C:O1ExSet), sinter A (sunion B C) = sunion (sinter A B) (sinter A C)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "withDesc" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise3" : {
            "id" : "logic_set_operator_01",
            "assignment" : "forall (A B C:O1ExSet), ((sinter (sdiff A C) (sdiff B C)) = (sdiff (sinter A B) C))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "comment" : "src: Monier MPSI 1.1.1.a",
            "withDesc" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise4" : {
            "id" : "logic_set_operator_02",
            "assignment" : "forall (A B C:O1ExSet), ((sunion (sdiff A C) (sdiff B C)) = (sdiff (sunion A B) C))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "comment" : "src: Monier MPSI 1.1.1.b",
            "withDesc" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise5" : {
            "id" : "logic_quantifier_ex_06",
            "assignment" : "forall (A B C:O1ExSet), pprod A (sinter B C) = sinter (pprod A B) (pprod A C)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "withDesc" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise6" : {
            "id" : "logic_quantifier_ex_le_37",
            "assignment" : "forall (A B C:O1ExSet), pprod A (sunion B C) = sunion (pprod A B) (pprod A C)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "withDesc" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          },
          "Exercise7" : {
            "id" : "logic_quantifier_ex_le_38",
            "assignment" : "forall (A B C D:O1ExSet), (sinter (pprod A B) (pprod C D)) = (pprod (sinter A C) (sinter B D))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXSET"
          }
        },
        "Section13" : {
          "id" : "set_operation",
          "Exercise1" : {
            "id" : "set_ex_operation_1",
            "assignment" : "forall (A B C : O1ExSet), A = B -> (sinter A C) = (sinter B C)",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "set_ex_operation_2",
            "assignment" : "forall (A B C : O1ExSet), A = B -> (sunion A C) = (sunion B C)",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "set_ex_operation_3",
            "assignment" : "forall (A B C : O1ExSet), A = B -> (sdiff A C) = (sdiff B C)",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "set_ex_operation_4",
            "assignment" : "forall (A B : O1ExSet), A = B -> (scomp (sall O1U) A) = (scomp (sall O1U) B)",
            "toolboxLemma" : "true"
          }
        },
        "Section14" : {
          "id" : "set_monotonicity",
          "Exercise1" : {
            "id" : "set_ex_monotonicity_1",
            "assignment" : "forall (A B C : O1ExSet), (set_lteq B C) -> (set_lteq (sinter A B) (sinter A C))",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "set_ex_monotonicity_2",
            "assignment" : "forall (A B C : O1ExSet), (set_lteq B C) -> (set_lteq (sunion A B) (sunion A C))",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "set_ex_monotonicity_3",
            "assignment" : "forall (A B C : O1ExSet), (set_lteq B C) -> (set_lteq (sdiff B A) (sdiff C A))",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "set_ex_monotonicity_4",
            "assignment" : "forall (A B C : O1ExSet), (set_lteq B C) -> (set_lteq (sdiff A C) (sdiff A B))",
            "toolboxLemma" : "true"
          },
          "Exercise5" : {
            "id" : "set_ex_monotonicity_5",
            "assignment" : "forall (A B : O1ExSet), (set_lteq A B) -> (set_lteq (scomp (sall O1U) B) (scomp (sall O1U) A))",
            "toolboxLemma" : "true"
          }
        },
        "Section15" : {
          "id" : "set_combination",
          "Exercise1" : {
            "id" : "set_ex_combination_1",
            "assignment" : "forall (A B C D: O1ExSet), A = B -> C = D -> (sunion A C) = (sunion B D)",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "set_ex_combination_2",
            "assignment" : "forall (A B C D: O1ExSet), A = B -> C = D -> (sinter A C) = (sinter B D)",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "set_ex_combination_3",
            "assignment" : "forall (A B C D: O1ExSet), A = B -> C = D -> (sdiff A C) = (sdiff B D)",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "set_ex_combination_4",
            "assignment" : "forall (A B C D: O1ExSet), (set_lteq A B) -> (set_lteq C D) -> (set_lteq (sinter A C) (sinter B D))",
            "toolboxLemma" : "true"
          },
          "Exercise5" : {
            "id" : "set_ex_combination_5",
            "assignment" : "forall (A B C D: O1ExSet), (set_lteq A B) -> (set_lteq C D) -> (set_lteq (sunion A C) (sunion B D))",
            "toolboxLemma" : "true"
          }
        }
      }
    },
    "Chapter3" : {
      "id" : "set_operators",
      "icon" : "®",
      "Exercises" : {
        "Section1" : {
          "id" : "subset",
          "Exercise1" : {
            "id" : "setops_tuto_22",
            "assignment" : "forall (A:O1ExSet), (sis_element (svoid O1U) (ssubset A))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "parts",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "axiomMode" : "elim_subset",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "setops_tuto_41",
            "assignment" : "forall (A B:O1ExSet), (equiv (set_lteq A B) (set_lteq (ssubset A) (ssubset B)))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "set_operation",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "setops_tuto_37",
            "assignment" : "forall (A B:O1ExSet), ((ssubset (sinter A B))=(sinter (ssubset A) (ssubset B)))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "setops_tuto_38",
            "assignment" : "forall (A B:O1ExSet), (set_lteq (sunion (ssubset A) (ssubset B)) (ssubset (sunion A B)))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "toolboxLemma" : "true"
          }
        },
        "Section2" : {
          "id" : "cartesianp",
          "Exercise1" : {
            "id" : "setops_tuto_28",
            "assignment" : "forall (A B:O1ExSet) (x y:O1U), (sis_element x A) -> (sis_element y B) -> (sis_element (upair x y) (pprod A B))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "complément",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "axiomMode" : "elim_pprod"
          },
          "Exercise2" : {
            "id" : "setops_tuto_15",
            "assignment" : "forall (A B:O1ExSet) (x y:O1U), (sis_element x A) -> (sis_element x B) -> (sis_element (upair x x) (pprod (sinter A B) A))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "complément",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation"
          }
        },
        "Section3" : {
          "id" : "projection",
          "Exercise1" : {
            "id" : "setops_tuto_16",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "complément",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "axiomMode" : "elim_upair"
          },
          "Exercise2" : {
            "id" : "setops_tuto_17",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "complément",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation"
          }
        },
        "Section4" : {
          "id" : "set_difference",
          "Exercise1" : {
            "id" : "setops_tuto_05",
            "assignment" : "forall (A B:O1ExSet) (x:O1U), (sis_element x A) -> (~ (sis_element x B)) -> (sis_element x (sdiff A B))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "lockAxioms" : "menu_axioms",
            "axiomMode" : "elim_sdiff"
          },
          "Exercise2" : {
            "id" : "set_rewops_tuto_30",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite"
          },
          "Exercise3" : {
            "id" : "set_rewops_tuto_31",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite"
          }
        },
        "Section5" : {
          "id" : "set_excluded",
          "Exercise1" : {
            "id" : "set_rewops_tuto_13",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite"
          },
          "Exercise2" : {
            "id" : "set_rewops_tuto_14",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite"
          }
        },
        "Section6" : {
          "id" : "set_absurd",
          "Exercise1" : {
            "id" : "set_rewops_tuto_15",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite"
          }
        },
        "Section7" : {
          "id" : "scomp",
          "Exercise1" : {
            "id" : "setops_tuto_11",
            "assignment" : "forall (A:O1ExSet) (x:O1U), (~(sis_element x A)) -> (sis_element x (scomp (sall O1U) A))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "axiomMode" : "elim_sdiff"
          },
          "Exercise2" : {
            "id" : "logic_settheory_tuto_04",
            "assignment" : "forall (A B:O1ExSet) (x:O1U), (sis_element x (sinter A (scomp (sall O1U) B))) -> (sis_element x (sdiff A B))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "complément",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation"
          },
          "Exercise3" : {
            "id" : "set_ex_inclusion_3",
            "assignment" : "forall (A B C : O1ExSet), equiv (set_lteq (sinter A B) C) (set_lteq A (sunion (scomp (sall O1U) B) C))"
          },
          "Exercise4" : {
            "id" : "set_rewops_tuto_12",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite"
          }
        },
        "Section8" : {
          "id" : "set_inclusion",
          "Exercise1" : {
            "id" : "setops_tuto_25",
            "assignment" : "forall (A B:O1ExSet),(sunion (scomp (sall O1U) A) B = sall O1U) -> (set_lteq A B)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "extraTactics" : "elim_equiv_tac",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "connector_order2"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_ex_le_36",
            "assignment" : "forall (A B:O1ExSet), (set_lteq A B) -> (sinter A (scomp (sall O1U) B) = svoid O1U)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "extraTactics" : "elim_equiv_tac",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "connector_order2"
          },
          "Exercise3" : {
            "id" : "setops_tuto_26",
            "assignment" : "forall (A B:O1ExSet),(sinter A (scomp (sall O1U) B) = svoid O1U) -> (set_lteq A B) ",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "extraTactics" : "elim_equiv_tac",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "connector_order2"
          },
          "Exercise4" : {
            "id" : "setops_tuto_30",
            "assignment" : "forall (A B C:O1ExSet), (set_lteq A B) -> (set_lteq (sdiff C B) (sdiff C A))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation"
          },
          "Exercise5" : {
            "id" : "set_tuto_inclusion",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "set_operation_rewrite"
          }
        },
        "Section9" : {
          "id" : "set_leftright",
          "Exercise1" : {
            "id" : "set_tuto_lrinter",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite"
          },
          "Exercise2" : {
            "id" : "set_tuto_lrunion",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite"
          },
          "Exercise3" : {
            "id" : "set_tuto_lrdiff",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite"
          },
          "Exercise4" : {
            "id" : "set_tuto_lrcomp",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "set_operation_rewrite"
          }
        },
        "Section10" : {
          "id" : "set_combinations",
          "Exercise1" : {
            "id" : "set_tuto_comb_inter",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "set_operation_rewrite"
          },
          "Exercise2" : {
            "id" : "set_tuto_comb_union",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "set_operation_rewrite"
          },
          "Exercise3" : {
            "id" : "logic_set_rewrite_12",
            "assignment" : "forall (A B C D:O1ExSet),    ((sunion A B) = C) ->    ((sunion A C) = D) ->    ((sinter B C) = A) ->    (A = (sinter C D))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "rewrite_order2"
          },
          "Exercise4" : {
            "id" : "logic_set_rewrite_13",
            "assignment" : "forall (A B C D:O1ExSet),    ((sinter A B)=(sinter C D)) ->    ((sinter (scomp (sall O1U) A) B)=(sinter C (scomp (sall O1U) D))) ->    (B=C)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "rewrite_order2"
          },
          "Exercise5" : {
            "id" : "logic_settheory_tuto_10",
            "assignment" : "forall (A B C:O1ExSet),    ((sinter A C) = B) ->    ((sinter A B) = C) ->    ((sinter A (sunion A C)) = (sinter A B)) ->    ((sunion A B) = C)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "rewrite_order2"
          },
          "Exercise6" : {
            "id" : "setops_tuto_24",
            "assignment" : "forall (A B:O1ExSet), (sunion A B = B) -> (set_lteq A B)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation"
          },
          "Exercise7" : {
            "id" : "setops_tuto_29",
            "assignment" : "forall (A B C:O1ExSet), (set_lteq A B) -> (set_lteq A C) -> (set_lteq A (sinter B C))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation"
          },
          "Exercise8" : {
            "id" : "setops_tuto_47",
            "assignment" : "forall (A B C:O1ExSet), equiv (A = B) ((sinter A B)=(sunion A B))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true",
            "toolboxChapter" : "set_operation"
          }
        },
        "Section11" : {
          "id" : "setprop",
          "Exercise1" : {
            "id" : "logic_set_operator_07",
            "assignment" : "forall (A B C :O1ExSet),((sdiff (sdiff A C) (sdiff B C)) = (sdiff (sdiff A B) C))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "comment" : "src: Monier MPSI 1.1.b",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "connector_order2"
          },
          "Exercise2" : {
            "id" : "setops_tuto_32",
            "assignment" : "forall (A B C:O1ExSet), (set_lteq (sdiff A (sdiff B C)) (sunion (sdiff A B) C))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation"
          },
          "Exercise3" : {
            "id" : "setops_tuto_27",
            "assignment" : "forall (A B C :O1ExSet),((sdiff (sdiff A B) C) = (sdiff A (sunion B C)))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "comment" : "src: Monier MPSI 1.1.b",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation"
          },
          "Exercise4" : {
            "id" : "logic_set_operator_04",
            "assignment" : "forall (A B C:O1ExSet), (equiv ((sinter A B) = (sinter A C)) ((sinter A (scomp (sall O1U) B)) = (sinter A (scomp (sall O1U) C))))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "comment" : "src: Monier MPSI 1.1.1.d",
            "toolboxChapter" : "rewrite_order2"
          }
        },
        "Section12" : {
          "id" : "setdemorgan",
          "Exercise1" : {
            "id" : "set_rewops_tuto_11",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite"
          }
        },
        "Section13" : {
          "id" : "svoid",
          "Exercise1" : {
            "id" : "setops_tuto_34",
            "assignment" : "forall (A B C:O1ExSet), (set_lteq A B) -> ((sinter A C) = (svoid O1U)) -> (set_lteq A (sdiff B C))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true",
            "toolboxChapter" : "set_operation"
          },
          "Exercise2" : {
            "id" : "setops_tuto_36",
            "assignment" : "forall (A B C:O1ExSet), (set_lteq A (sdiff B C)) -> ((sinter A C) = (svoid O1U))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "set_operation"
          }
        },
        "Section14" : {
          "id" : "set_simplification",
          "Exercise1" : {
            "id" : "set_rewops_tuto_04",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite"
          },
          "Exercise2" : {
            "id" : "set_rewops_tuto_09",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite"
          },
          "Exercise3" : {
            "id" : "set_rewops_tuto_10",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite"
          },
          "Exercise4" : {
            "id" : "logic_set_rewrite_05",
            "assignment" : "forall (A B C:O1ExSet),    (set_lteq A B) ->    ((sinter A B) = C) ->    (A=C)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "simplification",
            "toolboxChapter" : "set_operation_rewrite"
          },
          "Exercise5" : {
            "id" : "logic_set_rewrite_06",
            "assignment" : "forall (F A B C:O1ExSet),    (set_lteq (sinter A B) (sinter A C)) ->    (F = (sinter A (sunion B C))) ->    (F = (sinter A C))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "expand/factorize",
            "toolboxChapter" : "set_operation_rewrite"
          },
          "Exercise6" : {
            "id" : "set_tuto_comb_union2",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "set_operation_rewrite"
          },
          "Exercise7" : {
            "id" : "set_tuto_comb_inter2",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "set_operation_rewrite"
          }
        },
        "Section15" : {
          "id" : "set_transitivity",
          "Exercise1" : {
            "id" : "logic_set_rewrite_09",
            "assignment" : "forall (A B C:O1ExSet), (A = (sinter A B)) -> ((sinter A B) = C) -> (A = C)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2"
          },
          "Exercise2" : {
            "id" : "logic_set_rewrite_10",
            "assignment" : "forall (A B C:O1ExSet), (set_lteq A (sinter A B)) -> (set_lteq (sinter A B) C) -> (set_lteq A C)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2"
          },
          "Exercise3" : {
            "id" : "logic_set_rewrite_01",
            "assignment" : "forall (A B C D:O1ExSet),      ((sinter A B) = C) ->      ((sinter A B) = D) ->      (C = D)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "rewriting",
            "lockAxioms" : "eq_trans",
            "toolboxChapter" : "rewrite_order2"
          }
        },
        "Section16" : {
          "id" : "set_distributivity",
          "Exercise1" : {
            "id" : "tuto_rew_9",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2",
            "axiomMode" : "left_chain"
          },
          "Exercise2" : {
            "id" : "set_rewops_tuto_07",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite"
          },
          "Exercise3" : {
            "id" : "tuto_rew2_4",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "difficulty" : "0",
            "lockAxioms" : "setfactorize",
            "toolboxChapter" : "rewrite_order2"
          },
          "Exercise4" : {
            "id" : "set_rewops_tuto_08",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "set_operation_rewrite"
          }
        },
        "Section17" : {
          "id" : "set_difficult",
          "Exercise1" : {
            "id" : "logic_set_rewrite_19",
            "assignment" : "forall (E A B X Y:O1ExSet),    (set_lteq X E) ->    (set_lteq Y E) ->    ((sunion A B) = E) ->    ((sinter X A)=(sinter Y A)) ->    ((sinter X B)=(sinter Y B)) ->    (X=Y)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "rewrite_order2"
          },
          "Exercise2" : {
            "id" : "logic_set_rewrite_14",
            "assignment" : "forall (F A B:O1ExSet),    (F=(sunion (sunion (sinter A B) (sinter A (scomp (sall O1U) B))) (sinter (scomp (sall O1U) A) B))) ->    (F=(sunion A B ))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "rewrite_order2"
          },
          "Exercise3" : {
            "id" : "logic_set_rewrite_15",
            "assignment" : "forall (F A B:O1ExSet),    (F=(scomp (sall O1U) (sunion (sunion (sinter (scomp (sall O1U) A) B) (sinter (scomp (sall O1U) A) (scomp (sall O1U) B))) (scomp (sall O1U) B)))) ->    (F=(sinter A B ))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "rewrite_order2"
          },
          "Exercise4" : {
            "id" : "logic_set_rewrite_16",
            "assignment" : "forall (F A B C:O1ExSet),    (F=(sunion (sinter B (sunion A C)) (sunion (sinter A (scomp (sall O1U) B)) (sunion (sinter B (scomp (sall O1U) C)) (C))))) ->    (F=(sunion (sunion A B) C))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "rewrite_order2"
          },
          "Exercise5" : {
            "id" : "logic_set_rewrite_17",
            "assignment" : "forall (F A B C:O1ExSet),    (F=      (sunion (sunion (sunion (sinter A (sinter B C)) (sinter (scomp (sall O1U) A) (sinter B C)))      (sunion (sinter A (sinter (scomp (sall O1U) B) C)) (sinter (scomp (sall O1U) A) (sinter (scomp (sall O1U) B) C))))      (sinter (sinter A B) (scomp (sall O1U) C)))) ->    (F=(sunion C (sinter A B)))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "rewrite_order2"
          },
          "Exercise6" : {
            "id" : "logic_set_operator_05",
            "assignment" : "forall (A B C:O1ExSet), ((sunion A B) = (sinter A C)) -> ((sunion B C) = (sinter B A)) -> ((sunion C A) = (sinter C B)) -> (and (A = B) (B = C))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "comment" : "src: Monier MPSI 1.1.1.e",
            "toolboxChapter" : "rewrite_order2"
          },
          "Exercise7" : {
            "id" : "logic_set_operator_06",
            "assignment" : "forall (A B C D :O1ExSet), (set_lteq A C) -> (set_lteq B D) -> ((sinter C D) = (svoid O1U)) -> ((sunion A B) = (sunion C D)) -> (and (A = C) (B = D))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "comment" : "src: Monier MPSI 1.1.1.f",
            "toolboxChapter" : "rewrite_order2"
          }
        }
      },
      "SuperSection" : {
        "id" : "set_reasoning",
        "icon" : "à",
        "Section1" : {
          "id" : "sunion",
          "Exercise1" : {
            "id" : "setops_tuto_10",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "lockAxioms" : "menu_axioms",
            "toolboxChapter" : "set_operation",
            "axiomMode" : "elim_sunion",
            "nbEnjoyHintKeys" : "20"
          },
          "Exercise2" : {
            "id" : "logic_settheory_tuto_02",
            "assignment" : "forall (A B:O1ExSet) (x:O1U), (sis_element x (sunion A B)) -> (sis_element x (sunion B A))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "union",
            "lockAxioms" : "menu_axioms;setcommutative",
            "toolboxChapter" : "set_operation",
            "nbEnjoyHintKeys" : "20"
          },
          "Exercise3" : {
            "id" : "setlogic_tuto_7",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "connector_order2",
            "axiomMode" : "case_base_binary",
            "nbEnjoyHintKeys" : "30"
          },
          "Exercise4" : {
            "id" : "setlogic_tuto_4",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "lockAxioms" : "elim_sunion;elim_scomp",
            "toolboxChapter" : "connector_order2",
            "axiomMode" : "modus_tollens",
            "nbEnjoyHintKeys" : "12"
          },
          "Exercise5" : {
            "id" : "setlogic_tuto_6",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "lockAxioms" : "elim_sunion;elim_scomp",
            "toolboxChapter" : "connector_order2",
            "axiomMode" : "adabsurdium",
            "nbEnjoyHintKeys" : "19"
          }
        },
        "Section2" : {
          "id" : "set_connectors",
          "Exercise1" : {
            "id" : "setlogic_tuto_11"

          },
          "Exercise2" : {
            "id" : "setops_tuto_46",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "set_operation"
          },
          "Exercise3" : {
            "id" : "setops_tuto_45",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "set_operation"
          },
          "Exercise4" : {
            "id" : "setlogic_tuto_3",
            "assignment" : "forall (A B:O1ExSet), equiv (set_lteq A B) (B = sunion A B)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "connector_order2"
          },
          "Exercise5" : {
            "id" : "setops_tuto_44",
            "assignment" : "forall (P Q R:O1ExSet), no_intro (forall (x:O1U),(or (sis_element x P) (and (sis_element x Q) (sis_element x R))) -> (or (sis_element x P) (sis_element x Q)))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "set_operation"
          },
          "Exercise6" : {
            "id" : "setops_tuto_43",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "set_operation"
          },
          "Exercise7" : {
            "id" : "setops_tuto_42",
            "assignment" : "forall (A B:O1ExSet), ((sunion (ssubset A) (ssubset B)) = ssubset (sunion A B)) -> (or (set_lteq A B) (set_lteq B A))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "set_operation"
          }
        },
        "Section3" : {
          "id" : "case_base_binary",
          "Exercise1" : {
            "id" : "setlogic_tuto_2",
            "assignment" : "forall (A:O1ExSet) (x:O1U), (sis_element x (sunion (A) (scomp (sall O1U) A)))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "connector_order2"
          },
          "Exercise2" : {
            "id" : "cbb_2",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "connector_order2"
          },
          "Exercise3" : {
            "id" : "cbb_3",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "connector_order2"
          },
          "Exercise4" : {
            "id" : "cbb_4",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "connector_order2"
          },
          "Exercise5" : {
            "id" : "cbb_5",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "connector_order2"
          },
          "Exercise6" : {
            "id" : "cbb_6",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "connector_order2"
          },
          "Exercise7" : {
            "id" : "logic_quantifier_ex_le_35",
            "assignment" : "forall (A B:O1ExSet), (set_lteq A B) -> (sunion (scomp (sall O1U) A) B = sall O1U)",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "connector_order2"
          }
        },
        "Section4" : {
          "id" : "negation",
          "Exercise1" : {
            "id" : "setlogic_tuto_nofalse",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "connector_order2"
          },
          "Exercise2" : {
            "id" : "setops_tuto_35",
            "assignment" : "forall (A B C:O1ExSet), (set_lteq A (sdiff B C)) -> (A <> (svoid O1U)) -> (~(set_lteq B C))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "set_operation"
          },
          "Exercise3" : {
            "id" : "setops_tuto_39",
            "assignment" : "forall (A B C:O1ExSet), (set_lteq A B) -> (~(set_lteq A C)) -> (~(set_lteq B C))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "set_operation"
          },
          "Exercise4" : {
            "id" : "setops_tuto_40",
            "assignment" : "forall (A B C:O1ExSet), (set_lteq (sdiff A B) C) -> (~(set_lteq A C)) -> (~((sinter A B)=(svoid O1U)))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "set_operation"
          }
        }
      }
    },
    "Chapter4" : {
      "id" : "logic_relation",
      "icon" : "ƞ",
      "Exercises" : {
        "Section1" : {
          "id" : "relationgraph",
          "Exercise" : {
            "id" : "logic_rel_tuto_graph",

            "extraHdb" : "reldiag relfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "elim_gen_app_rel",
            "nbEnjoyHintKeys" : "20"
          }
        },
        "Section2" : {
          "id" : "injectivity",
          "Exercise1" : {
            "id" : "logic_rel_tuto_01",

            "extraHdb" : "setbackward setforward",
            "extraTactics" : "fold (FunRelSetProp O1U) in tilda",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "def_rinj"
          },
          "Exercise2" : {
            "id" : "logic_rel_tuto_03",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "extraTactics" : "fold (FunRelSetProp O1U) in tilda",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "def_rfun"
          }
        },
        "Section3" : {
          "id" : "surjectivity",
          "Exercise1" : {
            "id" : "logic_rel_tuto_05",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "extraTactics" : "fold (FunRelSetProp O1U) in tilda",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "def_rsurj"
          },
          "Exercise2" : {
            "id" : "logic_rel_tuto_07",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "extraTactics" : "fold (FunRelSetProp O1U) in tilda",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "def_rtotleft"
          }
        },
        "Section4" : {
          "id" : "set_operations",
          "Exercise1" : {
            "id" : "logic_rel_tuto_09",
            "assignment" : "forall (A B:O1ExSet) (R:Rel A B), (RInj R) -> (RFun (RInv R))",
            "extraHdb" : "reldiag relfordiag",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "def_rinv",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "logic_rel_tuto_10",

            "extraHdb" : "reldiag relfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "def_rcomp"
          }
        },
        "Section5" : {
          "id" : "binrel",
          "Exercise1" : {
            "id" : "logic_rel_tuto_11",

            "extraHdb" : "reldiag relfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "def_rrefl"
          },
          "Exercise2" : {
            "id" : "logic_rel_tuto_irrefl",

            "extraHdb" : "reldiag relfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "def_irrefl"
          },
          "Exercise3" : {
            "id" : "logic_rel_tuto_12",

            "extraHdb" : "reldiag relfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "def_rsym"
          },
          "Exercise4" : {
            "id" : "logic_rel_tuto_16",

            "extraHdb" : "reldiag relfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "def_rantisym"
          },
          "Exercise5" : {
            "id" : "logic_rel_tuto_13",

            "extraHdb" : "reldiag relfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "def_rtrans"
          },
          "Exercise6" : {
            "id" : "logic_rel_tuto_14",

            "extraHdb" : "reldiag relfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "elim_requiv"
          },
          "Exercise7" : {
            "id" : "logic_rel_tuto_15",

            "extraHdb" : "reldiag relfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "elim_rorder"
          }
        },
        "Section6" : {
          "id" : "remarkset",
          "Exercise1" : {
            "id" : "logic_rel_tuto_17",
            "assignment" : "forall (E:O1ExSet) (R:BinRel E), (REquiv R) -> (forall x:O1U, sis_element x (sequiv x R))",
            "extraHdb" : "reldiag relfordiag",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "elim_sequiv",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_ex_le_15",
            "assignment" : "forall (E:O1ExSet) (R:BinRel E), ((RRefl R) -> (set_lteq (RIdent E) R))",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "axiomMode" : "def_rident",
            "toolboxLemma" : "true"
          }
        },
        "Section7" : {
          "id" : "relation_tilda",
          "Exercise1" : {
            "id" : "logic_rel_tuto_02",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "extraTactics" : "fold (FunRelSetProp O1U) in tilda",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation"
          },
          "Exercise2" : {
            "id" : "logic_rel_tuto_04",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "extraTactics" : "fold (FunRelSetProp O1U) in tilda",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "relation graph",
            "toolboxChapter" : "relation"
          },
          "Exercise3" : {
            "id" : "logic_rel_tuto_06",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "extraTactics" : "fold (FunRelSetProp O1U) in tilda",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation"
          },
          "Exercise4" : {
            "id" : "logic_rel_tuto_08",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "extraTactics" : "fold (FunRelSetProp O1U) in tilda",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation"
          },
          "Exercise5" : {
            "id" : "logic_tilda_01",

            "extraHdb" : "reldiag relfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "relation"
          },
          "Exercise6" : {
            "id" : "logic_tilda_02",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "extraTactics" : "fold (FunRelSetProp O1U) in tilda",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "relation"
          },
          "Exercise7" : {
            "id" : "logic_tilda_03",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "extraTactics" : "fold (FunRelSetProp O1U) in tilda",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "relation"
          },
          "Exercise8" : {
            "id" : "logic_tilda_04",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "extraTactics" : "fold (FunRelSetProp O1U) in tilda",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "relation"
          }
        },
        "Section8" : {
          "id" : "relequiv",
          "Exercise1" : {
            "id" : "logic_quantifier_ex_le_16",
            "assignment" : "forall (A:O1ExSet) (R:BinRel A), REquiv R -> (forall (a b:O1U), equiv (sequiv a R = sequiv b R) (gen_app_rel R a b))",
            "extraHdb" : "reldiag relfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_ex_le_17",
            "assignment" : "forall (A:O1ExSet) (R:BinRel A), REquiv R -> (forall (a b:O1U), (sequiv a R <> sequiv b R) -> (sinter (sequiv a R) (sequiv b R) = svoid O1U))",
            "extraHdb" : "reldiag relfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          }
        },
        "Section9" : {
          "id" : "relcar",
          "Exercise1" : {
            "id" : "logic_quantifier_ex_le_20",
            "assignment" : "forall (E:O1ExSet) (R:BinRel E), (equiv (RRefl R) (set_lteq (RIdent E) R))",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_ex_le_26",
            "assignment" : "forall (E:O1ExSet) (R:BinRel E), equiv (RAntiSym R) (set_lteq (sinter R (RInv R)) (RIdent E))",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "logic_quantifier_ex_le_25",
            "assignment" : "forall (E:O1ExSet) (R:BinRel E), equiv (RSym R) (R = (RInv R))",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "logic_quantifier_ex_le_27",
            "assignment" : "forall (E:O1ExSet) (R:BinRel E), equiv (RTrans R) (set_lteq (RComp R R) R)",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          }
        },
        "Section10" : {
          "id" : "relcomp",
          "Exercise1" : {
            "id" : "logic_quantifier_ex_le_28",
            "assignment" : "forall (E:O1ExSet) (R:BinRel E), (RRefl R) -> (set_lteq R (RComp R R))",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_ex_le_28_2",
            "assignment" : "forall (E:O1ExSet) (R:BinRel E), (RRefl R) -> (RRefl (RComp R R))",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "logic_quantifier_ex_le_30",
            "assignment" : "forall (E:O1ExSet) (R:BinRel E), (RTrans R) -> (RTrans (RComp R R))",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "logic_quantifier_ex_le_29",
            "assignment" : "forall (E:O1ExSet) (R:BinRel E), (RSym R) -> (RComp R (RInv R)) = (RComp (RInv R) R)",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          },
          "Exercise5" : {
            "id" : "logic_quantifier_ex_le_47",
            "assignment" : "forall (A B C:O1ExSet) (R1 R2:Rel A B) (R3 R4:Rel B C), set_lteq R1 R2 -> set_lteq R3 R4 -> set_lteq (RComp R1 R3) (RComp R2 R4)",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "lockAxioms" : "comb_comp_lt",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          }
        },
        "Section11" : {
          "id" : "reltrans",
          "Exercise1" : {
            "id" : "logic_quantifier_ex_le_32",
            "assignment" : "forall (A:O1ExSet) (R:BinRel A), (RTrans R) -> (RIRRefl R) -> (RAntiSym R)",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_ex_le_31",
            "assignment" : "forall (A:O1ExSet) (R1 R2:BinRel A), (RTrans R1) -> (RTrans R2) -> ((RComp R1 R2) = (RComp R2 R1)) -> (RTrans (RComp R1 R2))",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "set_caracterisation",
            "toolboxLemma" : "true"
          }
        },
        "Section12" : {
          "id" : "relinv",
          "Exercise1" : {
            "id" : "logic_quantifier_ex_le_08",
            "assignment" : "forall (A B:O1ExSet) (R:Rel A B), (RInj R) -> (RFun (RInv R))",
            "extraHdb" : "reldiag relfordiag",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_ex_le_10",
            "assignment" : "forall (A B:O1ExSet) (R:Rel A B), RTotLeft R -> RSurj (RInv R)",
            "extraHdb" : "reldiag relfordiag",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "logic_quantifier_ex_le_23",
            "assignment" : "forall (A:O1ExSet) (R:BinRel A), RRefl R -> RTrans R -> REquiv (sinter R (RInv R))",
            "goal" : "forall (A:O1ExSet) (R:BinRel A), RRefl R -> RTrans R -> REquiv (A:=A) (sinter R (RInv R))",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "logic_quantifier_ex_le_09",
            "assignment" : "forall (A B:O1ExSet) (R:Rel A B), (RFun R) -> (RInj (RInv R))",
            "extraHdb" : "reldiag relfordiag",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          },
          "Exercise5" : {
            "id" : "logic_quantifier_ex_le_19",
            "assignment" : "forall (A B:O1ExSet) (R1 R2:Rel A B), RInv (sinter R1 R2) = sinter (RInv R1) (RInv R2)",
            "goal" : "forall (A B:O1ExSet) (R1 R2:Rel A B), RInv (A:=A) (B:=B) (sinter R1 R2) = sinter (RInv R1) (RInv R2)",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          },
          "Exercise6" : {
            "id" : "logic_quantifier_ex_le_21",
            "assignment" : "forall (A B:O1ExSet) (R1 R2:Rel A B), RInv (sunion R1 R2) = sunion (RInv R1) (RInv R2)",
            "goal" : "forall (A B:O1ExSet) (R1 R2:Rel A B), RInv (A:=A) (B:=B) (sunion R1 R2) = sunion (RInv R1) (RInv R2)",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          },
          "Exercise7" : {
            "id" : "logic_quantifier_ex_le_22",
            "assignment" : "forall (A B C:O1ExSet) (R1:Rel A B) (R2:Rel B C), RInv (RComp R1 R2) = RComp (RInv R2) (RInv R1)",
            "extraHdb" : "setbackward setforward",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "relation",
            "toolboxLemma" : "true"
          }
        }
      }
    },
    "Chapter5" : {
      "id" : "logic_function",
      "icon" : "l",
      "Exercises" : {
        "Section1" : {
          "id" : "image_function",
          "Exercise1" : {
            "id" : "tuto_function_021",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function",
            "axiomMode" : "elim_elem_image",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "tuto_function_023",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "tuto_function_022",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "tuto_function_12",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function",
            "axiomMode" : "elim_elem_antecedant",
            "toolboxLemma" : "true"
          },
          "Exercise5" : {
            "id" : "tuto_function_04",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function",
            "axiomMode" : "elim_eqfun"
          },
          "Exercise6" : {
            "id" : "tuto_function_03",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          },
          "Exercise7" : {
            "id" : "tuto_function_10",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          },
          "Exercise8" : {
            "id" : "tuto_function_02",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          }
        },
        "Section2" : {
          "id" : "fun_properties",
          "Exercise1" : {
            "id" : "tuto_function_05",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function",
            "axiomMode" : "def_finj"
          },
          "Exercise2" : {
            "id" : "tuto_function_06",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function",
            "axiomMode" : "def_fsurj",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "tuto_function_07",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function",
            "axiomMode" : "def_finvol"
          },
          "Exercise4" : {
            "id" : "tuto_function_08",
            "assignment" : "forall (E:ExSet UE) (f:Fun E E), FInvolution f -> FBij f",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "function",
            "axiomMode" : "def_fbij",
            "toolboxLemma" : "true"
          }
        },
        "Section3" : {
          "id" : "funcomp",
          "Exercise1" : {
            "id" : "tuto_function_09",

            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "function",
            "axiomMode" : "def_fcomp"
          }
        },
        "Section4" : {
          "id" : "funsurj",
          "Exercise1" : {
            "id" : "logic_quantifier_ex_le_44",
            "assignment" : "forall (A:ExSet UA) (B:ExSet UB) (C:ExSet UC) (f:Fun A B) (g:Fun B C), FSurj (FComp g f) -> FSurj g",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_ex_le_48",
            "assignment" : "forall (A:ExSet UA) (B:ExSet UB) (C:ExSet UC) (f:Fun A B) (g:Fun B C), FSurj (FComp g f) -> FInj g -> FSurj f",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "logic_quantifier_ex_le_12",
            "assignment" : "forall (A:ExSet UA) (B:ExSet UB) (C:ExSet UC) (f:Fun B C) (g:Fun A B), (FSurj f) -> (FSurj g) -> (FSurj (FComp f g))",
            "extraHdb" : "fundiag funfordiag",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "tuto_function_11",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          },
          "Exercise5" : {
            "id" : "logic_quantifier_ex_le_50",

            "withDemonstrate" : "true",
            "difficulty" : "3",
            "withDesc" : "true",
            "toolboxChapter" : "function"
          }
        },
        "Section5" : {
          "id" : "finj",
          "Exercise1" : {
            "id" : "logic_quantifier_ex_le_43",
            "assignment" : "forall (A:ExSet UA) (B:ExSet UB) (C:ExSet UC) (f:Fun A B) (g:Fun B C), FInj (FComp g f) -> FInj f",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "funtrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "logic_quantifier_ex_le_52",
            "assignment" : "forall (A:ExSet UA) (B:ExSet UB) (C:ExSet UC) (f:Fun A B) (g:Fun B C), FInj (FComp g f) -> FSurj f -> FInj g",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "funtrivial",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "logic_quantifier_ex_le_45",
            "assignment" : "forall (A:ExSet UA) (B:ExSet UB) (C:ExSet UC) (f:Fun A B) (g:Fun A B) (h:Fun B C), (FInj h) -> (FComp h f) = (FComp h g) -> f = g",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "logic_quantifier_ex_le_11",
            "assignment" : "forall (A:ExSet UA) (B:ExSet UB) (C:ExSet UC) (f:Fun B C) (g:Fun A B), (FInj f) -> (FInj g) -> (FInj (FComp f g))",
            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          },
          "Exercise5" : {
            "id" : "logic_quantifier_ex_le_46",
            "assignment" : "forall (A B:O1ExSet) (f:O1Fun A B), (FInj f) -> (forall (X Y:O1ExSet),(set_lteq X A) -> (set_lteq Y A) ->  set_lteq (sinter (app_fun_exset f X) (app_fun_exset f Y)) (app_fun_exset f (sinter X Y)))",
            "extraHdb" : "setbackward setforward",
            "extraTrivialHdb" : "exsettrivial",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          },
          "Exercise6" : {
            "id" : "tuto_function_13",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          },
          "Exercise7" : {
            "id" : "tuto_function_14",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function",
            "toolboxLemma" : "true"
          },
          "Exercise8" : {
            "id" : "logic_quantifier_ex_le_49",
            "assignment" : "forall E A B : O1ExSet, let phi : (PHITYPE A B E) := (fun X => upair (sinter X A) (sinter X B)) in set_lteq A E -> set_lteq B E -> (equiv (FInj phi) (sunion A B = E))",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "function"
          }
        },
        "Section6" : {
          "id" : "fun_inverse",
          "Exercise1" : {
            "id" : "function_inverse_01",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function"
          },
          "Exercise2" : {
            "id" : "function_inverse_02",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function"
          },
          "Exercise3" : {
            "id" : "function_inverse_03",

            "extraHdb" : "fundiag funfordiag",
            "extraTrivialHdb" : "exsettrivial",
            "toolboxChapter" : "function"
          }
        }
      }
    }
  },
  "Part7" : {
    "id" : "calculus",
    "icon" : "^",
    "Chapter1" : {
      "id" : "eq_seg",
      "icon" : "§",
      "Tutorial" : {
        "Section1" : {
          "id" : "lrops",
          "Exercise1" : {
            "id" : "eq_2",
            "assignment" : "forall (x:Expr), ((x-1) = 1) -> (x=2)",
            "difficulty" : "0",
            "toolboxChapter" : "eq",
            "axiomMode" : "lradd",
            "nbEnjoyHintKeys" : "20"
          },
          "Exercise2" : {
            "id" : "eq_2_1",
            "assignment" : "forall (x:Expr), ((x+1) = 2) -> (x=1)",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "eq",
            "axiomMode" : "lrsub",
            "nbEnjoyHintKeys" : "3"
          },
          "Exercise3" : {
            "id" : "eq_2_2",
            "assignment" : "forall (x:Expr), (((x/3)-1) = 1) -> (x=6)",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "eq",
            "axiomMode" : "lrmul"
          },
          "Exercise4" : {
            "id" : "eq_3",
            "assignment" : "forall (x:Expr), ((2*x) = 4) -> (x=2)",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "eq",
            "axiomMode" : "lrdiv"
          },
          "Exercise5" : {
            "id" : "demo_tuto_first",
            "assignment" : "forall (x:Expr), (((2*x)+1)=integer 5) -> (x = (integer 2))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "withDesc" : "true",
            "nbHints" : "1",
            "toolboxChapter" : "eq"
          }
        },
        "Section2" : {
          "id" : "combinaison",
          "Exercise1" : {
            "id" : "demo_tuto_comb",
            "assignment" : "forall (x y:Expr),    ((x+y)=integer 4) ->    (((3*x)-y) = zero) ->    (x = (integer 1))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "withSlide" : "true",
            "toolboxChapter" : "eq",
            "axiomMode" : "combadd",
            "nbEnjoyHintKeys" : "20"
          },
          "Exercise2" : {
            "id" : "eq_6",
            "assignment" : "forall (x y:Expr), ((x+(2*y))=3) -> ((x+y)=2) -> (y=1)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "eq",
            "axiomMode" : "combsub"
          }
        },
        "Section3" : {
          "id" : "eqsym",
          "Exercise1" : {
            "id" : "calc0_eqrel1",
            "assignment" : "forall (a b:Expr), ((plus b 1)=a) -> (a=(plus b 1))",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2",
            "axiomMode" : "eq_symmetry",
            "nbEnjoyHintKeys" : "7"
          },
          "Exercise2" : {
            "id" : "calc0_eqrel2",
            "assignment" : "forall (a b:Expr), ((plus a 2)=b) -> (b=a+2)",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2",
            "nbEnjoyHintKeys" : "7"
          }
        },
        "Section4" : {
          "id" : "eqtrans",
          "Exercise1" : {
            "id" : "calc0_eqrel3",
            "assignment" : "forall (a b:Expr), (a=b) -> (b=3) -> (a=3)",
            "difficulty" : "0",
            "lockAxioms" : "eq_trans:forw",
            "axiomMode" : "eq_trans",
            "nbEnjoyHintKeys" : "14"
          },
          "Exercise2" : {
            "id" : "calc0_eqrel5",
            "assignment" : "forall (x y:Expr), (x=4) -> (x=y) -> (y=4)",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2",
            "axiomMode" : "eq_trans",
            "nbEnjoyHintKeys" : "11"
          },
          "Exercise3" : {
            "id" : "calc0_eqrel4",
            "assignment" : "forall (a b c:Expr), (a=b) -> (b=c) -> (c=5) -> (a=5)",
            "difficulty" : "0",
            "withDesc" : "true",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite_order2"
          }
        },
        "Section5" : {
          "id" : "rewriting",
          "Exercise1" : {
            "id" : "calc0_rewriting",
            "assignment" : "forall (x y:Expr), (y = (plus x (plus 1 1))) -> ((plus x 2)=y)",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2",
            "axiomMode" : "rewriting",
            "nbEnjoyHintKeys" : "15"
          },
          "Exercise2" : {
            "id" : "calc0_rewriting2",
            "assignment" : "forall (a b c d:Expr), ((minus b c)=7) -> ((plus d (minus b c)) =a) -> (a= (plus d 7))",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite_order2",
            "nbEnjoyHintKeys" : "11"
          }
        },
        "Section6" : {
          "id" : "localdef",
          "lecture_id" : "basefacts",
          "Exercise1" : {
            "id" : "calcl0_localdef1",

            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2",
            "axiomMode" : "app_def_rewrite",
            "nbEnjoyHintKeys" : "4"
          },
          "Exercise2" : {
            "id" : "calcl0_localdef2",

            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2",
            "axiomMode" : "app_def",
            "nbEnjoyHintKeys" : "8"
          }
        },
        "Section7" : {
          "id" : "rew_chaining",
          "Exercise1" : {
            "id" : "calc0_chain1",
            "assignment" : "(mult (integer 2) 1009)=2018",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2",
            "axiomMode" : "left_chain",
            "nbEnjoyHintKeys" : "7"
          },
          "Exercise2" : {
            "id" : "calc0_chain2",

            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2",
            "nbEnjoyHintKeys" : "4"
          },
          "Exercise3" : {
            "id" : "calc0_chain3",
            "assignment" : "(integer 2016)=(mult (pow 2 5) (mult (pow 3 2) 7))",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite_order2",
            "axiomMode" : "right_chain",
            "nbEnjoyHintKeys" : "4"
          },
          "Exercise4" : {
            "id" : "calc0_chain4",
            "assignment" : "(mult (pow 2 3) (mult 13 19))=(mult 76 26)",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite_order2",
            "axiomMode" : "lr_chain",
            "nbEnjoyHintKeys" : "4"
          }
        },
        "Section8" : {
          "id" : "neqrel",
          "Exercise1" : {
            "id" : "neq_4",
            "assignment" : "forall (x:Expr), (nvar 2 <>(plus x 1)) -> (plus x 1 <>2)",
            "difficulty" : "0",
            "toolboxChapter" : "neq",
            "axiomMode" : "neq_symmetry"
          },
          "Exercise2" : {
            "id" : "neq_5",
            "assignment" : "forall (x:Expr), (ExprLT (minus x 2) zero) -> ((minus x 2)<>zero)",
            "difficulty" : "0",
            "toolboxChapter" : "neq",
            "axiomMode" : "neq_elim_ineq"
          },
          "Exercise3" : {
            "id" : "eq_10",
            "assignment" : "forall (x:Expr), ((x-1) <> zero) -> (x <> 1)",
            "difficulty" : "0",
            "toolboxChapter" : "neq",
            "axiomMode" : "lradd_neq"
          }
        }
      },
      "Exercises" : {
        "Section1" : {
          "id" : "combinaison",
          "Exercise1" : {
            "id" : "combinaison_01",
            "assignment" : "forall (w x y z:Expr), (x = y) -> (w = z) -> (x + w) = (y + z)",
            "withDesc" : "true",
            "noEvar" : "true",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "combinaison_02",
            "assignment" : "forall (w x y z:Expr), (x = y) -> (w = z) -> (w - x) = (z - y)",
            "noEvar" : "true",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "combinaison_03",
            "assignment" : "forall (w x y z:Expr), (x = y) -> (w = z) -> (w * x) = (z * y)",
            "noEvar" : "true",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "combinaison_04",
            "assignment" : "forall (w x y z:Expr), (x <> zero) -> (x = y) -> (w = z) -> (w / x) = (z / y)",
            "noEvar" : "true",
            "toolboxLemma" : "true"
          }
        },
        "Section2" : {
          "id" : "rewritings",
          "Exercise1" : {
            "id" : "rewriting_01",
            "assignment" : "forall (x y:Expr),  (x = nosimpl (x + y) - y)",
            "noEvar" : "true",
            "openVKeyboard" : "true",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXPR"
          },
          "Exercise2" : {
            "id" : "rewriting_02",
            "assignment" : "forall (x y:Expr),  (x = nosimpl (x - y) + y)",
            "noEvar" : "true",
            "openVKeyboard" : "true",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXPR"
          },
          "Exercise3" : {
            "id" : "rewriting_03",
            "assignment" : "forall (x y:Expr),  (y<>zero) -> (x = (x*y)/y)",
            "noEvar" : "true",
            "openVKeyboard" : "true",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXPR"
          },
          "Exercise4" : {
            "id" : "rewriting_04",
            "assignment" : "forall (x z y:Expr),  (y<>zero) -> ((x/z) = (x*y)/(z*y))",
            "noEvar" : "true",
            "openVKeyboard" : "true",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXPR"
          }
        },
        "Section3" : {
          "id" : "lrops",
          "Exercise1" : {
            "id" : "demo_tuto_ex4",
            "assignment" : "forall (x:Expr),    ((minus x 2) <> zero) ->    ((div (mult (plus x 3) (minus x 2)) (plus x 1)) = (integer 1)) ->    ((plus x 3)=(div (plus x 1) (minus x 2)))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "eq"
          },
          "Exercise2" : {
            "id" : "demo_tuto_ex8",
            "assignment" : "forall (x:Expr),    (minus x (integer 2) <> zero) ->    (plus x 1 <> zero) ->    (plus x 3 = zero) ->    (div (plus x 3) (mult (minus x 2) (plus x 1)) = zero)",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "eq"
          },
          "Exercise3" : {
            "id" : "demo_tuto_ex9",
            "assignment" : "forall (x:Expr),    (minus x 3 <> zero) ->    (plus x 1 <> zero) ->    (x = zero) ->    (div (plus x 2) (mult (minus x 3) (plus x 1)) = div (integer 2) (mult (minus x 3) (plus x 1)))",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "eq"
          },
          "Exercise4" : {
            "id" : "demo_tuto_ex11",
            "assignment" : "forall (x y:Expr),    (plus x 1 <> zero) ->    (minus y 2 <> zero) ->    (plus x y = integer 2) ->    (div (plus (plus x y) 2) (mult (plus x 1) (minus y 2)) = div (integer 4) (mult (plus x 1) (minus y 2)))",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "eq"
          }
        },
        "Section4" : {
          "id" : "rew_equation",
          "Exercise1" : {
            "id" : "eq_1",
            "assignment" : "forall (x:Expr), ((3*x)-4) = (x + 1) -> (x = 5/2)",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "eq"
          },
          "Exercise2" : {
            "id" : "rew_ex_19",
            "assignment" : "forall (x:Expr),    (mult 4 (plus (mult 5 x) 8) = 52) ->    (x=1)",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "eq"
          },
          "Exercise3" : {
            "id" : "demo_easy_ex_01",
            "assignment" : "forall (a x y:Expr), (a <> zero) -> ((((a*y)-(2*x))/2)=x) -> y=div (mult 4 x) a",
            "difficulty" : "1",
            "toolboxChapter" : "eq"
          }
        },
        "Section5" : {
          "id" : "comb",
          "Exercise1" : {
            "id" : "demo_tuto_ex1",
            "assignment" : "forall (x y:Expr),    ((plus x (integer 3))=zero) ->    ((plus x y)=zero) ->    ((y=integer 3))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "eq"
          },
          "Exercise2" : {
            "id" : "demo_tuto_ex1_1",
            "assignment" : "forall (x y:Expr),    ((plus (3*x) (5*y))=6) ->    ((plus (3*x) y)=2) ->    ((y=1))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "eq"
          },
          "Exercise3" : {
            "id" : "demo_tuto_ex2",
            "assignment" : "forall (x y:Expr),    ((minus x y) = (uminus 1)) ->    ((plus x y) = (integer 1)) ->    ((y=(integer 1)))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "eq"
          },
          "Exercise4" : {
            "id" : "demo_tuto_ex2_1",
            "assignment" : "forall (x y:Expr),    ((minus x y) = (uminus 1)) ->    ((plus x y) = (integer 1)) ->    (x=zero)",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "eq"
          }
        }
      }
    },
    "Chapter2" : {
      "id" : "rewrite",
      "icon" : "¥",
      "Tutorial" : {
        "Section1" : {
          "id" : "rew_simpl_section",
          "Exercise1" : {
            "id" : "rew_tuto_evalsimpl",

            "withDemonstrate" : "true",
            "withDesc" : "true",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite",
            "axiomMode" : "evalsimpl"
          },
          "Exercise2" : {
            "id" : "rew_tuto_updownsimpl",

            "withDemonstrate" : "true",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite",
            "axiomMode" : "updownsimpl"
          },
          "Exercise3" : {
            "id" : "rew_tuto_simpl2",
            "assignment" : "forall (E x:Expr),  (E=(plus (div 2 (plus x 1)) (div 1 (minus x 2)))) ->  (E = (div ((x+1)+(2*(x-2))) ((x+1)*(x-2))))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "commondenom",
            "withSlide" : "true",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite",
            "axiomMode" : "reducedenom"
          },
          "Exercise4" : {
            "id" : "rew_tuto_misc1",
            "assignment" : "forall (E x:Expr),    (E=(mult (plus x 3) (mult (plus x 2) (plus x 1)))) ->    (E=(mult (plus x 1) (mult (plus x 2) (plus x 3))))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "commutativity",
            "withSlide" : "true",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite",
            "axiomMode" : "commutativity"
          },
          "Exercise5" : {
            "id" : "rew_tuto_misc6",

            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "commutativity",
            "withSlide" : "true",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite",
            "axiomMode" : "assoc_md"
          },
          "Exercise6" : {
            "id" : "rew_tuto_simpl",
            "assignment" : "forall (x y:Expr), (plus x (plus 1 (plus (mult 2 x) 3)) = 10) -> (x= 2)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "linearsimpl",
            "withSlide" : "true",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite",
            "axiomMode" : "polysimpl"
          },
          "Exercise7" : {
            "id" : "rew_tuto_simpl4",

            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "linearsimpl",
            "withDesc" : "true",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite"
          },
          "Exercise8" : {
            "id" : "rew_tuto_simpl3",

            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "linearsimpl",
            "withDesc" : "true",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite"
          }
        },
        "Section2" : {
          "id" : "rew_distri",
          "Exercise1" : {
            "id" : "rew_tuto_fact1",
            "assignment" : "forall (E x:Expr),    ((pow x 2) <> zero) ->    (E=(plus (pow x 2) 1)) ->    (E=(mult (pow x 2) (plus 1 (div 1 (pow x 2)))))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "generic",
            "withSlide" : "true",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite",
            "axiomMode" : "gen_factorize"
          },
          "Exercise2" : {
            "id" : "rew_tuto_fact2",
            "assignment" : "forall (E x:Expr), (E=(plus (mult (plus x 1) (minus x 3)) (mult (x) (plus x 1)))) ->  (E=(mult (plus x 1) (minus (2*x) 3)))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "specifc",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite",
            "axiomMode" : "factorize"
          },
          "Exercise3" : {
            "id" : "rew_tuto_idrem1",

            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "developp",
            "withSlide" : "true",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite",
            "axiomMode" : "polysquare"
          },
          "Exercise4" : {
            "id" : "rew_tuto_idrem2",
            "assignment" : "forall (x:Expr), ((minus (pow x 2) 4) = zero) -> (mult (minus x 2) (plus x 2) = zero)",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "comment" : "square diff",
            "nbHints" : "2",
            "toolboxChapter" : "rewrite",
            "axiomMode" : "square_diff"
          },
          "Exercise5" : {
            "id" : "rew_tuto_idrem3",
            "assignment" : "forall (E x:Expr), (E = ((uminus (x ^ 2)) + 1) / 3) -> (E = uminus (((x - 1) * ( x+1)) / 3)) ",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "comment" : "square diff",
            "nbHints" : "2",
            "lockAxioms" : "commutativity",
            "toolboxChapter" : "rewrite",
            "axiomMode" : "factorize_uminus"
          }
        },
        "Section3" : {
          "id" : "rew_develop",
          "Exercise1" : {
            "id" : "rew_tuto_misc2",
            "assignment" : "forall (E x a:Expr), (E =((a*x+2)*(a+a^2))) -> (E=((((a^3)*x)+((a^2)*x))+((2*(a^2))+(2*a))))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "rewriting",
            "withSlide" : "true",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite",
            "axiomMode" : "expand"
          },
          "Exercise2" : {
            "id" : "rew_tuto_misc3",
            "assignment" : "forall (E x:Expr), (E = (((2*x)+((x+4)*(x-3)))/(x+4))) -> (E=((2*x)/(x+4))+(x-3))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "rewriting",
            "withDesc" : "true",
            "withSlide" : "true",
            "nbHints" : "1",
            "toolboxChapter" : "rewrite"
          }
        },
        "Section4" : {
          "id" : "misc",
          "Exercise1" : {
            "id" : "rew_ops_1",

            "withDemonstrate" : "true",
            "difficulty" : "1",
            "nbHints" : "1",
            "lockAxioms" : "lradd;lrsub;lrmul;lrdiv",
            "toolboxChapter" : "rewrite",
            "axiomMode" : "addsub",
            "nbEnjoyHintKeys" : "12"
          },
          "Exercise2" : {
            "id" : "rew_tuto_group",

            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "uigroup",
            "withDesc" : "true",
            "withSlide" : "true",
            "nbHints" : "-1",
            "toolboxChapter" : "rewrite",
            "nbEnjoyHintKeys" : "11"
          }
        }
      },
      "Exercises" : {
        "Section1" : {
          "id" : "rew_factorize",
          "Exercise1" : {
            "id" : "rew_ex_11",
            "assignment" : "forall (E x:Expr), (E = plus (plus (mult 4 x) 4) (pow (plus x 1) 2)) -> (E = mult (plus x 1) (plus x 5))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "lockAxioms" : "fullpolysimpl:back;polysimpl:back;right_chain",
            "toolboxChapter" : "rewrite"
          },
          "Exercise2" : {
            "id" : "rew_ex_10",
            "assignment" : "forall (E x:Expr),    (E = plus (minus (pow (minus (mult 3 x) 4) 2) (mult 9 x)) (12)) ->    (E = mult (minus (mult 3 x) 4) (minus (mult 3 x) 7))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "lockAxioms" : "fullpolysimpl:back;polysimpl:back;right_chain",
            "toolboxChapter" : "rewrite"
          },
          "Exercise3" : {
            "id" : "rew_ex_7",
            "assignment" : "forall (E x:Expr),    (E = minus (plus (minus (mult 4 (pow x 2)) (mult 12 x)) 9) (mult (minus (mult 2 x) 3) (minus (mult 3 x) 5))) ->    (E = mult (minus (mult 2 x) 3) (minus 2 x))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "lockAxioms" : "fullpolysimpl:back;polysimpl:back;right_chain",
            "toolboxChapter" : "rewrite"
          },
          "Exercise4" : {
            "id" : "rew_ex_8",
            "assignment" : "forall (A x:Expr),    (A = minus (mult (plus (x) (3)) (pow (minus (mult 5 x) 2) 2)) (mult (plus x 3) (pow (minus (mult 3 x) 5) 2))) ->    (A = mult (plus x 3) (mult (minus (mult 8 x) 7) (plus (mult 2 x) 3)))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "lockAxioms" : "fullpolysimpl:back;polysimpl:back;right_chain",
            "toolboxChapter" : "rewrite"
          },
          "Exercise5" : {
            "id" : "rew_ex_13",
            "assignment" : "forall (E x:Expr),    (E = minus (plus (pow x 2) (mult 25 x)) (mult (x) (plus x (pow 5 2)))) ->    (E = zero)",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "lockAxioms" : "fullpolysimpl:back;polysimpl:back;right_chain",
            "toolboxChapter" : "rewrite"
          },
          "Exercise6" : {
            "id" : "rew_ex_14",
            "assignment" : "forall (A x:Expr),    (A = plus (uminus (mult 6 (minus (pow x 2) 9))) (mult (plus (mult 2 x) 1) (plus x 3))) ->    (A = mult (plus (mult (uminus 4) x) (19)) (plus x 3))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "lockAxioms" : "fullpolysimpl:back;polysimpl:back;right_chain",
            "toolboxChapter" : "rewrite"
          },
          "Exercise7" : {
            "id" : "rew_ex_15",
            "assignment" : "forall (E a b c:Expr),    (E = plus (minus (mult (mult a b) c) (mult a b)) (minus c 1)) ->    (E = mult (minus c 1) (plus (mult a b) 1))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "lockAxioms" : "fullpolysimpl:back;polysimpl:back;right_chain",
            "toolboxChapter" : "rewrite"
          },
          "Exercise8" : {
            "id" : "rew_ex_20",
            "assignment" : "forall (E x:Expr),    (E = minus (mult (minus x 2) (plus x 3)) (mult (6) (minus x 1))) ->    (E = mult x (minus x 5))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "lockAxioms" : "fullpolysimpl:back;polysimpl:back;right_chain",
            "toolboxChapter" : "rewrite"
          },
          "Exercise9" : {
            "id" : "rew_ex_21",
            "assignment" : "forall (E x:Expr),    (E = minus (mult (plus (mult 2 x) 3) (minus x 1)) (pow (minus x 1) 2)) ->    (E = mult (minus x 1) (plus x 4))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "lockAxioms" : "fullpolysimpl:back;polysimpl:back;right_chain",
            "toolboxChapter" : "rewrite"
          },
          "Exercise10" : {
            "id" : "rew_ex_9",
            "assignment" : "forall (B x:Expr),    (B = minus (mult (mult 4 (plus (x) (3))) (pow (minus (mult 5 x) 2) 2)) (mult (mult 9 (plus x 3)) (pow (minus (mult 3 x) 5) 2))) ->    (B = mult (plus x 3) (mult (plus x 11) (minus (mult 19 x) 19)))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise11" : {
            "id" : "rew_ex_12",
            "assignment" : "forall (E x:Expr),    (E = minus (plus (mult 2 x) (plus (5) (mult 4 (pow x 2)))) (25)) ->    (E = mult (mult 2 (plus (mult 2 x) 5)) (minus x 2))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise12" : {
            "id" : "demo_easy_ex_02",
            "assignment" : "forall (x:Expr), ((25*x^2)-(16*((x+4)^2)))=zero -> ((x-16)*(x+(16/9)))=zero",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          }
        },
        "Section2" : {
          "id" : "rew_almostsquare",
          "Exercise1" : {
            "id" : "rew_ex_16",
            "assignment" : "forall (E x:Expr),    (E = plus (minus (pow x 2) (mult 8 x)) (15)) ->    (E = mult (minus x 3) (minus x 5))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite"
          },
          "Exercise2" : {
            "id" : "rew_ex_17",
            "assignment" : "forall (E x:Expr),    (E = minus (minus (pow x 2) (mult 2 x)) (15)) ->    (E = mult (plus x 3) (minus x 5))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite"
          },
          "Exercise3" : {
            "id" : "rew_ex_18",
            "assignment" : "forall (E x:Expr),    (E = plus (minus (pow x 2) (mult 6 x)) (5)) ->    (E = mult (minus x 5) (minus x 1))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite"
          }
        },
        "Section3" : {
          "id" : "rew_canonical_form",
          "Exercise1" : {
            "id" : "rew_canonical_form_01",
            "assignment" : "forall (E x:Expr), (E = (plus (pow x 2) (mult 6 x))) -> (exists (alpha beta : Expr), (E = (minus (pow (plus x alpha) 2) beta)))",
            "extraTactics" : "paper_apply ex_intro s1",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite"
          },
          "Exercise2" : {
            "id" : "rew_canonical_form_02",
            "assignment" : "forall (E x:Expr), (E = (plus (pow x 2) (mult 10 x))) -> (exists (alpha beta : Expr), (E = (minus (pow (plus x alpha) 2) beta)))",
            "extraTactics" : "paper_apply ex_intro s1",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite"
          },
          "Exercise3" : {
            "id" : "rew_canonical_form_03",
            "assignment" : "forall (E x:Expr), (E = (plus (pow x 2) (mult 7 x))) -> (exists (alpha beta : Expr), (E = (minus (pow (plus x alpha) 2) beta)))",
            "extraTactics" : "paper_apply ex_intro s1",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite"
          },
          "Exercise4" : {
            "id" : "rew_canonical_form_04",
            "assignment" : "forall (E x:Expr), (E = (minus (pow x 2) (mult 8 x))) -> (exists (alpha beta : Expr), (E = (minus (pow (plus x alpha) 2) beta)))",
            "extraTactics" : "paper_apply ex_intro s1",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite"
          },
          "Exercise5" : {
            "id" : "rew_canonical_form_05",
            "assignment" : "forall (E x:Expr), (E = (minus (pow x 2) (mult 11 x))) -> (exists (alpha beta : Expr), (E = (minus (pow (plus x alpha) 2) beta)))",
            "extraTactics" : "paper_apply ex_intro s1",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite"
          },
          "Exercise6" : {
            "id" : "rew_canonical_form_06",
            "assignment" : "forall (E x:Expr), (E = (plus (pow x 2) (mult (div 8 3) x))) -> (exists (alpha beta : Expr), (E = (minus (pow (plus x alpha) 2) beta)))",
            "extraTactics" : "paper_apply ex_intro s1",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite"
          },
          "Exercise7" : {
            "id" : "rew_canonical_form_07",
            "assignment" : "forall (E x:Expr), (E = (minus (pow x 2) (mult (div 1 3) x))) -> (exists (alpha beta : Expr), (E = (minus (pow (plus x alpha) 2) beta)))",
            "extraTactics" : "paper_apply ex_intro s1",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite"
          },
          "Exercise8" : {
            "id" : "rew_canonical_form_gen1",
            "assignment" : "forall (E b x:Expr), (E = (plus (pow x 2) (mult b x))) -> (exists (alpha beta : Expr), (E = (minus (pow (plus x alpha) 2) beta)))",
            "extraTactics" : "paper_apply ex_intro s1",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite"
          },
          "Exercise9" : {
            "id" : "rew_canonical_form_08",
            "assignment" : "forall (x:Expr), (exists (alpha beta : Expr), ((plus (minus ((pow x 2)) (mult 6 x)) 5) = (minus (pow (plus x alpha) 2) beta)))",
            "extraTactics" : "paper_apply ex_intro s0",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise10" : {
            "id" : "rew_canonical_form_09",
            "assignment" : "forall (x:Expr), (exists (alpha beta : Expr), ((plus (plus ((pow x 2)) (mult 3 x)) 2) = (minus ((pow (plus x alpha) 2)) beta)))",
            "extraTactics" : "paper_apply ex_intro s0",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise11" : {
            "id" : "rew_canonical_form_10",
            "assignment" : "forall (x:Expr), (exists (alpha beta gamma: Expr), ((plus (minus (mult 3 (pow x 2)) (mult 4 x)) 6) = (minus (mult gamma (pow (plus x alpha) 2)) beta)))",
            "extraTactics" : "paper_apply ex_intro s0",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise12" : {
            "id" : "rew_canonical_form_11",
            "assignment" : "forall (x:Expr), (exists (alpha beta gamma: Expr), ((minus (plus (mult (div 1 2) (pow x 2)) (mult 5 x)) 1) = (minus (mult gamma (pow (plus x alpha) 2)) beta)))",
            "extraTactics" : "paper_apply ex_intro s0",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise13" : {
            "id" : "rew_canonical_form_12",
            "assignment" : "forall (x:Expr), (exists (alpha beta gamma: Expr), ((minus (plus (mult (uminus 2) (pow x 2)) (mult 3 x)) 4) = (minus (mult gamma (pow (plus x alpha) 2)) beta)))",
            "extraTactics" : "paper_apply ex_intro s0",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise14" : {
            "id" : "rew_canonical_form_gen2",
            "assignment" : "forall (a b c x:Expr), a <> zero -> (exists (alpha beta gamma: Expr), ((plus (mult a (pow x 2)) (plus (mult b x) c)) = (minus (mult gamma (pow (plus x alpha) 2)) beta)))",
            "extraTactics" : "paper_apply ex_intro s1",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          }
        },
        "Section4" : {
          "id" : "rew3_equation",
          "Exercise1" : {
            "id" : "rew_ex_34",
            "assignment" : "forall (x:Expr),    (minus (mult 3 (minus (mult 2 x) (1))) (mult 5 (plus (mult 2 x) 2)) = 9) ->    (x = uminus (div 11 2))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true",
            "toolboxChapter" : "rewrite"
          },
          "Exercise2" : {
            "id" : "rew_ex_35",
            "assignment" : "forall (x:Expr),    (mult (minus x 3) (plus x 2) = minus (minus (pow x 2) (mult 4 x)) (2)) ->    (x = div 4 3)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite"
          },
          "Exercise3" : {
            "id" : "rew_ex_36",
            "assignment" : "forall (x:Expr),    (div (plus (mult 7 x) (1)) (plus (mult 2 x) (3)) = 5) ->    (x = uminus (div 14 3))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite"
          },
          "Exercise4" : {
            "id" : "demo_easy_ex_03",
            "assignment" : "forall x:Expr, (x/(x-1))=((x-2)/x) -> x=(2/3)",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite"
          },
          "Exercise5" : {
            "id" : "demo_tuto_ex5",
            "assignment" : "forall (x:Expr), ((pow (minus x 1) 2) = (pow (plus x 1) 2)) ->    (x=zero)",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite"
          },
          "Exercise6" : {
            "id" : "demo_tuto_second",
            "assignment" : "forall (a x:Expr), (ExprGTEQ x zero) -> ((a*(a+1))=4) -> (((x-a)*(x+a))=a) -> x=2",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise7" : {
            "id" : "demo_ex_second",
            "assignment" : "forall (a b x:Expr), ((2*b)+1)=a -> (x*((x*a)+1))=(((2*b)*(x^2))+(x^2)) -> x = zero",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          }
        },
        "Section5" : {
          "id" : "rew_system",
          "Exercise1" : {
            "id" : "rew_ex_37",
            "assignment" : "forall (x y:Expr),    (plus x y = 4) ->    (minus (mult 2 x) y = uminus 1) ->    (and (x=1) (y=3))",
            "extraTactics" : "paper_apply conj s1",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "rewrite"
          },
          "Exercise2" : {
            "id" : "demo_tuto_ex3",
            "assignment" : "forall (x y:Expr), ((plus (div x (integer 2)) y) = (integer 1)) -> ((minus x (mult (integer 2) y)) = (integer 1)) -> ((y=(div 1 4)))",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "rewrite"
          },
          "Exercise3" : {
            "id" : "demo_tuto_ex7",
            "assignment" : "forall (x y z:Expr),    (plus x y = (integer 3)) ->    (minus x (mult 2 y) = (integer 2)) -> (x = plus z (integer 4)) ->    (z=uminus (div 4 3))",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "rewrite"
          },
          "Exercise4" : {
            "id" : "rew_ex_24",
            "assignment" : "forall (x y:Expr),    (plus (div 5 x) (div 2 y) = 26) ->    (minus (div 2 x) (div 3 y) = uminus 1) ->    (and (x=div 1 4) (y=div 1 3))",
            "extraTactics" : "paper_apply conj s1",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise5" : {
            "id" : "rew_ex_23",
            "assignment" : "forall (x y:Expr),    (plus (div 4 (minus x 2)) (div 7 (plus y 1)) = 3) ->    (plus (div 5 (minus x 2)) (div 9 (plus y 1)) = 2) ->    (and (x=div 27 13) (y=uminus (div 8 7)))",
            "extraTactics" : "paper_apply conj s1",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise6" : {
            "id" : "rew_ex_25",
            "assignment" : "forall (x y:Expr),    (plus (div 2 (mult 3 (minus x 1))) (div 3 (minus y 1)) = 2) ->    (plus (div 1 (minus x 1)) (div 4 (minus y 1)) = zero) ->    (and (x=(div 23 24)) (y=(div 7 6)))",
            "extraTactics" : "paper_apply conj s1",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise7" : {
            "id" : "rew_ex_33",
            "assignment" : "forall (x y:Expr),    (ExprGTEQ y zero) ->    (plus (mult 5 x) (mult 2 (pow y 2)) = 26) ->    (minus (mult 2 x) (mult 3 (pow y 2)) = uminus 1) ->    (and (x=4) (y=sqrt 3))",
            "extraTactics" : "paper_apply conj s1",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise8" : {
            "id" : "rew_ex_27",
            "assignment" : "forall (x y z:Expr),    (plus x (minus (mult 2 y) (mult 3 z)) = uminus 4) ->    (plus (mult 2 x) (plus (mult 3 y) z) = 11) ->    (plus (minus (uminus x) (mult 3 y)) (mult 2 z) = uminus 1) ->    (and (x=1) (and (y=2) (z=3)))",
            "extraTactics" : "paper_apply conj s1",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise9" : {
            "id" : "rew_ex_26",
            "assignment" : "forall (x y z:Expr),    (plus x (plus y z) = 4) ->    (plus (mult 2 x) (plus y (mult 3 z)) = 9) ->    (minus x (plus y (mult 2 z)) = 3) ->    (and (x= div 19 5) (and (y=uminus (div 2 5)) (z=div 3 5)))",
            "extraTactics" : "paper_apply conj s1",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise10" : {
            "id" : "rew_ex_28",
            "assignment" : "forall (x y z t:Expr),    (plus (mult 2 x) (plus (minus (y) (mult 2 z)) (t))  = zero) ->    (plus (minus (mult 3 x) (y)) (minus (mult 2 z) (mult 2 t)) = 6) ->    (plus (uminus x) (minus (minus (mult 2 y) (mult 2 z)) (t)) = uminus 3) ->    (plus (minus x y) (minus (mult 2 z) t) = 3) ->    (and (x=1) (and (y=uminus 2) (and (z=uminus (div 1 2)) (t=uminus 1))))",
            "extraTactics" : "paper_apply conj s1",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "rewrite2"
          }
        }
      }
    },
    "Chapter3" : {
      "id" : "ineq_seg",
      "icon" : "¦",
      "Tutorial" : {
        "Section1" : {
          "id" : "leftright_ineq",
          "Exercise1" : {
            "id" : "ineq_ex_15",
            "assignment" : "forall (x:Expr), (ExprLTEQ (minus x 5) zero) -> (ExprLTEQ x (5))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "ineq",
            "axiomMode" : "lradd_ineq",
            "nbEnjoyHintKeys" : "5"
          },
          "Exercise2" : {
            "id" : "ineq_ex_26",
            "assignment" : "forall (x:Expr), (ExprGT (plus x 2) zero) -> (ExprGT x (uminus 2))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "ineq",
            "axiomMode" : "lrsub_ineq"
          },
          "Exercise3" : {
            "id" : "ineq_ex_27",
            "assignment" : "forall (x:Expr), (ExprLT (minus (div x 2) 1) 1) -> (ExprLT x 4)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "ineq",
            "axiomMode" : "lrmul_ineq"
          },
          "Exercise4" : {
            "id" : "ineq_ex_31",
            "assignment" : "forall (x:Expr), (ExprGT (minus 3 x) 5) -> (ExprLT x (uminus 2))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "ineq",
            "axiomMode" : "lrdiv_ineq"
          }
        },
        "Section2" : {
          "id" : "ineqrel",
          "Exercise1" : {
            "id" : "ineq_ex_33",

            "difficulty" : "0",
            "toolboxChapter" : "ineq",
            "axiomMode" : "elim_comp",
            "nbEnjoyHintKeys" : "5"
          },
          "Exercise2" : {
            "id" : "ineq_ex_35",

            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "ineq",
            "axiomMode" : "ineq_sym_rew",
            "nbEnjoyHintKeys" : "3"
          },
          "Exercise3" : {
            "id" : "ineq_ex_25",

            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "ineq",
            "axiomMode" : "trans_lt_gt",
            "nbEnjoyHintKeys" : "3"
          },
          "Exercise4" : {
            "id" : "ineq_ex_37",
            "assignment" : "forall (a b:Nvar), (ExprLTEQ (a+1) b) -> (ExprLT a b)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "ineq",
            "axiomMode" : "lt_next_int",
            "nbEnjoyHintKeys" : "5"
          }
        },
        "Section3" : {
          "id" : "ineqcomb",
          "Exercise1" : {
            "id" : "ineq_ex_20",
            "assignment" : "forall (x y:Expr), (ExprGT (plus x (mult 2 y)) 4) -> (ExprGT (minus y x) 2) -> (ExprGT y 2)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "ineq",
            "axiomMode" : "combine_cmp_plus",
            "nbEnjoyHintKeys" : "6"
          },
          "Exercise2" : {
            "id" : "ineq_ex_30",
            "assignment" : "forall (x y:Expr), (ExprGT (minus y x) 2) -> (ExprLT (plus x y) 6) ->    (ExprLT x 2)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "ineq"
          }
        },
        "Section4" : {
          "id" : "ineqbound_relation",
          "Exercise1" : {
            "id" : "double_inequality_tuto_12",

            "withDemonstrate" : "true",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "double_inequality",
            "nbEnjoyHintKeys" : "3"
          },
          "Exercise2" : {
            "id" : "double_inequality_tuto_04",

            "withDemonstrate" : "true",
            "difficulty" : "0",
            "nbHints" : "-1",
            "toolboxChapter" : "double_inequality",
            "axiomMode" : "ineqbound_trans",
            "nbEnjoyHintKeys" : "3"
          },
          "Exercise3" : {
            "id" : "double_inequality_tuto_05",

            "withDemonstrate" : "true",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "double_inequality",
            "axiomMode" : "lradd_bounded"
          },
          "Exercise4" : {
            "id" : "double_inequality_tuto_02",

            "withDemonstrate" : "true",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "double_inequality",
            "axiomMode" : "ineqbound_comb_add"
          }
        }
      },
      "Exercises" : {
        "Section1" : {
          "id" : "ineqcomb",
          "Exercise1" : {
            "id" : "ineq_comb_1",
            "assignment" : "forall (w x y z:Expr), (ExprGT x y) -> (ExprGT z w) -> (ExprGT (plus x z) (plus y w))",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "ineq_comb_2",
            "assignment" : "forall (w x y z:Expr), (ExprGTEQ x y) -> (ExprGTEQ z w) -> (ExprGTEQ (plus x z) (plus y w))",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "ineq_comb_3",
            "assignment" : "forall (w x y z:Expr), (ExprLT x y) -> (ExprLT z w) -> (ExprLT (plus x z) (plus y w))",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "ineq_comb_4",
            "assignment" : "forall (w x y z:Expr), (ExprLTEQ x y) -> (ExprLTEQ z w) -> (ExprLTEQ (plus x z) (plus y w))",
            "toolboxLemma" : "true"
          },
          "Exercise5" : {
            "id" : "ineq_comb_5",

            "toolboxLemma" : "true"
          },
          "Exercise6" : {
            "id" : "ineq_comb_6",

            "toolboxLemma" : "true"
          }
        },
        "Section2" : {
          "id" : "properties",
          "Exercise1" : {
            "id" : "ineq_prop1",
            "assignment" : "forall (x y:Expr), (ExprLT x y) -> ((x<>y))",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "ineq_prop2",
            "assignment" : "forall (x y:Expr), (ExprGT x y) -> ((x<>y))",
            "toolboxLemma" : "true"
          }
        },
        "Section3" : {
          "id" : "ineqs",
          "Exercise1" : {
            "id" : "ineq_ex_28",
            "assignment" : "forall (x:Expr), (ExprLT (plus (mult 2 x) 6) 4) -> (ExprLT x (uminus 1))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "nbHints" : "1",
            "toolboxChapter" : "ineq"
          },
          "Exercise2" : {
            "id" : "ineq_ex_16",
            "assignment" : "forall (x:Expr),    (ExprGT (minus (div (mult 3 x) 4) (div 5 2)) zero) ->    (ExprGT x (div 10 3))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true",
            "toolboxChapter" : "ineq"
          },
          "Exercise3" : {
            "id" : "ineq_ex_17",
            "assignment" : "forall (x:Expr),    (ExprLTEQ (minus (mult 3 (minus (mult 2 x) 1)) (mult 5 (plus (mult 4 x) 2))) (9)) ->    (ExprGTEQ x (uminus (div 11 7)))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true",
            "toolboxChapter" : "ineq"
          },
          "Exercise4" : {
            "id" : "ineq_ex_18",
            "assignment" : "forall (x:Expr),    (ExprGTEQ (minus (div (minus (mult 2 x) 5) (6)) (div (plus x 1) (3))) (div (minus (mult 4 x) 1) (2))) ->    (ExprLTEQ x (uminus (div 1 3)))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "ineq"
          },
          "Exercise5" : {
            "id" : "ineq_ex_1",
            "assignment" : "forall (b:Expr),    (ExprGT b 2) ->    (ExprGTEQ (div (plus b 11) (minus b 2)) 7) ->    (ExprLTEQ b (div 25 6))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "ineq"
          },
          "Exercise6" : {
            "id" : "ineq_ex_2",
            "assignment" : "forall (u:Expr),    (ExprLT u 3) ->    (ExprGTEQ (div (plus u 14) (minus u 3)) (uminus 1)) ->    (ExprLTEQ u (uminus (div 11 2)))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "ineq"
          },
          "Exercise7" : {
            "id" : "ineq_ex_3",
            "assignment" : "forall (t:Expr),    (ExprGT t 4) ->    (ExprGTEQ (div (minus t 10) (minus t 4)) (uminus 10)) ->    (ExprGTEQ t (div 50 11))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "ineq"
          },
          "Exercise8" : {
            "id" : "ineq_ex_4",
            "assignment" : "forall (c:Expr),    (ExprLT c (uminus 11)) ->    (ExprGTEQ (div (uminus 4) (plus c 11)) (uminus 12))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "ineq"
          },
          "Exercise9" : {
            "id" : "ineq_ex_5",
            "assignment" : "forall (c:Expr),    (ExprLT c (uminus 14)) ->    (ExprGTEQ (div 2 (plus c 14)) (uminus 5) ) ->    (ExprLTEQ c (uminus (div 72 5)))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "ineq"
          },
          "Exercise10" : {
            "id" : "ineq_ex_19",
            "assignment" : "forall (x:Expr),    (ExprLT (mult (minus x 3) (plus x 2)) (minus (minus (pow x 2) (mult 4 x)) (2))) ->    (ExprLT x (div 4 3))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "ineq"
          },
          "Exercise11" : {
            "id" : "ineq_ex_12",
            "assignment" : "forall (x y:Expr),    (ExprLT (plus (uminus y) (mult 2 x)) (uminus 1)) ->    (ExprGT (plus (uminus y) x) (uminus 4)) ->    (ExprLT x 3)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true",
            "toolboxChapter" : "ineq"
          }
        },
        "Section4" : {
          "id" : "misc",
          "Exercise1" : {
            "id" : "ineq_ex_10",
            "assignment" : "forall (x:Expr),    (ExprLTEQ (minus (mult 3 x) 1) (plus 5 (mult 7 x))) ->    (ExprLTEQ (minus (mult 5 x) 9) (minus (mult 3 x) 1)) ->    (is_bounded ExprLTEQLTEQ (uminus (div (integer 3) (integer 2))) x (integer 4))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "double_inequality"
          },
          "Exercise2" : {
            "id" : "ineq_ex_11",
            "assignment" : "forall (y:Expr),    (ExprLTEQ (minus 11 (mult 7 (plus (mult 2 y) 3))) (minus 9 (plus 24 (mult 13 y)))) ->    (ExprLTEQ (mult 8 (minus y 1)) (plus (mult 3 y) 17)) ->    (y=5)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "double_inequality"
          }
        }
      }
    },
    "Chapter4" : {
      "id" : "rewrite2",
      "icon" : "t",
      "Tutorial" : {
        "Section1" : {
          "id" : "rew_power",
          "Exercise1" : {
            "id" : "power_distrib",

            "nbHints" : "1",
            "toolboxChapter" : "rewrite2",
            "axiomMode" : "distributepower"
          },
          "Exercise2" : {
            "id" : "power_distrib2",

            "nbHints" : "1",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise3" : {
            "id" : "power_prod",

            "nbHints" : "1",
            "toolboxChapter" : "rewrite2",
            "axiomMode" : "productofpower"
          },
          "Exercise4" : {
            "id" : "power_prod2",

            "nbHints" : "1",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise5" : {
            "id" : "power_power",

            "nbHints" : "1",
            "toolboxChapter" : "rewrite2",
            "axiomMode" : "powerofpower"
          },
          "Exercise6" : {
            "id" : "zero_power",

            "nbHints" : "1",
            "toolboxChapter" : "rewrite2",
            "axiomMode" : "power_of_zero"
          }
        },
        "Section2" : {
          "id" : "rew_absolute",
          "Exercise1" : {
            "id" : "absrewriting_2",

            "nbHints" : "1",
            "toolboxChapter" : "rewrite2",
            "axiomMode" : "distributeabs"
          },
          "Exercise2" : {
            "id" : "absrewriting_1",

            "nbHints" : "1",
            "toolboxChapter" : "rewrite2",
            "axiomMode" : "absrewriting"
          }
        },
        "Section3" : {
          "id" : "rew_sqrt",
          "Exercise1" : {
            "id" : "rew_sqrt_3",

            "nbHints" : "1",
            "toolboxChapter" : "rewrite2",
            "axiomMode" : "product_sqrt"
          },
          "Exercise2" : {
            "id" : "rew_sqrt_4",

            "nbHints" : "1",
            "toolboxChapter" : "rewrite2",
            "axiomMode" : "product_sqrt"
          },
          "Exercise3" : {
            "id" : "rew_sqrt_1",

            "nbHints" : "1",
            "toolboxChapter" : "rewrite2",
            "axiomMode" : "intro_sqrt_square"
          },
          "Exercise4" : {
            "id" : "rew_sqrt_2",

            "nbHints" : "1",
            "toolboxChapter" : "rewrite2",
            "axiomMode" : "intro_sqrt_square"
          },
          "Exercise5" : {
            "id" : "rew_sqrt_5",

            "nbHints" : "1",
            "toolboxChapter" : "rewrite2",
            "axiomMode" : "to_square_sqrt"
          }
        }
      },
      "Exercises" : {
        "Section1" : {
          "id" : "rew_conjugate",
          "Exercise1" : {
            "id" : "rew_ex_1",
            "assignment" : "forall (E:Expr),    (E = div 3 (plus 2 (sqrt 3))) ->    (E = minus 6 (mult 3 (sqrt 3)))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "express" : "true",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise2" : {
            "id" : "rew_ex_2",
            "assignment" : "forall (A:Expr),    (A = div 4 (plus 2 (sqrt 3))) ->    (A = minus 8 (mult 4 (sqrt 3)))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise3" : {
            "id" : "rew_ex_3",
            "assignment" : "forall (B:Expr),    (B = div (uminus (sqrt 5)) (minus (sqrt 5) 4)) ->    (B = div (plus 5 (mult 4 (sqrt 5))) 11)",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise4" : {
            "id" : "rew_ex_4",
            "assignment" : "forall (C:Expr),    (C = div (minus (sqrt 3) 2) (plus (sqrt 3) 2)) ->    (C = (minus (mult 4 (sqrt 3)) 7))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise5" : {
            "id" : "rew_ex_5",
            "assignment" : "forall (E:Expr),    (E = div 8 (minus (sqrt 5) 1)) ->    (E = plus (mult 2 (sqrt 5)) 2)",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise6" : {
            "id" : "rew_ex_6",
            "assignment" : "forall (A:Expr),    (A = div 12 (plus (sqrt 7) 1)) ->    (A = minus (mult 2 (sqrt 7)) 2)",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          }
        },
        "Section2" : {
          "id" : "rew3_almostsquare",
          "Exercise1" : {
            "id" : "rew_ex_22",
            "assignment" : "forall (x:Expr),    (plus (minus (mult 9 (pow x 2)) (16)) (minus (mult 3 x) (4))) = (mult (minus (mult 3 x) 4) (plus (mult 3 x) 5))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise2" : {
            "id" : "quadratic_equation_facto",

            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "rewrite2"
          }
        },
        "Section3" : {
          "id" : "rew_gold",
          "Exercise1" : {
            "id" : "rew_ex_30",
            "assignment" : "let phi:(Expr) := (div (plus 1 (sqrt 5)) 2) in    ((pow phi 2)  = (plus phi 1))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise2" : {
            "id" : "rew_ex_31",
            "assignment" : "let phi:(Expr) := (div (plus 1 (sqrt 5)) 2) in   ((div 1 phi)  = (minus phi 1))",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "rewrite2"
          },
          "Exercise3" : {
            "id" : "rew_ex_32",
            "assignment" : "let phi:(Expr)  := (div (plus 1 (sqrt 5)) 2) in   ((pow phi 3)  = (plus (mult 2 phi) 1))",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "rewrite2"
          }
        }
      }
    },
    "Chapter5" : {
      "id" : "sigma_seg",
      "icon" : "û",
      "Tutorial" : {
        "Section1" : {
          "id" : "rew_sigma",
          "Exercise1" : {
            "id" : "sigma_ex_22",
            "assignment" : "forall (a b:Series SNats (sunknown Expr)),    ((sigma(k,zero,2016,(app_series a k))) = (integer 37)) ->    ((sigma(k,zero,2016,(app_series b k))) = (integer 58)) ->    ((sigma(k,zero,2016,(mult 2 (app_series a k))+(3*(app_series b k)))) = 248)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "linearity",
            "toolboxChapter" : "sigma",
            "axiomMode" : "sigmalinear"
          },
          "Exercise2" : {
            "id" : "sigma_ex_18",
            "assignment" : "forall (E:Expr) (a:Series SNats (sunknown Expr)) (n:Nvar),  (E=(minus (sigma(k,zero,n+1,app_series a k)) (sigma(k,zero,n,app_series a k)))) -> (E=(app_series a (plus n 1)))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "decomposition",
            "toolboxChapter" : "sigma",
            "axiomMode" : "sigmadecompl"
          },
          "Exercise3" : {
            "id" : "sigma_ex_19",
            "assignment" : "forall (E:Expr) (a:Series SNats (sunknown Expr)) (n:Nvar), (E=(plus (sigma(k,zero,n-1,plus (app_series a k) 1))) (plus (app_series a n) 1)) -> (E=((sigma(k,zero,n,plus (app_series a k) 1))))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "composition",
            "toolboxChapter" : "sigma",
            "axiomMode" : "sigmadef"
          },
          "Exercise4" : {
            "id" : "sigma_ex_24",

            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "composition",
            "toolboxChapter" : "sigma",
            "axiomMode" : "sigmasamerank"
          }
        },
        "Section2" : {
          "id" : "sigmaidx",
          "Exercise1" : {
            "id" : "sigma_ex_20",

            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "shifted indexing",
            "toolboxChapter" : "sigma",
            "axiomMode" : "sigmaupshift"
          },
          "Exercise2" : {
            "id" : "sigma_ex_25",

            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "shifted indexing",
            "toolboxChapter" : "sigma",
            "axiomMode" : "sigmainverse"
          }
        },
        "Section3" : {
          "id" : "sigmarem",
          "Exercise1" : {
            "id" : "sigma_ex_26",

            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "reference sums",
            "toolboxChapter" : "sigma",
            "axiomMode" : "sigmasimpl"
          },
          "Exercise2" : {
            "id" : "sigma_ex_27",


            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "reference sums",
            "toolboxChapter" : "sigma",
            "axiomMode" : "sigmaresult1"
          },
          "Exercise3" : {
            "id" : "sigma_ex_23",


            "withDemonstrate" : "true",
            "difficulty" : "0",
            "comment" : "reference sums",
            "toolboxChapter" : "sigma",
            "axiomMode" : "sigmaresult2"
          },
          "Exercise4" : {
            "id" : "sigma_ex_28",


            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "sigma",
            "axiomMode" : "sigmaresult3"
          }
        }
      },
      "Exercises" : {
        "Section1" : {
          "id" : "sigma_withref",
          "Exercise1" : {
            "id" : "sigma_ex_7",
            "assignment" : "(sigma(k,498,2016,3)) = 4557",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true",
            "toolboxChapter" : "sigma"
          },
          "Exercise2" : {
            "id" : "sigma_ex_4",
            "assignment" : "(sigma(k,0,1000,minus (mult 8 k) 3)) = 4000997",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true",
            "toolboxChapter" : "sigma"
          },
          "Exercise3" : {
            "id" : "sigma_ex_5",
            "assignment" : "(sigma(j,0,50,plus (mult 3 (pow j 2)) 1)) = 128826",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true",
            "toolboxChapter" : "sigma"
          },
          "Exercise4" : {
            "id" : "sigma_ex_3",
            "assignment" : "(sigma(p,2,2016,plus (mult 3 p) 2)) = 6103435",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "sigma"
          },
          "Exercise5" : {
            "id" : "sigma_ex_1",


            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "sigma"
          },
          "Exercise6" : {
            "id" : "sigma_ex_2",


            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "sigma"
          },
          "Exercise7" : {
            "id" : "sigma_ex_6",


            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "sigma"
          },
          "Exercise8" : {
            "id" : "sigma_ex_17",


            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "sigma"
          }
        },
        "Section2" : {
          "id" : "sigma_telescop",
          "Exercise1" : {
            "id" : "sigma_ex_29",


            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "sigma"
          },
          "Exercise2" : {
            "id" : "sigma_ex_8",


            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "sigma"
          },
          "Exercise3" : {
            "id" : "sigma_ex_13",


            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "sigma"
          },
          "Exercise4" : {
            "id" : "sigma_ex_9",


            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "sigma"
          }
        },
        "Section3" : {
          "id" : "sigma_ref",
          "Exercise1" : {
            "id" : "sigma_ex_15",


            "withDemonstrate" : "true",
            "difficulty" : "1",
            "withDesc" : "true",
            "lockAxioms" : "sigmaresult1; sigmaresult2; sigmaresult3",
            "toolboxChapter" : "sigma",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXPR"
          },
          "Exercise2" : {
            "id" : "sigma_ex_16",


            "withDemonstrate" : "true",
            "difficulty" : "2",
            "withDesc" : "true",
            "lockAxioms" : "sigmaresult2; sigmaresult3",
            "toolboxChapter" : "sigma",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXPR"
          },
          "Exercise3" : {
            "id" : "sigma_ex_21",

            "withDemonstrate" : "true",
            "difficulty" : "2",
            "lockAxioms" : "sigmaresult3",
            "toolboxChapter" : "sigma",
            "toolboxLemma" : "true",
            "toolboxRewritingTag" : "REWEXPR"
          },
          "Exercise4" : {
            "id" : "sigma_ex_30",
            "assignment" : "forall a b : Expr, a <> b -> no_intro (forall n : Nvar, (nvar n) >= 1 -> ((sigma(i,zero,((nvar n) - 1),((a ^ (((nvar n) - 1) - i)) * (b ^ i))))) = (((a ^ n) - (b ^ n)) / (a - b)) )",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "sigma"
          }
        }
      }
    },
    "Chapter6" : {
      "id" : "prod_seg",
      "icon" : "Í",
      "Tutorial" : {
        "Section1" : {
          "id" : "prod_seg_prod",
          "Exercise1" : {
            "id" : "prod_seg_tuto_prodlinear",
            "assignment" : "forall (a b:Series SNats (sunknown Expr)),    ((prod(k,zero,3,(app_series a k))) = (integer 2)) ->    ((prod(k,zero,3,(app_series b k))) = (integer 4)) ->    ((prod(k,zero,3,2*(app_series a k)*(3*(app_series b k)))) = 10368)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod",
            "axiomMode" : "prodlinear"
          },
          "Exercise2" : {
            "id" : "prod_seg_tuto_proddistri",
            "assignment" : "forall (A B:Expr) (a b:Series SNats (sunknown Expr)),    (A=(pow (prod(k,zero,3,(app_series a k))) 2)) -> (B=(pow (prod(k,zero,3,(app_series b k))) 2)) ->    (mult A B = (prod(k,zero,3,(pow (app_series a k) 2)*(pow (app_series b k) 2))))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod",
            "axiomMode" : "proddistri"
          },
          "Exercise3" : {
            "id" : "prod_seg_tuto_proddecompl",
            "assignment" : "forall (E:Expr) (a:Series SNats (sunknown Expr)) (n:Nvar),  (E= (div (prod(k,zero,n+1,app_series a k)) (prod(k,zero,n,app_series a k)))) -> (E=(app_series a (plus n 1)))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod",
            "axiomMode" : "proddecompl"
          },
          "Exercise4" : {
            "id" : "prod_seg_tuto_proddef",
            "assignment" : "forall (E:Expr) (a:Series SNats (sunknown Expr)) (n:Nvar), (E=(mult (prod(k,1,n+1,plus (app_series a k) 1)) (plus (app_series a zero) 1))) -> (E=(mult (prod(k,zero,n,plus (app_series a k) 1)) (plus (app_series a (n+1)) 1)))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod",
            "axiomMode" : "proddef"
          }
        },
        "Section2" : {
          "id" : "prod_seg_prodidx",
          "Exercise1" : {
            "id" : "prod_seg_tuto_produpshift",


            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod",
            "axiomMode" : "produpshift"
          },
          "Exercise2" : {
            "id" : "prod_seg_tuto_prodinverse",
            "assignment" : "forall (E:Expr) (n:Nvar), (E=(prod(k,zero,n,k/(n-k)))) -> (E=1) ",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod",
            "axiomMode" : "prodinverse"
          }
        },
        "Section3" : {
          "id" : "prod_seg_prodfact",
          "Exercise1" : {
            "id" : "prod_seg_tuto_factdef",
            "assignment" : "forall (E:Expr) (n: Nvar), (E=(mult (fact n) (prod(k,n+1,2*n,minus (plus (mult 3 n) 1) k)))) -> (E=fact(2*n))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod",
            "axiomMode" : "factdef"
          },
          "Exercise2" : {
            "id" : "prod_seg_tuto_factdecompl",
            "assignment" : "forall (E:Expr) (n: Nvar), (E=(div (fact(n + 1)) (fact(n)))) -> (E=(n+1))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod",
            "axiomMode" : "factdecompl"
          },
          "Exercise3" : {
            "id" : "prod_seg_tuto_factassoc",
            "assignment" : "forall (E:Expr) (n: Nvar), (E=(mult (fact(n)) (mult (n+1) (n+2)))) -> (E=fact(n + 2))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "lockAxioms" : "right_chain;lr_chain",
            "toolboxChapter" : "prod",
            "axiomMode" : "factassoc"
          }
        },
        "Section4" : {
          "id" : "prod_seg_prodbinom",
          "Exercise1" : {
            "id" : "prod_seg_tuto_binomdef",
            "assignment" : "forall (E:Expr) (k n : Nvar), (E=(binom k n)) -> (E=(binom (n - k) n))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod",
            "axiomMode" : "binomdef"
          },
          "Exercise2" : {
            "id" : "prod_seg_tuto_binompascal",
            "assignment" : "forall (E:Expr) (p n: Nvar), (E=(plus (plus (binom p n) (binom (plus p 1) n)) (binom (plus p 2) (plus n 1)))) -> (E=(binom (p+2) (n+2)))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod",
            "axiomMode" : "binompascal"
          },
          "Exercise3" : {
            "id" : "prod_seg_tuto_binomnewton",
            "assignment" : "forall (E:Expr) (n: Nvar), (E=(pow (1+1) n)) -> (E=(sigma(k,zero,n,binom k n))) ",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod",
            "axiomMode" : "binomnewton"
          }
        }
      },
      "Exercises" : {
        "Section1" : {
          "id" : "prod_seg_products",
          "Exercise1" : {
            "id" : "prod_seg_tuto_proddistri2",
            "assignment" : "forall (a b:Series SNats (sunknown Expr)),    ((prod(k,zero,3,(app_series a k))) = (integer 2)) ->    ((prod(k,zero,3,(app_series b k))) = (integer 4)) ->    ((prod(k,zero,3,(pow (app_series a k) 2)*(pow (app_series b k) 2))) = 64)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          },
          "Exercise2" : {
            "id" : "prod_seg_ex01",
            "assignment" : "forall (n: Nvar), ((prod(k,1,n,(1 + (1 / k))))) = (n + 1)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          },
          "Exercise3" : {
            "id" : "prod_seg_ex02",
            "assignment" : "forall (n: Nvar), ((prod(k,2,n,(1 - (1 / k))))) = (1 / n)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          },
          "Exercise4" : {
            "id" : "prod_seg_ex03",
            "assignment" : "forall (n: Nvar), ((nvar n) <> zero) -> (((prod(k,2,n,(1 - (1 / (k^2)))))) = ((n + 1) / (2 * n)))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          },
          "Exercise5" : {
            "id" : "prod_seg_ex04",
            "assignment" : "forall (n: Nvar), ((prod(k,1,n,((2 * k) + 3) / ((2 * k) - 1)))) = ((((2 * n) + 3) * ((2 * n) + 1)) / 3)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          },
          "Exercise6" : {
            "id" : "prod_seg_ex05",
            "assignment" : "forall (n: Nvar), ((prod(k,1,n,(k / (k + 1))))) = (1 / (n + 1))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          },
          "Exercise7" : {
            "id" : "prod_seg_ex09",
            "assignment" : "forall (n: Nvar), (ExprGT (nvar n) zero) -> (ExprGT ((prod(k,2,n,(1 - (1 / (k^2)))))) (1 / 2)) ",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          }
        },
        "Section2" : {
          "id" : "prod_seg_fact",
          "Exercise1" : {
            "id" : "prod_seg_fact_01",


            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          },
          "Exercise2" : {
            "id" : "prod_seg_fact_03",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          },
          "Exercise3" : {
            "id" : "prod_seg_fact_02",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          },
          "Exercise4" : {
            "id" : "prod_seg_fact_04",
            "assignment" : "forall (n:Nvar), (sigma(k,1,n,mult k (fact k))) = (minus (fact (plus n 1)) 1)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          },
          "Exercise5" : {
            "id" : "prod_seg_fact_05",
            "assignment" : "forall (n:Nvar), (sigma(k,1,n,div k (fact (plus k 1)))) = (minus 1 (div 1 (fact (plus n 1))))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          }
        },
        "Section3" : {
          "id" : "prod_seg_binom",
          "Exercise1" : {
            "id" : "prod_seg_binom_01",
            "assignment" : "forall (k n: Nvar), (k * (binom k n)) = n * (binom (k - 1) (n - 1))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "lockAxioms" : "binomsym",
            "toolboxChapter" : "prod"
          },
          "Exercise2" : {
            "id" : "prod_seg_binom_03",
            "assignment" : "forall (n: Nvar), (ExprGT n zero) -> (sigma(k,zero,n,mult (binom k n) (pow (uminus 1) k))) = zero",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          },
          "Exercise3" : {
            "id" : "prod_seg_binom_08",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          },
          "Exercise4" : {
            "id" : "prod_seg_binom_09",


            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          }
        }
      }
    }
  },
  "Part8" : {
    "id" : "analysis",
    "icon" : "Ĝ",
    "Chapter1" : {
      "id" : "analysis_induction",
      "icon" : "%",
      "Exercises" : {
        "Section1" : {
          "id" : "ind_sum",
          "Exercise1" : {
            "id" : "demo_tuto_sigma",
            "assignment" : "no_intro (forall n:Nvar,(sigma(k,zero,n,nvar k)) = (n*(n+1))/2)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "withDesc" : "true",
            "toolboxChapter" : "induction",
            "nbEnjoyHintKeys" : "20"
          },
          "Exercise2" : {
            "id" : "demo_medium_ex_03",
            "assignment" : "no_intro (forall n:Nvar,(sigma(k,zero,n,k ^ 2)) = ((2 * n + 1) * (n + 1) * n) / 6)",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "express" : "true",
            "lockAxioms" : "inner_replace; sigmaresult2; sigma_ex_16",
            "toolboxChapter" : "induction"
          },
          "Exercise3" : {
            "id" : "ind_tuto_4",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "induction"
          },
          "Exercise4" : {
            "id" : "induction_ex_01",
            "assignment" : "no_intro (forall (n:Nvar),    (ExprGTEQ n 1) ->    ((sigma(k,1,n,div 1 (mult (k) (mult (plus k 1) (plus k 2))))) = div (mult n (plus n 3)) (mult (4) (mult (plus n 1) (plus n 2)))))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "induction"
          },
          "Exercise5" : {
            "id" : "induction_ex_02",
            "assignment" : "no_intro (forall (n:Nvar),    (ExprGTEQ n 1) ->    ((sigma(k,1,n,plus (mult 2 k) 1)) = (mult n (plus n 2))))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "induction"
          },
          "Exercise6" : {
            "id" : "induction_ex_03",
            "assignment" : "no_intro (forall (n:Nvar),    (ExprGTEQ n 3) ->    ((sigma(k,3,n,mult (mult (4) (k)) (mult (minus k 1) (minus k 2)))) = mult (mult (n) (plus n 1)) (mult (minus n 1) (minus n 2))))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "induction"
          },
          "Exercise7" : {
            "id" : "induction_ex_04",
            "assignment" : "no_intro (forall (n:Nvar),    (ExprGTEQ n 1) ->    ((sigma(k,1,n,div k (pow 2 k))) = (minus 2 (div (plus n 2) (pow 2 n)))))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "induction"
          },
          "Exercise8" : {
            "id" : "induction_ex_05",
            "assignment" : "no_intro (forall (n:Nvar),    (ExprGTEQ n 3) ->    ((sigma(k,2,minus n 1,div (mult k (minus k 1)) (2))) = (div (mult (n) (mult (minus n 1) (minus n 2))) 6)))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "induction"
          },
          "Exercise9" : {
            "id" : "demo_hard_ex_02",
            "assignment" : "forall a b : Expr, no_intro (forall n : Nvar, (nvar n) >= 1 -> ((a ^ n) - (b ^ n)) = ((a - b) * (sigma(i,zero,((nvar n) - 1),((a ^ (((nvar n) - 1) - i)) * (b ^ i))))))",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "induction"
          }
        },
        "Section2" : {
          "id" : "ind_bernouilli",
          "Exercise1" : {
            "id" : "demo_bernoulli_1",
            "assignment" : "no_intro (forall n : Nvar, (plus n 1) <= (2^n))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "withDesc" : "true",
            "toolboxChapter" : "induction",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "demo_bernoulli_2",
            "assignment" : "forall x : Expr, x > zero -> no_intro (forall n : Nvar, ((x*n)+1) <= ((x+1)^n))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "withDesc" : "true",
            "toolboxChapter" : "induction",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "induction_ex_11",
            "assignment" : "no_intro (forall n:Nvar, (ExprGTEQ n 6) -> (ExprGTEQ (pow 2 n) (plus (mult 6 n) 7)))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "induction"
          },
          "Exercise4" : {
            "id" : "induction_ex_12",
            "assignment" : "no_intro (forall n:Nvar, (ExprGTEQ n 2) -> (ExprGTEQ (pow 5 n) (plus (pow 4 n) (pow 3 n))))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "induction"
          }
        },
        "Section3" : {
          "id" : "ind_divis",
          "Exercise1" : {
            "id" : "demo_medium_ex_02",
            "assignment" : "no_intro (forall n:Nvar, is_multiple_of ((4^n)-1) 3)",
            "withDemonstrate" : "true",
            "difficulty" : "2",
            "toolboxChapter" : "multiple"
          },
          "Exercise2" : {
            "id" : "induction_ex_06",
            "assignment" : "no_intro (forall n:Nvar, is_multiple_of (minus (pow 7 n) 1) 6)",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "multiple"
          },
          "Exercise3" : {
            "id" : "induction_ex_13",
            "assignment" : "no_intro (forall n:Nvar, is_even (plus (pow 5 n) 1))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "multiple"
          },
          "Exercise4" : {
            "id" : "induction_ex_07",
            "assignment" : "no_intro (forall n:Nvar, is_multiple_of (minus (pow 10 n) 1) 9)",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "multiple"
          },
          "Exercise5" : {
            "id" : "induction_ex_09",
            "assignment" : "no_intro (forall n:Nvar, is_multiple_of (plus (mult 3 (pow 5 (plus (mult 2 n) 1))) (pow 2 (plus (mult 3 n) 1))) 17)",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "multiple"
          },
          "Exercise6" : {
            "id" : "induction_ex_08",
            "assignment" : "no_intro (forall n:Nvar, is_multiple_of (minus (minus (pow 4 (plus (mult 2 n) 2)) (mult 15 n)) (16)) 225)",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "multiple"
          },
          "Exercise7" : {
            "id" : "induction_ex_10",
            "assignment" : "no_intro (forall n:Nvar, is_multiple_of (minus (pow 3 (plus n 3)) ((pow 4 (plus (mult 4 n) 2)))) 11)",
            "withDemonstrate" : "true",
            "difficulty" : "3",
            "toolboxChapter" : "multiple"
          }
        },
        "Section4" : {
          "id" : "ind_binom",
          "Exercise1" : {
            "id" : "prod_seg_binom_04",
            "assignment" : "no_intro (forall (n: Nvar),(sigma(k,1,n,mult (binom k n) ((pow (uminus 1) (k + 1)) / k))) = (sigma(k,1,n, 1 / k)))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "toolboxChapter" : "prod"
          },
          "Exercise2" : {
            "id" : "induction_binomnewton",

            "withDemonstrate" : "true",
            "difficulty" : "3",
            "lockAxioms" : "binomnewton",
            "toolboxChapter" : "induction"
          }
        }
      }
    },
    "Chapter2" : {
      "id" : "logic_inductive",
      "icon" : "%",
      "Exercises" : {
        "Section1" : {
          "id" : "list_section",
          "Exercise1" : {
            "id" : "inductive_01",

            "blockDeMorgan" : "true",
            "withoutScopeButton" : "true",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "toolboxChapter" : "inductive_types",
            "openContext" : "true"
          }
        }
      }
    },
    "Chapter3" : {
      "id" : "analysis_series",
      "icon" : "u",
      "Exercises" : {
        "Section1" : {
          "id" : "series_properties",
          "Exercise1" : {
            "id" : "series_prop_01",

            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "series_prop_02",

            "toolboxLemma" : "true"
          }
        },
        "Section2" : {
          "id" : "series_arith",
          "Exercise1" : {
            "id" : "series_ex_01",
            "assignment" : "forall (u:Series SNats (sunknown Expr)),    (sis_arith_reason u 3) -> (app_series u zero = 4) ->    (find_expr (app_series u 30) (EvarResult (integer 94)))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise2" : {
            "id" : "series_ex_02",
            "assignment" : "forall (u:Series SNats (sunknown Expr)),    (sis_arith_reason u (uminus 2)) ->    (app_series u zero = 763) -> (find_expr (app_series u 30) (EvarResult (integer 703)))",
            "withDemonstrate" : "true",
            "difficulty" : "0",
            "express" : "true"
          },
          "Exercise3" : {
            "id" : "series_ex_08",
            "assignment" : "forall (u:Series SNats (sunknown Expr)),    (sis_arith_reason u (div 5 2)) ->    (app_series u zero = (uminus 17)) -> (find_expr (app_series u 2016) (EvarResult (integer 5023)))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise4" : {
            "id" : "series_ex_09",
            "assignment" : "forall (u:Series SNats (sunknown Expr)),    (sis_arith_reason u (uminus (div 1 3))) ->    (app_series u zero = 3) -> (find_expr (app_series u 2016) (EvarResult (integer 675)))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise5" : {
            "id" : "series_ex_10",
            "assignment" : "forall (u:Series SNats (sunknown Expr)),    (sis_arith_reason u (uminus (div 3 2))) ->    (app_series u zero = 653) -> (find_expr (sigma(k,zero,2016,app_series u k)) (EvarResult (integer 5023)))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise6" : {
            "id" : "series_ex_11",
            "assignment" : "forall (u:Series SNats (sunknown Expr)),    (sis_arith_reason u (div 1 3)) ->    (app_series u zero = (uminus 540)) -> (find_expr (sigma(k,zero,3240,app_series u k)) (EvarResult (zero)))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise7" : {
            "id" : "analysis_series_03",
            "assignment" : "forall u:(Series SNats (sunknown Expr)), (sis_arith u) -> (app_series u 3 = 7) -> (app_series u 7 = 19) -> (find_reason_arith (EvarResult (integer 3)) u)",
            "withDemonstrate" : "true",
            "difficulty" : "1"
          },
          "Exercise8" : {
            "id" : "series_ex_33",
            "assignment" : "forall u:(Series SNats (sunknown Expr)), (sis_arith u) -> (app_series u 102 = 47) -> (app_series u 157 = 25) -> (find_reason_arith (EvarResult (integer 3)) u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise9" : {
            "id" : "analysis_series_04",
            "assignment" : "forall (r:Expr) (u:PosSeries SNats),      let S:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) ((sigma(k,zero,n,(1/((sqrt (app_series u k))+(sqrt (app_series u (k+1))))))))) in        sis_arith_reason u r ->        r <> zero ->        (forall (n:Nvar), app_series S (nexpr n) = (n+1)/((sqrt (app_series u zero))+(sqrt (app_series u (n+1)))))  ",
            "withDemonstrate" : "true",
            "difficulty" : "1"
          },
          "Exercise10" : {
            "id" : "series_ex_03",
            "assignment" : "let u:(Series (SNats) (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (fixexpr (fix_body (zero) (integer 8) (fix_body (n+1) (plus (uminus (app_series (fix_id Nvar SNats (sunknown Expr)) n)) 2) fix_nil)))) in (find_is_arith u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise11" : {
            "id" : "series_ex_04",
            "assignment" : "let u:(Series SNats (sunknown Expr)):= (fanonym (SNats) (sunknown Expr) (n) (fixexpr (fix_body (zero) (uminus 7) (fix_body (n+1) (minus (app_series (fix_id Nvar SNats (sunknown Expr)) n) 5) fix_nil)))) in (find_is_arith u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise12" : {
            "id" : "series_ex_05",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (minus (mult (div 7 2) n) 3)) in (find_is_arith u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise13" : {
            "id" : "series_ex_06",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (minus (mult (div 7 2) n) 3)) in (find_is_arith u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise14" : {
            "id" : "series_ex_07",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (plus (pow n 2) (mult 3 n))) in (find_is_arith u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          }
        },
        "Section3" : {
          "id" : "series_geo",
          "Exercise1" : {
            "id" : "series_ex_011",
            "assignment" : "forall (u:Series SNats (sunknown Expr)),    (sis_geo_reason u 2) -> (app_series u zero = (div 3 2)) ->    (find_expr (app_series u 5) (EvarResult (integer 94)))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise2" : {
            "id" : "series_ex_13",
            "assignment" : "forall (u:Series SNats (sunknown Expr)),    (sis_geo_reason u 2) ->    (app_series u zero = (div 3 2)) -> (find_expr (app_series u 6) (EvarResult (integer 96)))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise3" : {
            "id" : "series_ex_14",
            "assignment" : "forall (u:Series SNats (sunknown Expr)), (sis_geo_reason u (div 1 3)) -> (app_series u zero = 12) -> (find_expr (app_series u 3) (EvarResult (div 4 9)))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise4" : {
            "id" : "series_ex_16",
            "assignment" : "forall (u:Series SNats (sunknown Expr)),    (sis_geo u) ->    (app_series u 4 = 12) -> (app_series u 6 = 48) -> (find_expr (app_series u 20) (EvarResult (786432)))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise5" : {
            "id" : "series_ex_17",
            "assignment" : "forall (u:Series SNats (sunknown Expr)),    (sis_geo_reason u (div 1 2)) ->    ((app_series u 1) = 480) ->    (fun_is_decreasing u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise6" : {
            "id" : "series_ex_19",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (fixexpr (fix_body (zero) (zero) (fix_body (integer 1) (integer 1) (fix_body (plus n 2) (minus (mult 5 (app_series (fix_id Nvar SNats (sunknown Expr)) (plus n 1))) (mult 6 (app_series (fix_id Nvar SNats (sunknown Expr)) n))) (fix_nil)))))) in    let s:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (minus (app_series u (plus n 1)) (mult 2 (app_series u n)))) in      (and (sis_geo s) (forall (n:Nvar), app_series u (nvar n) = minus (pow 3 n) (pow 2 n)))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise7" : {
            "id" : "analysis_series_02",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (fixexpr (fix_body (zero) (integer 1) (fix_body (n+1) ((2 * (app_series (fix_id Nvar SNats (sunknown Expr)) n)) / (2 + 3 * (app_series (fix_id Nvar SNats (sunknown Expr)) n))) fix_nil)))) in    let v:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (1 / (app_series u n))) in      (forall n:Nvar, app_series u (nexpr (nvar n)) > 0) -> find_series_type v",
            "withDemonstrate" : "true",
            "difficulty" : "1"
          }
        },
        "Section4" : {
          "id" : "series_arithgeo",
          "Exercise1" : {
            "id" : "series_ex_20",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (fixexpr (fix_body (zero) (integer 2) (fix_body (plus n 1) (plus (mult 2 (app_series (fix_id Nvar SNats (sunknown Expr)) n)) 3) fix_nil)))) in    let v:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (minus (app_series u n) 6)) in      (forall (S:Expr),        (S = (sigma(k,zero,9,app_series u k))) ->  (and (sis_geo v) (S = 5060)))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise2" : {
            "id" : "series_ex_34",
            "assignment" : "no_intro (let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (fixexpr (fix_body (zero) (integer 8) (fix_body (plus n 1) (plus (mult (div 2 5) (app_series (fix_id Nvar SNats (sunknown Expr)) n)) 3) fix_nil)))) in    (forall n:Nvar, (app_series u (nvar n)) = plus (pow (div 2 5) n) 5))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise3" : {
            "id" : "series_ex_35",
            "assignment" : "no_intro (let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (fixexpr (fix_body (zero) (zero) (fix_body (plus n 1) (plus (mult (div 2 5) (app_series (fix_id Nvar SNats (sunknown Expr)) n)) 3) fix_nil)))) in    (forall n:Nvar, (app_series u (nvar n)) = (mult 5 (minus 1 (pow (div 2 5) n)))))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          }
        },
        "Section5" : {
          "id" : "series_bounded",
          "Exercise1" : {
            "id" : "series_ex_013"

          },
          "Exercise2" : {
            "id" : "analysis_series_01",

            "withDemonstrate" : "true",
            "difficulty" : "1"
          },
          "Exercise3" : {
            "id" : "series_ex_21",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (minus 5 (div 1 n))) in    (fun_is_bounded u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise4" : {
            "id" : "series_ex_22",
            "assignment" : "no_intro (let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (div (plus (mult 2 n) 1) (plus n 2))) in    (forall n:Nvar, is_bounded ExprLTEQLTEQ (div 1 2) (app_series u (nvar n)) 2))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise5" : {
            "id" : "series_ex_23",
            "assignment" : "no_intro (let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (plus (uminus (pow n 2)) (plus (mult 8 n) (1)))) in    (forall n:Nvar, ExprLTEQ (app_series u (nvar n)) 17))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise6" : {
            "id" : "series_ex_24",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (minus (sqrt (plus n 1)) (sqrt n))) in    (fun_is_bounded u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise7" : {
            "id" : "analysis_series_22",
            "assignment" : "let u:(Series SNats (sunknown Expr)) := (fanonym (SNats) (sunknown Expr) (n)    (fixexpr (fix_body zero 1      (fix_body (n+1) ((1-(app_series (fix_id Nvar SNats (sunknown Expr)) (nexpr (nvar n))))/2)        fix_nil      )    ))) in (fun_is_bounded u)",
            "withDemonstrate" : "true",
            "difficulty" : "1"
          },
          "Exercise8" : {
            "id" : "analysis_series_23",
            "assignment" : "let u:(Series SNats (sunknown Expr)) := (fanonym (SNats) (sunknown Expr) (n)    (fixexpr (      fix_body (zero) (integer 1) (        fix_body (integer 1) (integer 1) (          fix_body (n+2) ((app_series (fix_id Nvar SNats (sunknown Expr)) (nexpr (nvar n)))+(app_series (fix_id Nvar SNats (sunknown Expr)) (n+1))) fix_nil        )      )    ))) in (fun_is_bounded u)",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "comment" : "fibonacci"
          },
          "Exercise9" : {
            "id" : "series_ex_12",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (fixexpr (fix_body zero (integer 1) (fix_body (n+1) (div (mult 2 (app_series (fix_id Nvar (SNats) (sunknown Expr)) n)) (plus 2 (app_series (fix_id Nvar (SNats) (sunknown Expr)) n))) fix_nil)))) in    let v:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (div 1 (app_series u n))) in      (and (sis_arith v) (forall (n:Nvar), is_bounded ExprLTLTEQ zero (app_series u (nvar n)) 1))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          }
        },
        "Section6" : {
          "id" : "series_variation",
          "Exercise1" : {
            "id" : "series_ex_012"

          },
          "Exercise2" : {
            "id" : "series_ex_25",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (minus (mult 3 n) 5)) in    (fun_is_increasing u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise3" : {
            "id" : "series_ex_26",

            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise4" : {
            "id" : "series_ex_27",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (div (plus n 1) (plus n 2))) in    (fun_is_increasing u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise5" : {
            "id" : "series_ex_28",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (div (pow 3 n) 2)) in (fun_is_increasing u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise6" : {
            "id" : "series_ex_29",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (sqrt (plus (pow n 2) 3))) in (fun_is_increasing u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise7" : {
            "id" : "series_ex_30",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (fixexpr (fix_body (zero) (zero) (fix_body (plus n 1) (plus (app_series (fix_id Nvar SNats (sunknown Expr)) n) 3) fix_nil)))) in    (fun_is_increasing u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise8" : {
            "id" : "series_ex_31",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (fixexpr (fix_body (zero) (zero) (fix_body (plus n 1) (div (app_series (fix_id Nvar SNats (sunknown Expr)) n) 2) fix_nil)))) in (fun_is_increasing u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise9" : {
            "id" : "series_ex_32",
            "assignment" : "let u:(Series (sdom (c_inf_dom Nvar 1)) (sunknown Expr)):=(fanonym (sdom (c_inf_dom Nvar 1)) (sunknown Expr) (n) (minus (sqrt (plus n 1)) (sqrt n))) in (fun_is_decreasing u)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise10" : {
            "id" : "series_ex_18",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (div (pow (uminus 2) (plus n 1)) (3))) in (and (sis_geo u) (and (~ (fun_is_decreasing u)) (~ (fun_is_increasing u))))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          }
        }
      }
    },
    "Chapter4" : {
      "id" : "analysis_limits",
      "icon" : "v",
      "Exercises" : {
        "Section1" : {
          "id" : "constant",
          "Exercise1" : {
            "id" : "basicfun_001",
            "assignment" : "forall (a:Expr), (limit_expr infinity (SReals) (sunknown Expr) (fanonym (SReals) (sunknown Expr) (x) (a)) = a)",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "limit_cst_inf"
          },
          "Exercise2" : {
            "id" : "basicfun_003",
            "assignment" : "forall (a:Expr), (limit_expr neg_infinity (SReals) (sunknown Expr) (fanonym (SReals) (sunknown Expr) (x) (a)) = a)",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "limit_cst_neginf"
          },
          "Exercise3" : {
            "id" : "basicfun_002",
            "assignment" : "forall (a b:Expr), (limit_expr (bnone b) (SReals) (sunknown Expr) (fanonym (SReals) (sunknown Expr) (x) (a)) = a)",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "limit_cst_point"
          }
        },
        "Section2" : {
          "id" : "identity",
          "Exercise1" : {
            "id" : "basicfun_01",
            "assignment" : "(limit_expr infinity (SReals) (sunknown Expr) (fanonym (SReals) (sunknown Expr) (x) (x)) = infinity)",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "limit_linear_inf"
          },
          "Exercise2" : {
            "id" : "basicfun_02",
            "assignment" : "(limit_expr neg_infinity (SReals) (sunknown Expr) (fanonym (SReals) (sunknown Expr) (x) (x)) = neg_infinity)",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "limit_linear_neginf"
          },
          "Exercise3" : {
            "id" : "basicfun_03",
            "assignment" : "(forall a:Expr, limit_expr (bnone a) (SReals) (sunknown Expr) (fanonym (SReals) (sunknown Expr) (x) (x)) = a)",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "limit_linear_point"
          }
        },
        "Section3" : {
          "id" : "inverse",
          "Exercise1" : {
            "id" : "basicfun_04",
            "assignment" : "(limit_expr infinity (SReals) (sunknown Expr) (fanonym (SReals) (sunknown Expr) (x) (1 / x)) = zero)",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "limit_inverse_inf"
          },
          "Exercise2" : {
            "id" : "basicfun_05",
            "assignment" : "(limit_expr neg_infinity (SReals) (sunknown Expr) (fanonym (SReals) (sunknown Expr) (x) (1 / x)) = zero)",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "limit_inverse_neginf"
          },
          "Exercise3" : {
            "id" : "basicfun_06",
            "assignment" : "(limit_expr (bplus zero) (SReals) (sunknown Expr) (fanonym (SReals) (sunknown Expr) (x) (1 / x)) = infinity)",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "limit_inverse_zerop"
          },
          "Exercise4" : {
            "id" : "basicfun_07",
            "assignment" : "(limit_expr (bminus zero) (SReals) (sunknown Expr) (fanonym (SReals) (sunknown Expr) (x) (1 / x)) = neg_infinity)",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "limit_inverse_zeron"
          }
        },
        "Section4" : {
          "id" : "square",
          "Exercise1" : {
            "id" : "basicfun_09",
            "assignment" : "(limit_expr (infinity) (SReals) (sunknown Expr) (fanonym (SReals) (sunknown Expr) (x) (x^2)) = infinity)",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "limit_square_inf"
          },
          "Exercise2" : {
            "id" : "basicfun_10",
            "assignment" : "(limit_expr (neg_infinity) (SReals) (sunknown Expr) (fanonym (SReals) (sunknown Expr) (x) (x^2)) = infinity)",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "limit_square_neginf"
          }
        },
        "Section5" : {
          "id" : "sqrt",
          "Exercise1" : {
            "id" : "basicfun_12",
            "assignment" : "(limit_expr infinity (sdom (o_inf_dom Expr (zero))) (sunknown Expr) (fanonym (sdom (o_inf_dom Expr (zero))) (sunknown Expr) (x) (sqrt x)) = infinity)",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "limit_sqrt_inf"
          }
        },
        "Section6" : {
          "id" : "power",
          "Exercise1" : {
            "id" : "power_01",
            "assignment" : "no_intro (forall (n:Nvar),  (ExprGTEQ n 1) -> (limit_expr infinity (SReals) (sunknown Expr) (fanonym (SReals) (sunknown Expr) (x) (x^n)) = infinity))",
            "toolboxLemma" : "true"
          },
          "Exercise2" : {
            "id" : "geometric_02",
            "assignment" : "forall (q:Expr), (ExprGT q 1) -> ((limit_nvar infinity (SNats) (sunknown Expr) (fanonym (SNats) (sunknown Expr) (n) (q^n)) = infinity))",
            "toolboxLemma" : "true"
          },
          "Exercise3" : {
            "id" : "geometric_01",
            "assignment" : "forall (q:Expr), (is_bounded ExprLTLT zero q 1) -> ((limit_nvar infinity (SNats) (sunknown Expr) (fanonym (SNats) (sunknown Expr) (n) (q^n)) = zero))",
            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "geometric_03",
            "assignment" : "forall (q:Expr), (is_bounded ExprLTLT (uminus 1) q zero) -> ((limit_nvar infinity (SNats) (sunknown Expr) (fanonym (SNats) (sunknown Expr) (n) (q^n)) = zero))",
            "toolboxLemma" : "true"
          }
        },
        "Section7" : {
          "id" : "limits_properties",
          "Exercise1" : {
            "id" : "ex_analysis_limit_05",

            "withDesc" : "true"
          },
          "Exercise2" : {
            "id" : "ex_analysis_limit_07"

          },
          "Exercise3" : {
            "id" : "ex_analysis_limit_08",

            "toolboxLemma" : "true"
          },
          "Exercise4" : {
            "id" : "ex_analysis_limit_06",

            "toolboxLemma" : "true",
            "toolboxRuleId" : "elim_limit_inf_lt"
          },
          "Exercise5" : {
            "id" : "ex_analysis_limit_12",

            "toolboxLemma" : "true",
            "toolboxRuleId" : "elim_limit_inf_gt"
          },
          "Exercise6" : {
            "id" : "ex_analysis_limit_10",

            "toolboxLemma" : "true"
          },
          "Exercise7" : {
            "id" : "ex_analysis_limit_11",

            "toolboxLemma" : "true"
          },
          "Exercise8" : {
            "id" : "ex_analysis_limit_09",


            "withDesc" : "true",
            "toolboxLemma" : "true",
            "toolboxRuleId" : "sandwich"
          }
        },
        "Section8" : {
          "id" : "limits_series",
          "Exercise1" : {
            "id" : "analysis_series_20",
            "assignment" : "let u:(Series (SNats) (sunknown Expr)) := (fanonym (SNats) (sunknown Expr) (n) ((integer 1)/(n+(integer 1)))) in (find_limit u infinity (EvarResult (bnone zero)))",
            "withDemonstrate" : "true",
            "difficulty" : "1",
            "nbEnjoyHintKeys" : "20"
          },
          "Exercise2" : {
            "id" : "analysis_series_001",
            "assignment" : "let u:(Series (SNats) (sunknown Expr)) := (fanonym (SNats) (sunknown Expr) (n) (plus (minus (pow n 2) (mult 2 (pow n 3))) 2)) in (find_limit u infinity (EvarResult neg_infinity))",
            "withDemonstrate" : "true",
            "difficulty" : "1"
          },
          "Exercise3" : {
            "id" : "analysis_series_08",
            "assignment" : "let u:(Series (SNats) (sunknown Expr)) := (fanonym (SNats) (sunknown Expr) (n) (((((integer 3) * ((((n)) ^ (integer 2))))) - (n)) - (integer 5))) in (find_limit u infinity (EvarResult infinity))",
            "withDemonstrate" : "true",
            "difficulty" : "1"
          },
          "Exercise4" : {
            "id" : "analysis_series_09",
            "assignment" : "let u:(Series (SNats) (sunknown Expr)) := (fanonym (SNats) (sunknown Expr) (n) (((((((integer 3) * ((((n)) ^ (integer 2))))) + (integer 5))) / (((((uminus ((integer 2))) * (n))) + (integer 7)))))) in (find_limit u infinity (EvarResult neg_infinity))",
            "withDemonstrate" : "true",
            "difficulty" : "1"
          },
          "Exercise5" : {
            "id" : "analysis_series_10",
            "assignment" : "let u:(Series (SNats) (sunknown Expr)) := (fanonym (SNats) (sunknown Expr) (n) (((((((integer 3) ^ (nvar (n)))) - (((integer 4) ^ (nvar (n))))))))) in (find_limit u infinity (EvarResult neg_infinity))",
            "withDemonstrate" : "true",
            "difficulty" : "1"
          },
          "Exercise6" : {
            "id" : "analysis_series_11",
            "withDemonstrate" : "true",
            "difficulty" : "1"
          },
          "Exercise7" : {
            "id" : "analysis_series_12",
            "assignment" : "let u:(Series (SNats) (sunknown Expr)) := (fanonym (SNats) (sunknown Expr) (n) ((div (sin n) (pow (integer 2) n)))) in    (find_limit u infinity (EvarResult (bnone zero)))",
            "withDemonstrate" : "true",
            "difficulty" : "1"
          },
          "Exercise8" : {
            "id" : "analysis_series_13",
            "assignment" : "let u:(Series (sdom (o_inf_dom Nvar zero)) (sunknown Expr)) := (fanonym (SNats) (sunknown Expr) (n) ((sigma(k,1,n,(1/k^3))))) in    (and (forall n:Nvar, sis_element (nexpr n) (sdom (o_inf_dom Nvar zero)) -> app_fun u (nexpr n) <= 2 - 1/n) (find_limit_type u))",

            "withDemonstrate" : "true",
            "difficulty" : "1"
          },
          "Exercise9" : {
            "id" : "analysis_series_16",

            "withDemonstrate" : "true",
            "difficulty" : "1"
          },
          "Exercise10" : {
            "id" : "limits_ex_01",
            "assignment" : "let u:(Series (SNats) (sunknown Expr)) := (fanonym (SNats) (sunknown Expr) (n) (sqrt (plus (pow n 2) (plus (mult 2 n) 3)))) in (find_limit u infinity (EvarResult infinity))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise11" : {
            "id" : "limits_ex_02",
            "assignment" : "let u:(Series (SNats) (sunknown Expr)) := (fanonym (SNats) (sunknown Expr) (n) (div (sqrt (plus (pow n 2) 1)) (plus (mult 2 n) 1))) in (find_limit u infinity (EvarResult (bnone (div 1 2))))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise12" : {
            "id" : "limits_ex_03",
            "assignment" : "let u:(Series (SNats) (sunknown Expr)) := (fanonym (SNats) (sunknown Expr) (n) (minus (sqrt (plus (pow n 2) (3))) (sqrt (plus (pow n 2) (1))))) in (find_limit u infinity (EvarResult (bnone zero)))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise13" : {
            "id" : "limits_ex_04",
            "assignment" : "let u:(Series (SNats) (sunknown Expr)) := (fanonym (SNats) (sunknown Expr) (n) (minus (sqrt (plus (pow n 2) (3))) (sqrt (plus n 1)))) in (find_limit u infinity (EvarResult infinity))",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise14" : {
            "id" : "limit_series_02",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (fixexpr (fix_body (zero) (integer 2) (fix_body (n+1) (plus (div (app_series (fix_id Nvar SNats (sunknown Expr)) n) (integer 3)) (integer 2)) fix_nil)))) in (fun_has_finite_limit u)",
            "withDemonstrate" : "true",
            "difficulty" : "2"
          },
          "Exercise15" : {
            "id" : "limit_series_03",
            "assignment" : "let u:(Series SNats (sunknown Expr)):=(fanonym (SNats) (sunknown Expr) (n) (fixexpr (fix_body (zero) (integer 2) (fix_body (n+1) (minus (integer 4) (div (integer 3) (app_series (fix_id Nvar SNats (sunknown Expr)) n))) fix_nil)))) in (fun_has_finite_limit u)"
          },
          "Exercise16" : {
            "id" : "analysis_limit_004",
            "assignment" : "(let u := (fanonym (sdom (o_inf_dom Nvar (zero))) (sunknown Expr) (n) (plus (integer 1) (div (sin n) n))) in (find_limit u infinity EvarNone))",
            "difficulty" : "1"
          }
        },
        "Section9" : {
          "id" : "limits_inf",
          "Exercise1" : {
            "id" : "analysis_limits_tuto_01",
            "assignment" : "let f:(FunDef Expr SReals) := (fanonym (SReals) (sunknown Expr) (x) (plus (plus (mult 2 (pow x 3)) (pow x 2)) 2)) in (find_limit f neg_infinity EvarNone)",
            "difficulty" : "0"
          },
          "Exercise2" : {
            "id" : "analysis_limits_01",
            "assignment" : "let f:(FunDef Expr SRealsStar) := (fanonym (SRealsStar) (sunknown Expr) (x) (sqrt (1 + 1 / x ^ 2))) in (find_limit f neg_infinity EvarNone)",
            "difficulty" : "1"
          },
          "Exercise3" : {
            "id" : "analysis_limits_05",
            "assignment" : "let f:(FunDef Expr SRealsPlus) := (fanonym (SRealsPlus) (sunknown Expr) (x) (minus x (sqrt x))) in (find_limit f infinity EvarNone)",
            "difficulty" : "1"
          },
          "Exercise4" : {
            "id" : "analysis_limits_06",
            "assignment" : "let f:(FunDef Expr SReals) := (fanonym (SReals) (sunknown Expr) (x) (plus (minus (pow x 3) (mult 6 x)) 5)) in (find_limit f infinity EvarNone)",
            "difficulty" : "1"
          },
          "Exercise5" : {
            "id" : "analysis_limits_07",
            "assignment" : "let f:(FunDef Expr SReals) := (fanonym (SReals) (sunknown Expr) (x) (div (plus (mult 2 (pow x 2)) 3) (plus (plus (pow x 4)  (pow x 2)) 1))) in (find_limit f infinity EvarNone)",
            "difficulty" : "1"
          },
          "Exercise6" : {
            "id" : "analysis_limits_08",
            "assignment" : "let f:(FunDef Expr SReals) := (fanonym (SReals) (sunknown Expr) (x) (div (plus (minus (pow x 2) (mult 3 x)) 2) (plus (plus (pow x 2) x) 2))) in (find_limit f infinity EvarNone)",
            "difficulty" : "1"
          },
          "Exercise7" : {
            "id" : "analysis_limits_09",
            "assignment" : "let f:(FunDef Expr (sdiff SReals (ssing (uminus 3)))) := (fanonym (sdiff SReals (ssing (uminus 3))) (sunknown Expr) (x) ((x - sqrt x) / (x + 3))) in (find_limit f infinity EvarNone)",
            "difficulty" : "1"
          },
          "Exercise8" : {
            "id" : "analysis_limits_10",
            "assignment" : "let f:(FunDef Expr SReals) := (fanonym (SReals) (sunknown Expr) (x) (plus (plus (mult 2 (pow x 3)) (pow x 2)) 2)) in (find_limit f neg_infinity EvarNone)",
            "difficulty" : "1"
          },
          "Exercise9" : {
            "id" : "analysis_limits_11",
            "assignment" : "let f:(FunDef Expr SRealsPlus) := (fanonym (SRealsPlus) (sunknown Expr) (x) (sqrt (x + 1) - sqrt x)) in (find_limit f infinity EvarNone)",
            "difficulty" : "1"
          },
          "Exercise10" : {
            "id" : "analysis_limits_12",
            "assignment" : "let f:(FunDef Expr (sdiff (sdom (c_inf_dom Expr (uminus 1))) (ssing (integer 3)))) := (fanonym (sdiff (sdom (c_inf_dom Expr (uminus 1))) (ssing (integer 3))) (sunknown Expr) (x) ((sqrt (x + 1) - 2) / (x - 3))) in (find_limit f infinity EvarNone)",
            "difficulty" : "1"
          },
          "Exercise11" : {
            "id" : "analysis_limits_tuto_03",
            "assignment" : "let f:(FunDef Expr SReals) := (fanonym (SReals) (sunknown Expr) (x) (sqrt (1 + x ^ 2))) in (find_limit f infinity EvarNone)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          }
        },
        "Section10" : {
          "id" : "limits_finite",
          "Exercise1" : {
            "id" : "analysis_limits_02",
            "assignment" : "let f:(FunDef Expr (sdiff SReals (ssing (integer 2)))) := (fanonym (sdiff SReals (ssing (integer 2))) (sunknown Expr) (x) ((((x^2) - x) + 2) / ((x - 2)^2))) in (find_limit f 2 EvarNone)",
            "difficulty" : "1"
          },
          "Exercise2" : {
            "id" : "analysis_limits_03",
            "assignment" : "let f:(FunDef Expr (sdiff SReals (ssing (integer 1)))) := (fanonym (sdiff SReals (ssing (integer 1))) (sunknown Expr) (x) (div (plus (minus (pow x 2) (mult 2 x)) 1) (plus (minus (pow x 2) (mult 3 x)) 2))) in (find_limit f 1 EvarNone)",
            "difficulty" : "1"
          },
          "Exercise3" : {
            "id" : "analysis_limits_04",
            "assignment" : "let f:(FunDef Expr (sdiff SReals (ssing (integer 2)))) := (fanonym (sdiff SReals (ssing (integer 2))) (sunknown Expr) (x) (1 / (minus (pow x 2) 4))) in (find_limit f 1 EvarNone)",
            "difficulty" : "1"
          },
          "Exercise4" : {
            "id" : "limits_ex_05",
            "assignment" : "let f:(FunDef Expr (sdiff SReals (ssing (integer 1)))) := (fanonym (sdiff SReals (ssing (integer 1))) (sunknown Expr) (x) (((sqrt (minus (pow x 2) 1)) / (x-1)))) in (find_limit f (bplus 1) EvarNone)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise5" : {
            "id" : "limits_ex_06",
            "assignment" : "let f:(FunDef Expr (sdom (o_inf_dom Expr 1))) := (fanonym (sdom (o_inf_dom Expr 1)) (sunknown Expr) (x) (((minus (sqrt (plus (pow x 2) (minus x 2))) 2) / (x-2)))) in (find_limit f (2) EvarNone)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          },
          "Exercise6" : {
            "id" : "limits_ex_07",
            "assignment" : "let f:(FunDef Expr (sdom (o_inf_dom Expr 1))) := (fanonym (sdom (o_inf_dom Expr 1)) (sunknown Expr) (x) ((minus (sqrt (x+1)) (sqrt 2)) / (x-1))) in (find_limit f (bplus 1) EvarNone)",
            "withDemonstrate" : "true",
            "difficulty" : "0"
          }
        }
      }
    }
  },
  "Part9" : {
    "id" : "internal",
    "icon" : "^",
    "Part" : {
      "id" : "axiom",
      "icon" : "§"
    }
  }
}}
